{"version":3,"sources":["components/UI/LoadingIndicator/LoadingIndicator.tsx","components/UI/LoadingIndicator/LoadingIndicator.module.css","helpers/helpers.tsx","pages/Volumes/Volumes.module.css","components/MaterialCustomized/MenuVolumes.tsx","pages/Volumes/Volumes.tsx"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_LoadingIndicator_module_css__WEBPACK_IMPORTED_MODULE_1__","_LoadingIndicator_module_css__WEBPACK_IMPORTED_MODULE_1___default","LoadingIndicator","a","createElement","className","css","Loading_Indicator","module","exports","isAllTrue","obj","_i","_Object$entries","Object","entries","length","_ref3","_ref2","_home_thesis_combined_thesis_app_react_flask_pod_ui_app_react_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__","handleSelectAll","selectedItems","console","log","allTrue","updated","_home_thesis_combined_thesis_app_react_flask_pod_ui_app_react_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","_i2","_Object$entries2","_ref6","_ref5","key","toggleSelectAll","isSelectedAny","_i3","_Object$entries3","_ref9","_ref8","extractIds","items","imageIds","_i5","_Object$entries5","_ref15","_ref14","push","extractSelected","_i6","_Object$entries6","_ref18","_ref17","Volumes","Wrapper","Info","Content","Buttons","Heading","Name","Driver","Mountpoint","Button","Headline","DetailTitle","Error","MenuVolumes","props","volumeName","volumeOperation","_useState","useState","_useState2","slicedToArray","anchorEl","setAnchorEl","name","handleClose","react_default","variant","color","aria-controls","aria-haspopup","onClick","event","currentTarget","Menu","id","keepMounted","open","Boolean","onClose","MenuItem","connect","state","volumes","errorVolumes","error","dispatch","fetchVolumes","actions","createVolume","removeVolumes","selectedVolumes","_useViewport","useViewport","tabletLandscape","width","phone","tabletPortrait","desktop","defaultSelectedVolumes","objectSpread","setSelectedVolumes","_useState3","_useState4","openCreateVolumeModal","setOpenCreateVolumeModal","_useState5","_useState6","createVolumeName","setCreateVolumeName","_useState7","_useState8","showBackendError","setShowBackendError","useEffect","handleCheckboxChange","changeEvent","target","old","handleVolumeOperation","mode","volumesNames","toLowerCase","isSelected","volumesTitleClasses","content","loading","Grid","container","direction","map","volume","i","Fragment","Accordion","AccordionSummary","expandIcon","ExpandMore_default","aria-label","FormControlLabel","stopPropagation","onFocus","control","Checkbox","checked","label","item","Tooltip","title","MaterialCustomized_MenuVolumes","AccordionDetails","disabled","startIcon","Delete_default","Dialog","aria-labelledby","DialogTitle","DialogContent","DialogContentText","TextField","autoFocus","margin","type","fullWidth","onChange","e","value","DialogActions","Alert","severity","AlertTitle","join"],"mappings":"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","file":"js/7.585f4f62.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport css from './LoadingIndicator.module.css';\r\n\r\nconst LoadingIndicator = () => (\r\n    <div className={css.Loading_Indicator}>\r\n        <div />\r\n        <div />\r\n        <div />\r\n        <div />\r\n    </div>\r\n);\r\n\r\nexport default LoadingIndicator;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Loading_Indicator\":\"LoadingIndicator_Loading_Indicator__1KMH5\"};","// Sets all properties of an object to FALSE\nexport const isAllTrue = (obj: Object) => {\n    for (const [key, value] of Object.entries(obj)) {\n        if (value === false) {\n            return false;\n        }\n    }\n    return true;\n};\n\nexport const toggleSelectAll = (obj: Object, allTrue: Boolean) => {\n    for (const [key, value] of Object.entries(obj)) {\n        if (allTrue) {\n            obj[key] = false\n        } else {\n            obj[key] = true\n        }\n    }\n};\n\nexport const handleSelectAll = (selectedItems: Object) => {\n    console.log(\"handleSelectAll(), selectedItems:\");\n    const allTrue = isAllTrue(selectedItems);\n    const updated = { ...selectedItems };\n    toggleSelectAll(updated, allTrue);\n\n    return updated\n};\n\nexport const isSelectedAny = (selectedItems: Object) => {\n    console.log(\"isSelectedAny()\");\n    for (const [key, value] of Object.entries(selectedItems)) {\n        if (value === true) {\n            return true\n        }\n    }\n\n    return false;\n};\n\nexport const isSelectedOne = (selectedItems: Object) => {\n    let count = 0;\n\n    for (const [key, value] of Object.entries(selectedItems)) {\n        if (value === true) {\n            count++;\n        }\n    }\n\n    return count === 1;\n};\n\nexport const extractIds = (items: Object) => {\n    const imageIds = [];\n    for (const [key, value] of Object.entries(items)) {\n        if (value === true) {\n            imageIds.push(key);\n        }\n    }\n    return imageIds;\n};\n\nexport const extractSelected = (items) => {\n    const selectedItems = [];\n    for (const [key, value] of Object.entries(items)) {\n        if (value === true) {\n            selectedItems.push(key);\n        }\n    }\n    return selectedItems;\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Volumes\":\"Volumes_Volumes__2IIXL\",\"Wrapper\":\"Volumes_Wrapper__1cJTx\",\"Info\":\"Volumes_Info__1bpRA\",\"Content\":\"Volumes_Content__2BjWl\",\"Buttons\":\"Volumes_Buttons__lVUIg\",\"Heading\":\"Volumes_Heading__15rOP\",\"Name\":\"Volumes_Name__db3ND\",\"Driver\":\"Volumes_Driver__66Hp5\",\"Mountpoint\":\"Volumes_Mountpoint__1-Ckb\",\"Button\":\"Volumes_Button__30XFq\",\"Headline\":\"Volumes_Headline__lZ5JI\",\"DetailTitle\":\"Volumes_DetailTitle__1-K0i\",\"Error\":\"Volumes_Error__2dxf-\"};","import React, { useState } from 'react';\n\nimport Button from '@material-ui/core/Button';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\n\n\nconst MenuVolumes = props => {\n    const { volumeName, volumeOperation } = props\n    const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n    const name = {};\n    name[volumeName] = true;\n\n    const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleClose = () => {\n        setAnchorEl(null);\n    };\n\n    return (\n        <div>\n            <Button variant=\"outlined\" color=\"secondary\" aria-controls=\"simple-menu\" aria-haspopup=\"true\" onClick={handleClick}>\n                Actions\n            </Button>\n            <Menu\n                id=\"simple-menu\"\n                anchorEl={anchorEl}\n                keepMounted\n                open={Boolean(anchorEl)}\n                onClose={handleClose}\n            >\n                <MenuItem onClick={() => volumeOperation(name, \"remove\")}>Remove</MenuItem>\n                <MenuItem onClick={handleClose}>Close</MenuItem>\n            </Menu>\n        </div>\n    )\n}\n\nexport default MenuVolumes;\n","import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { ThunkDispatch } from 'redux-thunk';\nimport { AnyAction } from 'redux';\nimport * as actions from '../../store/actions/index';\nimport { AppState } from '../../store';\n\nimport css from './Volumes.module.css';\nimport LoadingIndicator from '../../components/UI/LoadingIndicator/LoadingIndicator';\nimport MenuVolumes from '../../components/MaterialCustomized/MenuVolumes';\n\nimport { Volume } from '../../models/Models';\nimport { isAllTrue, handleSelectAll, extractIds, isSelectedAny } from '../../helpers/helpers';\nimport { useViewport } from '../../Viewport';\n\n// Material UI\nimport Grid from '@material-ui/core/Grid';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Button from '@material-ui/core/Button';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, TextField, Typography } from '@material-ui/core';\nimport Accordion from '@material-ui/core/Accordion';\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport { Alert, AlertTitle } from '@material-ui/lab';\n\n\ninterface IVolumesProps {\n    volumes: Volume[],\n    loading: boolean,\n    errorVolumes: string,\n    fetchVolumes: Function,\n    createVolume: Function,\n    removeVolumes: Function,\n\n    volumesDataTest: Volume[]\n}\n\nconst Volumes = (props: IVolumesProps) => {\n    const { fetchVolumes, createVolume, removeVolumes, volumes, errorVolumes } = props;\n    const { width, phone, tabletPortrait, tabletLandscape, desktop } = useViewport();\n\n    const defaultSelectedVolumes = {};\n\n    for (const [key, value] of Object.entries(volumes)) {\n        defaultSelectedVolumes[value.Name] = false\n    }\n\n    const [selectedVolumes, setSelectedVolumes] = useState<any>({ ...defaultSelectedVolumes });\n    const [openCreateVolumeModal, setOpenCreateVolumeModal] = useState(false);\n    const [createVolumeName, setCreateVolumeName] = useState(\"\");\n    const [showBackendError, setShowBackendError] = useState<boolean>(false);\n\n    const allTrue = isAllTrue(selectedVolumes);\n\n    useEffect(() => {\n        fetchVolumes();\n    }, [fetchVolumes]);\n\n    useEffect(() => {\n        setShowBackendError(errorVolumes.length > 0);\n    }, [errorVolumes]);\n\n    const handleCheckboxChange = changeEvent => {\n        const { id } = changeEvent.target;\n        const old = { ...selectedVolumes };\n\n        for (const [key, value] of Object.entries(old)) {\n            if (id === key) {\n                old[key] = !old[key];\n            }\n        }\n\n        setSelectedVolumes(old);\n    };\n\n    const handleCreateVolumeOpen = () => {\n        setOpenCreateVolumeModal(true);\n    };\n\n    const handleCreateVolumeClose = () => {\n        setOpenCreateVolumeModal(false);\n    };\n\n    const onChangeCreateVolume = (e) => {\n        setCreateVolumeName(e.target.value);\n    };\n\n    const handleVolumeCreate = () => {\n        setOpenCreateVolumeModal(false);\n        if (createVolumeName.length == 0) {\n            return;\n        }\n        createVolume(createVolumeName);\n        setCreateVolumeName('');\n    };\n\n    const handleVolumeOperation = (selectedVolumes, mode: string) => {\n        // console.log(`triggered handleVolumeOperation(), mode: ${mode}`);\n        const volumesNames = extractIds(selectedVolumes);\n\n        switch (mode.toLowerCase()) {\n            case \"remove\":\n                removeVolumes(volumesNames);\n                break;\n            default: console.log(\"Unknown operation!\");\n        }\n\n        const updated = { ...selectedVolumes };\n\n        for (const [key, value] of Object.entries(updated)) {\n            if (value === true) {\n                updated[key] = false\n            }\n        }\n        setSelectedVolumes(updated);\n    };\n\n    const selectAll = () => {\n        const updated = handleSelectAll(selectedVolumes);\n        setSelectedVolumes(updated);\n    };\n\n    const isSelected = isSelectedAny(selectedVolumes);\n\n    const volumesTitleClasses = [css.Content, css.Heading];\n\n    let content = <div className={css.Wrapper}><LoadingIndicator /></div>\n\n    if (!props.loading) {\n        content = <Grid container direction=\"column\">\n            {(volumes && volumes.length) ?\n                (volumes.map((volume, i) => {\n                    return <React.Fragment key={volume.Name}>\n\n                        <Accordion>\n\n                            <AccordionSummary\n                                expandIcon={<ExpandMoreIcon />}\n                                aria-label=\"Expand\"\n                                aria-controls=\"additional-actions1-content\"\n                                id=\"additional-actions1-header\"\n                            >\n                                <FormControlLabel\n                                    aria-label=\"Acknowledge\"\n                                    onClick={(event) => event.stopPropagation()}\n                                    onFocus={(event) => event.stopPropagation()}\n                                    control={<Checkbox\n                                        color=\"primary\"\n                                        onClick={handleCheckboxChange}\n                                        id={volume.Name}\n                                        checked={selectedVolumes[volume.Name]} />}\n                                    label=\"\"\n                                />\n                                <Grid item container className={css.Content}>\n                                    <Tooltip title={volume.Name}>\n                                        <Grid className={css.Name}>{volume.Name}</Grid>\n                                    </Tooltip>\n                                    {(desktop || tabletLandscape) &&\n                                        <Tooltip title={volume.Driver}>\n                                            <Grid className={css.Driver}>{volume.Driver}</Grid>\n                                        </Tooltip>\n                                    }\n                                    {desktop &&\n                                        <Tooltip title={volume.Mountpoint}>\n                                            <Grid className={css.Mountpoint}>{volume.Mountpoint}</Grid>\n                                        </Tooltip>\n                                    }\n\n                                    <FormControlLabel\n                                        aria-label=\"Acknowledge\"\n                                        onClick={(event) => event.stopPropagation()}\n                                        onFocus={(event) => event.stopPropagation()}\n                                        control={<MenuVolumes\n                                            volumeName={volume.Name}\n                                            volumeOperation={handleVolumeOperation}\n                                        />}\n                                        label=\"\"\n                                    />\n                                </Grid>\n                            </AccordionSummary>\n\n                            <AccordionDetails>\n                                <Grid container direction=\"column\">\n                                    <Grid container direction=\"row\">\n                                        <Grid item className={css.DetailTitle}>Mountpoint:</Grid>\n                                        <Grid item className={css.Mountpoint}>{volume.Mountpoint}</Grid>\n                                    </Grid>\n                                    <Grid container direction=\"row\">\n                                        <Grid item className={css.DetailTitle}>Driver:</Grid>\n                                        <Grid item className={css.Driver}>{volume.Driver}</Grid>\n                                    </Grid>\n                                </Grid>\n                            </AccordionDetails>\n                        </Accordion>\n                    </React.Fragment>\n                }))\n                :\n                ''\n            }\n        </Grid>\n    }\n\n    return (\n        <div className={css.Volumes}>\n            <div className={css.Wrapper}>\n                <h1 className={css.Headline}>Podman Volumes</h1>\n                <p>Showing information about Volumes based on the `podman volume inspect` command</p>\n                <Grid container className={css.Buttons}>\n                    <Grid item className={css.Button}>\n                        <Button\n                            disabled={!isSelected}\n                            color=\"secondary\"\n                            variant=\"outlined\"\n                            startIcon={<DeleteIcon />}\n                            onClick={() => handleVolumeOperation(selectedVolumes, \"remove\")}>\n                            Remove Selected\n                        </Button>\n                    </Grid>\n\n                    <Grid item className={css.Button}>\n                        <Button variant=\"outlined\" color=\"primary\" onClick={handleCreateVolumeOpen}>\n                            Create\n                        </Button>\n                        <Dialog open={openCreateVolumeModal} onClose={handleCreateVolumeClose} aria-labelledby=\"form-dialog-title\">\n                            <DialogTitle id=\"form-dialog-title\">Create</DialogTitle>\n                            <DialogContent>\n                                <DialogContentText>\n                                    Enter the name of volume you want to create\"\n                            </DialogContentText>\n                                <TextField\n                                    autoFocus\n                                    margin=\"dense\"\n                                    id=\"name\"\n                                    label=\"Volume Create\"\n                                    type=\"text\"\n                                    fullWidth\n                                    onChange={onChangeCreateVolume}\n                                />\n                            </DialogContent>\n                            <DialogActions>\n                                <Button onClick={handleVolumeCreate} color=\"primary\">\n                                    Create\n                            </Button>\n                            </DialogActions>\n                        </Dialog>\n                    </Grid>\n\n                </Grid>\n\n                {showBackendError &&\n                    <Alert severity=\"error\" onClose={() => { setShowBackendError(!showBackendError) }}>\n                        <AlertTitle><strong>Backend Error</strong></AlertTitle>\n                        {errorVolumes.length > 0 &&\n                            <p className={css.Error}>{errorVolumes}</p>\n                        }\n                    </Alert>\n                }\n\n                <div className={css.Info}>\n                    <div className={volumesTitleClasses.join(' ')}>\n                        <Checkbox color=\"primary\" onClick={selectAll} checked={allTrue} />\n                        <div className={css.Name}>Name</div>\n                        {(desktop || tabletLandscape) &&\n                            <div className={css.Driver}>Driver</div>\n                        }\n                        {desktop &&\n                            <div className={css.Mountpoint}>Mountpoint</div>\n                        }\n                    </div>\n                    {content}\n                </div>\n            </div>\n        </div>\n    );\n};\n\nconst mapStateToProps = (state: AppState) => {\n    return {\n        volumes: state.volumes.volumes,\n        errorVolumes: state.volumes.error,\n    };\n};\n\nconst mapDispatchToProps = (dispatch: ThunkDispatch<any, any, AnyAction>) => {\n    return {\n        fetchVolumes: () =>\n            dispatch(actions.fetchVolumes()),\n        createVolume: (name) =>\n            dispatch(actions.createVolume(name)),\n        removeVolumes: (selectedVolumes: string[]) =>\n            dispatch(actions.removeVolumes(selectedVolumes)),\n    };\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Volumes);\n"],"sourceRoot":""}