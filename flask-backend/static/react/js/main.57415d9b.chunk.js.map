{"version":3,"sources":["store/actions/actionTypes.tsx","store/index.tsx","store/reducers/images.tsx","store/reducers/containers.tsx","store/reducers/volumes.tsx","testData/testData.tsx","components/Navigation/NavigationItems/NavigationItems.tsx","components/Navigation/SideDrawer/DrawerToggle/DrawerToggle.tsx","components/Navigation/Toolbar/Toolbar.tsx","components/UI/Backdrop/Backdrop.tsx","components/Navigation/SideDrawer/SideDrawer.tsx","components/Layout/Layout.tsx","pages/Intro/Intro.tsx","App.tsx","serviceWorker.ts","index.tsx","components/Navigation/SideDrawer/SideDrawer.module.css","Viewport.tsx","components/Navigation/Toolbar/Toolbar.module.css","pages/Intro/Intro.module.css","config.tsx","store/actions/images.tsx","store/actions/containers.tsx","store/actions/volumes.tsx","store/actions/index.tsx","WebSocket.tsx","components/Navigation/NavigationItems/NavigationItems.module.css","components/Layout/Layout.module.css","components/Navigation/SideDrawer/DrawerToggle/DrawerToggle.module.css","components/UI/Backdrop/Backdrop.module.css"],"names":["__webpack_require__","d","__webpack_exports__","FETCH_IMAGES_START","FETCH_IMAGES_SUCCESS","FETCH_IMAGES_FAIL","REMOVE_IMAGES_START","REMOVE_IMAGES_SUCCESS","REMOVE_IMAGES_FAIL","PRUNE_IMAGES_START","PRUNE_IMAGES_SUCCESS","PRUNE_IMAGES_FAIL","PULL_IMAGE_START","PULL_IMAGE_SUCCESS","PULL_IMAGE_FAIL","FETCH_CONTAINERS_START","FETCH_CONTAINERS_SUCCESS","FETCH_CONTAINERS_FAIL","REMOVE_CONTAINERS_START","REMOVE_CONTAINERS_SUCCESS","REMOVE_CONTAINERS_FAIL","UPDATE_CONTAINER_LOG","CONTAINER_RUN_START","CONTAINER_RUN_SUCCESS","CONTAINER_RUN_FAIL","STOP_CONTAINERS_START","STOP_CONTAINERS_SUCCESS","STOP_CONTAINERS_FAIL","KILL_CONTAINERS_START","KILL_CONTAINERS_SUCCESS","KILL_CONTAINERS_FAIL","FETCH_VOLUMES_START","FETCH_VOLUMES_SUCCESS","FETCH_VOLUMES_FAIL","CREATE_VOLUME_START","CREATE_VOLUME_SUCCESS","CREATE_VOLUME_FAIL","REMOVE_VOLUMES_START","REMOVE_VOLUMES_SUCCESS","REMOVE_VOLUMES_FAIL","history","initialState","images","error","loading","reducer","state","arguments","length","undefined","action","type","Object","objectSpread","fetchImagesStart","fetchImagesSuccess","fetchImagesFail","removeImagesStart","removeImagesSuccess","removeImagesFail","pullImageStart","pullImageSuccess","pullImageFail","pruneImagesStart","pruneImagesSuccess","pruneImagesFail","containers","containerLogs","fetchContainersStart","fetchContainersSuccess","fetchContainersFail","removeContainersStart","removeContainersSuccess","removeContainersFail","stopContainersStart","stopContainersSuccess","stopContainersFail","killContainersStart","killContainersSuccess","killContainersFail","console","log","updateContainerLogs","containerRunStart","containerRunSuccess","containerRunFail","volumes","fetchVolumesStart","fetchVolumesSuccess","fetchVolumesFail","createVolumeStart","createVolumeSuccess","createVolumeFail","removeVolumesStart","removeVolumesSuccess","removeVolumesFail","composeEnhancers","compose","persistConfig","key","storage","createBrowserHistory","persistedReducer","persistReducer","combineReducers","imagesReducer","containersReducer","volumesReducer","router","connectRouter","imagesDataTest","created","id","repository","size","tag","containersDataTest","containerId","image","command","ports","names","volumesDataTest","Anonymous","CreatedAt","Driver","GID","Labels","Mountpoint","Name","Options","Scope","UID","NavigationItems","props","react_default","a","createElement","className","css","List","isDesktop","react_router_dom","to","Link","activeClassName","active","Item","exact","drawerToggle","DrawerToggle","onClick","clicked","toolbar","Toolbar","Fragment","drawerToggleClicked","Navigation_NavigationItems_NavigationItems","backdrop","show","Backdrop","sideDrawer","attachedClasses","SideDrawer","Close","open","Open","closed","join","Layout","_useState","useState","_useState2","slicedToArray","showSideDrawer","setShowSideDrawer","children","Intro","_useViewport","useViewport","width","phone","tabletPortrait","tabletLandscape","desktop","concat","Content","Images","React","lazy","Promise","all","e","then","bind","Containers","ContainerLogs","Volumes","withRouter","connect","isAuthenticated","window","innerWidth","setIsDesktop","handleWindowResize","useEffect","addEventListener","throttle","removeEventListener","routes","react_router","path","component","render","components_Layout_Layout","react","fallback","Boolean","location","hostname","match","store","createStore","applyMiddleware","routerMiddleware","thunk","persistor","persistStore","app","es","integration_react","WebSocket","Viewport","esm","src_App_0","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message","module","exports","Logo","ViewportContext","createContext","ViewportProvider","_ref","isPhone","isTabletPortrait","isTabletLandscape","_home_thesis_combined_thesis_app_react_flask_pod_ui_app_react_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","setWidth","_useState3","innerHeight","_useState4","height","setHeight","_useState5","_useState6","setPhone","_useState7","_useState8","setTabletPortrait","_useState9","_useState10","setTabletLandscape","_useState11","_useState12","setDesktop","react__WEBPACK_IMPORTED_MODULE_1___default","Provider","value","_useContext","useContext","DesktopOnly","API_BASE","WS_BASE","fetchImages","dispatch","url","axios","get","headers","Content-Type","response","data","err","removeImages","imageIds","delete","IDs","pruneImages","pullImage","name","post","Access-Control-Allow-Origin","fetchContainers","removeContainers","containerIds","stopContainers","killContainers","containerRun","split","forEach","part","container","push","fetchVolumes","createVolume","removeVolumes","images_fetchImages","images_removeImages","images_pruneImages","images_pullImage","containers_fetchContainers","containers_removeContainers","containers_updateContainerLogs","containers_containerRun","containers_stopContainers","containers_killContainers","volumes_fetchVolumes","volumes_createVolume","volumes_removeVolumes","WebSocketContext","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","socket_io_client__WEBPACK_IMPORTED_MODULE_1__","socket_io_client__WEBPACK_IMPORTED_MODULE_1___default","_config__WEBPACK_IMPORTED_MODULE_2__","react_redux__WEBPACK_IMPORTED_MODULE_3__","_store_actions_index__WEBPACK_IMPORTED_MODULE_4__","socket","ws","useDispatch","io","on","msg","actions","updateLogs","payload","emit"],"mappings":"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","file":"js/main.57415d9b.chunk.js","sourcesContent":["import { Image, Container, Volume } from \"../../models/Models\";\n\n// See all available actions\n// Images Action Types\nexport const FETCH_IMAGES_START = 'FETCH_IMAGES_START';\nexport const FETCH_IMAGES_SUCCESS = 'FETCH_IMAGES_SUCCESS';\nexport const FETCH_IMAGES_FAIL = 'FETCH_IMAGES_FAIL';\n\nexport const REMOVE_IMAGES_START = 'REMOVE_IMAGES_START';\nexport const REMOVE_IMAGES_SUCCESS = 'REMOVE_IMAGES_SUCCESS';\nexport const REMOVE_IMAGES_FAIL = 'REMOVE_IMAGES_FAIL';\n\nexport const PRUNE_IMAGES_START = 'PRUNE_IMAGES_START';\nexport const PRUNE_IMAGES_SUCCESS = 'PRUNE_IMAGES_SUCCESS';\nexport const PRUNE_IMAGES_FAIL = 'PRUNE_IMAGES_FAIL';\n\nexport const PULL_IMAGE_START = 'PULL_IMAGE_START';\nexport const PULL_IMAGE_SUCCESS = 'PULL_IMAGE_SUCCESS';\nexport const PULL_IMAGE_FAIL = 'PULL_IMAGE_FAIL';\n\n// Containers Action Types\nexport const FETCH_CONTAINERS_START = 'FETCH_CONTAINERS_START';\nexport const FETCH_CONTAINERS_SUCCESS = 'FETCH_CONTAINERS_SUCCESS';\nexport const FETCH_CONTAINERS_FAIL = 'FETCH_CONTAINERS_FAIL';\n\nexport const REMOVE_CONTAINERS_START = 'REMOVE_CONTAINERS_START';\nexport const REMOVE_CONTAINERS_SUCCESS = 'REMOVE_CONTAINERS_SUCCESS';\nexport const REMOVE_CONTAINERS_FAIL = 'REMOVE_CONTAINERS_FAIL';\n\nexport const UPDATE_CONTAINER_LOG = \"UPDATE_CONTAINER_LOG\";\n\nexport const CONTAINER_RUN_START = 'CONTAINER_RUN_START';\nexport const CONTAINER_RUN_SUCCESS = 'CONTAINER_RUN_SUCCESS';\nexport const CONTAINER_RUN_FAIL = 'CONTAINER_RUN_FAIL';\n\nexport const STOP_CONTAINERS_START = 'STOP_CONTAINERS_START';\nexport const STOP_CONTAINERS_SUCCESS = 'STOP_CONTAINERS_SUCCESS';\nexport const STOP_CONTAINERS_FAIL = 'STOP_CONTAINERS_FAIL';\n\nexport const KILL_CONTAINERS_START = 'KILL_CONTAINERS_START';\nexport const KILL_CONTAINERS_SUCCESS = 'KILL_CONTAINERS_SUCCESS';\nexport const KILL_CONTAINERS_FAIL = 'KILL_CONTAINERS_FAIL';\n\n// Volumes Action Types\nexport const FETCH_VOLUMES_START = 'FETCH_VOLUMES_START';\nexport const FETCH_VOLUMES_SUCCESS = 'FETCH_VOLUMES_SUCCESS';\nexport const FETCH_VOLUMES_FAIL = 'FETCH_VOLUMES_FAIL';\n\nexport const CREATE_VOLUME_START = 'CREATE_VOLUME_START';\nexport const CREATE_VOLUME_SUCCESS = 'CREATE_VOLUME_SUCCESS';\nexport const CREATE_VOLUME_FAIL = 'CREATE_VOLUME_FAIL';\n\nexport const REMOVE_VOLUMES_START = 'REMOVE_VOLUMES_START';\nexport const REMOVE_VOLUMES_SUCCESS = 'REMOVE_VOLUMES_SUCCESS';\nexport const REMOVE_VOLUMES_FAIL = 'REMOVE_VOLUMES_FAIL';\n\n\n////////////////////////////////////////////////////////////////////////////////////////\n// Images State\nexport interface IImagesState {\n    images: Image[],\n    error: string,\n    loading: boolean\n}\n\n// Images Fetch\nexport interface IFetchImagesStartAction {\n    type: typeof FETCH_IMAGES_START\n}\n\nexport interface IFetchImagesSuccessAction {\n    type: typeof FETCH_IMAGES_SUCCESS,\n    images: Image[]\n}\n\nexport interface IFetchImagesFailAction {\n    type: typeof FETCH_IMAGES_FAIL,\n    error: string\n}\n\nexport type FetchImagesTypes = IFetchImagesStartAction | IFetchImagesSuccessAction | IFetchImagesFailAction;\n\n// Images Remove\nexport interface IRemoveImagesStartAction {\n    type: typeof REMOVE_IMAGES_START\n}\n\nexport interface IRemoveImagesSuccessAction {\n    type: typeof REMOVE_IMAGES_SUCCESS,\n    images: Image[]\n}\n\nexport interface IRemoveImagesFailAction {\n    type: typeof REMOVE_IMAGES_FAIL,\n    error: string\n}\n\nexport type RemoveImagesTypes = IRemoveImagesStartAction | IRemoveImagesSuccessAction | IRemoveImagesFailAction;\n\n// Images Prune\nexport interface IPruneImagesStartAction {\n    type: typeof PRUNE_IMAGES_START\n}\n\nexport interface IPruneImagesSuccessAction {\n    type: typeof PRUNE_IMAGES_SUCCESS,\n    images: Image[]\n}\n\nexport interface IPruneImagesFailAction {\n    type: typeof PRUNE_IMAGES_FAIL,\n    error: string\n}\n\nexport type PruneImagesTypes = IPruneImagesStartAction | IPruneImagesSuccessAction | IPruneImagesFailAction;\n\n// Image Pull\nexport interface IPullImageStartAction {\n    type: typeof PULL_IMAGE_START\n}\n\nexport interface IPullImageSuccessAction {\n    type: typeof PULL_IMAGE_SUCCESS,\n    images: Image[]\n}\n\nexport interface IPullImageFailAction {\n    type: typeof PULL_IMAGE_FAIL,\n    error: string\n}\n\nexport type PullImageTypes = IPullImageStartAction | IPullImageSuccessAction | IPullImageFailAction;\n\n\n////////////////////////////////////////////////////////////////////////////////////////\n// Containers State\nexport interface IContainersState {\n    containers: Container[],\n    error: string,\n    loading: boolean,\n    containerLogs: any\n}\n\n// Containers Fetch\nexport interface IFetchContainersStartAction {\n    type: typeof FETCH_CONTAINERS_START\n}\n\nexport interface IFetchContainersSuccessAction {\n    type: typeof FETCH_CONTAINERS_SUCCESS,\n    containers: Container[]\n}\n\nexport interface IFetchContainersFailAction {\n    type: typeof FETCH_CONTAINERS_FAIL,\n    error: string\n}\n\nexport type FetchContainersTypes = IFetchContainersStartAction | IFetchContainersSuccessAction | IFetchContainersFailAction;\n\n// Containers Remove\nexport interface IRemoveContainersStartAction {\n    type: typeof REMOVE_CONTAINERS_START\n}\n\nexport interface IRemoveContainersSuccessAction {\n    type: typeof REMOVE_CONTAINERS_SUCCESS,\n    containers: Container[]\n}\n\nexport interface IRemoveContainersFailAction {\n    type: typeof REMOVE_CONTAINERS_FAIL,\n    error: string\n}\n\nexport type RemoveContainersTypes = IRemoveContainersStartAction | IRemoveContainersSuccessAction | IRemoveContainersFailAction;\n\n//  Container Log Update\nexport interface IUpdateContainerLogsAction {\n    type: typeof UPDATE_CONTAINER_LOG,\n    containerLogs: string\n}\n\n// Container Run\nexport interface IContainerRunStartAction {\n    type: typeof CONTAINER_RUN_START\n}\n\nexport interface IContainerRunSuccessAction {\n    type: typeof CONTAINER_RUN_SUCCESS,\n    containers: Container[]\n}\n\nexport interface IContainerRunFailAction {\n    type: typeof CONTAINER_RUN_FAIL,\n    error: string\n}\n\nexport type ContainerRunTypes = IContainerRunStartAction | IContainerRunSuccessAction | IContainerRunFailAction;\n\n// Containers Stop\nexport interface IStopContainersStartAction {\n    type: typeof STOP_CONTAINERS_START\n}\n\nexport interface IStopContainersSuccessAction {\n    type: typeof STOP_CONTAINERS_SUCCESS,\n    containers: Container[]\n}\n\nexport interface IStopContainersFailAction {\n    type: typeof STOP_CONTAINERS_FAIL,\n    error: string\n}\n\nexport type StopContainersTypes = IStopContainersStartAction | IStopContainersSuccessAction | IStopContainersFailAction;\n\n// Containers Kill\nexport interface IKillContainersStartAction {\n    type: typeof KILL_CONTAINERS_START\n}\n\nexport interface IKillContainersSuccessAction {\n    type: typeof KILL_CONTAINERS_SUCCESS,\n    containers: Container[]\n}\n\nexport interface IKillContainersFailAction {\n    type: typeof KILL_CONTAINERS_FAIL,\n    error: string\n}\n\nexport type KillContainersTypes = IKillContainersStartAction | IKillContainersSuccessAction | IKillContainersFailAction;\n\n\n////////////////////////////////////////////////////////////////////////////////////////\n// Volumes State\nexport interface IVolumesState {\n    volumes: Volume[],\n    error: string,\n    loading: boolean\n}\n\n// Volumes Fetch\nexport interface IFetchVolumesStartAction {\n    type: typeof FETCH_VOLUMES_START\n}\n\nexport interface IFetchVolumesSuccessAction {\n    type: typeof FETCH_VOLUMES_SUCCESS,\n    volumes: Volume[]\n}\n\nexport interface IFetchVolumesFailAction {\n    type: typeof FETCH_VOLUMES_FAIL,\n    error: string\n}\n\nexport type FetchVolumesTypes = IFetchVolumesStartAction | IFetchVolumesSuccessAction | IFetchVolumesFailAction;\n\n// Volume Create\nexport interface ICreateVolumeStartAction {\n    type: typeof CREATE_VOLUME_START\n}\n\nexport interface ICreateVolumeSuccessAction {\n    type: typeof CREATE_VOLUME_SUCCESS,\n    volumes: Volume[]\n}\n\nexport interface ICreateVolumeFailAction {\n    type: typeof CREATE_VOLUME_FAIL,\n    error: string\n}\n\nexport type CreateVolumeTypes = ICreateVolumeStartAction | ICreateVolumeSuccessAction | ICreateVolumeFailAction;\n\n// Volumes Remove\nexport interface IRemoveVolumesStartAction {\n    type: typeof REMOVE_VOLUMES_START\n}\n\nexport interface IRemoveVolumesSuccessAction {\n    type: typeof REMOVE_VOLUMES_SUCCESS,\n    volumes: Volume[]\n}\n\nexport interface IRemoveVolumesFailAction {\n    type: typeof REMOVE_VOLUMES_FAIL,\n    error: string\n}\n\nexport type RemoveVolumesTypes = IRemoveVolumesStartAction | IRemoveVolumesSuccessAction | IRemoveVolumesFailAction;\n\n\n////////////////////////////////////////////////////////////////////////////////////////\n","import { createStore, applyMiddleware, compose, combineReducers, Store } from 'redux';\nimport thunk from 'redux-thunk';\nimport { persistReducer } from 'redux-persist';\n// defaults to localStorage for web\nimport storage from 'redux-persist/lib/storage';\n// Connected React Router\nimport { connectRouter } from 'connected-react-router';\nimport { createBrowserHistory } from 'history';\nimport { routerMiddleware } from 'connected-react-router';\n\n// Reducers\nimport imagesReducer from './reducers/images';\nimport containersReducer from './reducers/containers';\nimport volumesReducer from './reducers/volumes';\n\n\ndeclare global {\n    interface Window {\n        __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\n    }\n}\n\nconst composeEnhancers = process.env.NODE_ENV === 'development' ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ as typeof compose : null || compose;\n\nconst persistConfig = {\n    key: 'root',\n    storage,\n}\n\nconst rootReducer = (history) => combineReducers({\n    images: imagesReducer,\n    containers: containersReducer,\n    volumes: volumesReducer,\n    router: connectRouter(history),\n});\n\nexport const history = createBrowserHistory();\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer(history));\n\n// export type AppState = ReturnType<typeof rootReducer>;\nexport type AppState = any;\n\nexport function configureStore(): Store<AppState> {\n    const store = createStore(persistedReducer, composeEnhancers(\n        applyMiddleware(\n            routerMiddleware(history),\n            thunk\n        )\n    ));\n\n    return store;\n}\n","import {\n    IImagesState,\n\n    FETCH_IMAGES_START, FETCH_IMAGES_SUCCESS, FETCH_IMAGES_FAIL,\n    IFetchImagesStartAction, IFetchImagesSuccessAction, IFetchImagesFailAction,\n    FetchImagesTypes,\n\n    REMOVE_IMAGES_START, REMOVE_IMAGES_SUCCESS, REMOVE_IMAGES_FAIL,\n    IRemoveImagesStartAction, IRemoveImagesSuccessAction, IRemoveImagesFailAction,\n    RemoveImagesTypes,\n\n    PRUNE_IMAGES_START, PRUNE_IMAGES_SUCCESS, PRUNE_IMAGES_FAIL,\n    IPruneImagesStartAction, IPruneImagesSuccessAction, IPruneImagesFailAction,\n    PruneImagesTypes,\n\n    PULL_IMAGE_START, PULL_IMAGE_SUCCESS, PULL_IMAGE_FAIL,\n    IPullImageStartAction, IPullImageSuccessAction, IPullImageFailAction,\n    PullImageTypes,\n} from '../actions/actionTypes';\n\n\nconst initialState: IImagesState = {\n    images: [],\n    error: '',\n    loading: false,\n};\n\n// Fetch\nconst fetchImagesStart = (state: IImagesState, action: IFetchImagesStartAction): IImagesState => {\n    return { ...state, error: '', loading: true }\n};\n\nconst fetchImagesSuccess = (state: IImagesState, action: IFetchImagesSuccessAction): IImagesState => {\n    return { ...state, images: action.images, error: '', loading: false }\n};\n\nconst fetchImagesFail = (state: IImagesState, action: IFetchImagesFailAction): IImagesState => {\n    return { ...state, error: action.error, loading: false }\n};\n\n// Remove\nconst removeImagesStart = (state: IImagesState, action: IRemoveImagesStartAction): IImagesState => {\n    return { ...state, error: '', loading: true }\n};\n\nconst removeImagesSuccess = (state: IImagesState, action: IRemoveImagesSuccessAction): IImagesState => {\n    return { ...state, images: action.images, error: '', loading: false }\n};\n\nconst removeImagesFail = (state: IImagesState, action: IRemoveImagesFailAction): IImagesState => {\n    return { ...state, error: action.error, loading: false }\n};\n\n// Pull\nconst pullImageStart = (state: IImagesState, action: IPullImageStartAction): IImagesState => {\n    return { ...state, error: '', loading: true }\n};\n\nconst pullImageSuccess = (state: IImagesState, action: IPullImageSuccessAction): IImagesState => {\n    return { ...state, images: action.images, error: '', loading: false }\n};\n\nconst pullImageFail = (state: IImagesState, action: IPullImageFailAction): IImagesState => {\n    return { ...state, error: action.error, loading: false }\n};\n\n// Prune\nconst pruneImagesStart = (state: IImagesState, action: IPruneImagesStartAction): IImagesState => {\n    return { ...state, error: '', loading: true }\n};\n\nconst pruneImagesSuccess = (state: IImagesState, action: IPruneImagesSuccessAction): IImagesState => {\n    return { ...state, images: action.images, error: '', loading: false }\n};\n\nconst pruneImagesFail = (state: IImagesState, action: IPruneImagesFailAction): IImagesState => {\n    return { ...state, error: action.error, loading: false }\n};\n\nconst reducer = (state = initialState, action: FetchImagesTypes | RemoveImagesTypes | PruneImagesTypes | PullImageTypes): IImagesState => {\n    switch (action.type) {\n        case FETCH_IMAGES_START: return fetchImagesStart(state, action);\n        case FETCH_IMAGES_SUCCESS: return fetchImagesSuccess(state, action);\n        case FETCH_IMAGES_FAIL: return fetchImagesFail(state, action);\n\n        case REMOVE_IMAGES_START: return removeImagesStart(state, action);\n        case REMOVE_IMAGES_SUCCESS: return removeImagesSuccess(state, action);\n        case REMOVE_IMAGES_FAIL: return removeImagesFail(state, action);\n\n        case PULL_IMAGE_START: return pullImageStart(state, action);\n        case PULL_IMAGE_SUCCESS: return pullImageSuccess(state, action);\n        case PULL_IMAGE_FAIL: return pullImageFail(state, action);\n\n        case PRUNE_IMAGES_START: return pruneImagesStart(state, action);\n        case PRUNE_IMAGES_SUCCESS: return pruneImagesSuccess(state, action);\n        case PRUNE_IMAGES_FAIL: return pruneImagesFail(state, action);\n\n        default: return state;\n    }\n};\n\nexport default reducer;\n","import {\n    IContainersState,\n\n    FETCH_CONTAINERS_START, FETCH_CONTAINERS_SUCCESS, FETCH_CONTAINERS_FAIL,\n    IFetchContainersStartAction, IFetchContainersSuccessAction, IFetchContainersFailAction,\n    FetchContainersTypes,\n\n    REMOVE_CONTAINERS_START, REMOVE_CONTAINERS_SUCCESS, REMOVE_CONTAINERS_FAIL,\n    IRemoveContainersStartAction, IRemoveContainersSuccessAction, IRemoveContainersFailAction,\n    RemoveContainersTypes,\n\n    STOP_CONTAINERS_START, STOP_CONTAINERS_SUCCESS, STOP_CONTAINERS_FAIL,\n    IStopContainersStartAction, IStopContainersSuccessAction, IStopContainersFailAction,\n    StopContainersTypes,\n\n    KILL_CONTAINERS_START, KILL_CONTAINERS_SUCCESS, KILL_CONTAINERS_FAIL,\n    IKillContainersStartAction, IKillContainersSuccessAction, IKillContainersFailAction,\n    KillContainersTypes,\n\n    UPDATE_CONTAINER_LOG, IUpdateContainerLogsAction,\n\n    CONTAINER_RUN_START, CONTAINER_RUN_SUCCESS, CONTAINER_RUN_FAIL,\n    IContainerRunStartAction, IContainerRunSuccessAction, IContainerRunFailAction,\n    ContainerRunTypes,\n} from '../actions/actionTypes';\n\n\nconst initialState: IContainersState = {\n    containers: [],\n    error: '',\n    loading: false,\n    containerLogs: [],\n};\n\n// Fetch Containers\nconst fetchContainersStart = (state: IContainersState, action: IFetchContainersStartAction): IContainersState => {\n    return { ...state, error: '', loading: true }\n};\n\nconst fetchContainersSuccess = (state: IContainersState, action: IFetchContainersSuccessAction): IContainersState => {\n    return { ...state, containers: action.containers, error: '', loading: false }\n};\n\nconst fetchContainersFail = (state: IContainersState, action: IFetchContainersFailAction): IContainersState => {\n    return { ...state, error: action.error, loading: false }\n};\n\n// Remove Containers\nconst removeContainersStart = (state: IContainersState, action: IRemoveContainersStartAction): IContainersState => {\n    return { ...state, error: '', loading: true }\n};\n\nconst removeContainersSuccess = (state: IContainersState, action: IRemoveContainersSuccessAction): IContainersState => {\n    return { ...state, containers: action.containers, error: '', loading: false }\n};\n\nconst removeContainersFail = (state: IContainersState, action: IRemoveContainersFailAction): IContainersState => {\n    return { ...state, error: action.error, loading: false }\n};\n\n// Stop Containers\nconst stopContainersStart = (state: IContainersState, action: IStopContainersStartAction): IContainersState => {\n    return { ...state, error: '', loading: true }\n};\n\nconst stopContainersSuccess = (state: IContainersState, action: IStopContainersSuccessAction): IContainersState => {\n    return { ...state, containers: action.containers, error: '', loading: false }\n};\n\nconst stopContainersFail = (state: IContainersState, action: IStopContainersFailAction): IContainersState => {\n    return { ...state, error: action.error, loading: false }\n};\n\n// Kill Containers\nconst killContainersStart = (state: IContainersState, action: IKillContainersStartAction): IContainersState => {\n    return { ...state, error: '', loading: true }\n};\n\nconst killContainersSuccess = (state: IContainersState, action: IKillContainersSuccessAction): IContainersState => {\n    return { ...state, containers: action.containers, error: '', loading: false }\n};\n\nconst killContainersFail = (state: IContainersState, action: IKillContainersFailAction): IContainersState => {\n    return { ...state, error: action.error, loading: false }\n};\n\n// Update Logs\nconst updateContainerLogs = (state: IContainersState, action: IUpdateContainerLogsAction): IContainersState => {\n    console.log(`REDUCER - updateContainerLogs, action:`);\n    console.log(action);\n    return { ...state, containerLogs: action.containerLogs, loading: false }\n};\n\n// Container Run\nconst containerRunStart = (state: IContainersState, action: IContainerRunStartAction): IContainersState => {\n    return { ...state, error: '', loading: true }\n};\n\nconst containerRunSuccess = (state: IContainersState, action: IContainerRunSuccessAction): IContainersState => {\n    return { ...state, containers: action.containers, error: '', loading: false }\n};\n\nconst containerRunFail = (state: IContainersState, action: IContainerRunFailAction): IContainersState => {\n    return { ...state, error: action.error, loading: false }\n};\n\nconst reducer = (state = initialState, action: FetchContainersTypes | RemoveContainersTypes | IUpdateContainerLogsAction |\n    ContainerRunTypes | StopContainersTypes | KillContainersTypes): IContainersState => {\n    switch (action.type) {\n        case FETCH_CONTAINERS_START: return fetchContainersStart(state, action);\n        case FETCH_CONTAINERS_SUCCESS: return fetchContainersSuccess(state, action);\n        case FETCH_CONTAINERS_FAIL: return fetchContainersFail(state, action);\n\n        case REMOVE_CONTAINERS_START: return removeContainersStart(state, action);\n        case REMOVE_CONTAINERS_SUCCESS: return removeContainersSuccess(state, action);\n        case REMOVE_CONTAINERS_FAIL: return removeContainersFail(state, action);\n\n        case STOP_CONTAINERS_START: return stopContainersStart(state, action);\n        case STOP_CONTAINERS_SUCCESS: return stopContainersSuccess(state, action);\n        case STOP_CONTAINERS_FAIL: return stopContainersFail(state, action);\n\n        case KILL_CONTAINERS_START: return killContainersStart(state, action);\n        case KILL_CONTAINERS_SUCCESS: return killContainersSuccess(state, action);\n        case KILL_CONTAINERS_FAIL: return killContainersFail(state, action);\n\n        case UPDATE_CONTAINER_LOG: return updateContainerLogs(state, action);\n\n        case CONTAINER_RUN_START: return containerRunStart(state, action);\n        case CONTAINER_RUN_SUCCESS: return containerRunSuccess(state, action);\n        case CONTAINER_RUN_FAIL: return containerRunFail(state, action);\n\n        default: return state;\n    }\n};\n\nexport default reducer;\n","import {\n    IVolumesState,\n\n    FETCH_VOLUMES_START, FETCH_VOLUMES_SUCCESS, FETCH_VOLUMES_FAIL,\n    IFetchVolumesStartAction, IFetchVolumesSuccessAction, IFetchVolumesFailAction,\n    FetchVolumesTypes,\n\n    CREATE_VOLUME_START, CREATE_VOLUME_SUCCESS, CREATE_VOLUME_FAIL,\n    ICreateVolumeStartAction, ICreateVolumeSuccessAction, ICreateVolumeFailAction,\n    CreateVolumeTypes,\n\n    REMOVE_VOLUMES_START, REMOVE_VOLUMES_SUCCESS, REMOVE_VOLUMES_FAIL,\n    IRemoveVolumesStartAction, IRemoveVolumesSuccessAction, IRemoveVolumesFailAction,\n    RemoveVolumesTypes,\n} from '../actions/actionTypes';\n\n\nconst initialState: IVolumesState = {\n    volumes: [],\n    error: '',\n    loading: false,\n};\n\n// Fetch\nconst fetchVolumesStart = (state: IVolumesState, action: IFetchVolumesStartAction): IVolumesState => {\n    return { ...state, error: '', loading: true }\n};\n\nconst fetchVolumesSuccess = (state: IVolumesState, action: IFetchVolumesSuccessAction): IVolumesState => {\n    return { ...state, volumes: action.volumes, error: '', loading: false }\n};\n\nconst fetchVolumesFail = (state: IVolumesState, action: IFetchVolumesFailAction): IVolumesState => {\n    return { ...state, error: action.error, loading: false }\n};\n\n// Create\nconst createVolumeStart = (state: IVolumesState, action: ICreateVolumeStartAction): IVolumesState => {\n    return { ...state, error: '', loading: true }\n};\n\nconst createVolumeSuccess = (state: IVolumesState, action: ICreateVolumeSuccessAction): IVolumesState => {\n    return { ...state, volumes: action.volumes, error: '', loading: false }\n};\n\nconst createVolumeFail = (state: IVolumesState, action: ICreateVolumeFailAction): IVolumesState => {\n    return { ...state, error: action.error, loading: false }\n};\n\n// Remove\nconst removeVolumesStart = (state: IVolumesState, action: IRemoveVolumesStartAction): IVolumesState => {\n    return { ...state, error: '', loading: true }\n};\n\nconst removeVolumesSuccess = (state: IVolumesState, action: IRemoveVolumesSuccessAction): IVolumesState => {\n    return { ...state, volumes: action.volumes, error: '', loading: false }\n};\n\nconst removeVolumesFail = (state: IVolumesState, action: IRemoveVolumesFailAction): IVolumesState => {\n    return { ...state, error: action.error, loading: false }\n};\n\nconst reducer = (state = initialState, action: FetchVolumesTypes | CreateVolumeTypes | RemoveVolumesTypes): IVolumesState => {\n    switch (action.type) {\n        case FETCH_VOLUMES_START: return fetchVolumesStart(state, action);\n        case FETCH_VOLUMES_SUCCESS: return fetchVolumesSuccess(state, action);\n        case FETCH_VOLUMES_FAIL: return fetchVolumesFail(state, action);\n\n        case CREATE_VOLUME_START: return createVolumeStart(state, action);\n        case CREATE_VOLUME_SUCCESS: return createVolumeSuccess(state, action);\n        case CREATE_VOLUME_FAIL: return createVolumeFail(state, action);\n\n        case REMOVE_VOLUMES_START: return removeVolumesStart(state, action);\n        case REMOVE_VOLUMES_SUCCESS: return removeVolumesSuccess(state, action);\n        case REMOVE_VOLUMES_FAIL: return removeVolumesFail(state, action);\n\n        default: return state;\n    }\n};\n\nexport default reducer;\n","export const imagesDataTest = [\n    {\n        \"key\": 0,\n        \"created\": \"6 weeks ago\",\n        \"id\": \"6678c7c2e56c\",\n        \"repository\": \"docker.io/library/nginx\",\n        \"size\": \"131 MB\",\n        \"tag\": \"1.17.10-alpine-perl\"\n    },\n    {\n        \"key\": 1,\n        \"created\": \"3 months ago\",\n        \"id\": \"e7d92cdc71fe\",\n        \"repository\": \"docker.io/library/alpine\",\n        \"size\": \"5.86 MB\",\n        \"tag\": \"latest\"\n    }\n];\n\nexport const containersDataTest = [\n    {\n        key: 0,\n        containerId: \"5ae4a214e530\",\n        image: \"registry.fedoraproject.org/f29/httpd:latest\",\n        command: \"/usr/bin/run-http...\",\n        created: \"4 minutes ago\",\n        ports: \"0.0.0.0:8080->8080/tcp\",\n        names: \"cool_kalam\"\n    },\n    {\n        key: 1,\n        containerId: \"1235ae4a214e530123\",\n        image: \"second.fedoraproject.org/second\",\n        command: \"test/test/usr/bin/run-http...\",\n        created: \"21 minutes ago\",\n        ports: \"1.1.1.1:8080->8080/tcp\",\n        names: \"test_name\"\n    },\n];\n\nexport const volumesDataTest = [\n    {\n        Anonymous: false,\n        CreatedAt: \"2020-12-14T11:56:14.6300363+01:00\",\n        Driver: \"local\",\n        GID: 0,\n        Labels: {},\n        Mountpoint: \"/home/thesis/.local/share/containers/storage/volumes/my-vol-1/_data\",\n        Name: \"my-vol-1\",\n        Options: {},\n        Scope: \"local\",\n        UID: 0\n    },\n    {\n        Anonymous: false,\n        CreatedAt: \"2020-12-14T11:56:20.1633446+01:00\",\n        Driver: \"local\",\n        GID: 0,\n        Labels: {},\n        Mountpoint: \"/home/thesis/.local/share/containers/storage/volumes/my-vol-2/_data\",\n        Name: \"my-vol-2\",\n        Options: {},\n        Scope: \"local\",\n        UID: 0\n    },\n];\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nimport css from './NavigationItems.module.css';\n\nconst NavigationItems = props => (\n    <ul className={css.List}>\n        {props.isDesktop && (\n            <li className={css.Name}>\n                <NavLink\n                    to=\"/\"\n                    className={css.Link}\n                    activeClassName={css.active}\n                >\n                    Podman UI\n                </NavLink>\n            </li>\n        )}\n        <li className={css.Item}>\n            <NavLink\n                to=\"/\"\n                exact\n                className={css.Link}\n                activeClassName={css.active}\n            >\n                Home\n            </NavLink>\n        </li>\n        <li className={css.Item}>\n            <NavLink\n                to=\"/images\"\n                className={css.Link}\n                activeClassName={css.active}\n            >\n                Images\n            </NavLink>\n        </li>\n        <li className={css.Item}>\n            <NavLink\n                to=\"/containers\"\n                className={css.Link}\n                activeClassName={css.active}\n            >\n                Containers\n            </NavLink>\n        </li>\n        <li className={css.Item}>\n            <NavLink\n                to=\"/volumes\"\n                className={css.Link}\n                activeClassName={css.active}\n            >\n                Volumes\n            </NavLink>\n        </li>\n    </ul>\n);\n\nexport default NavigationItems;\n","import React from 'react';\n\nimport css from './DrawerToggle.module.css';\n\nconst drawerToggle = (props) => (\n    <div className={css.DrawerToggle} onClick={props.clicked}>\n        <div></div>\n        <div></div>\n        <div></div>\n    </div>\n);\n\nexport default drawerToggle;","import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nimport css from './Toolbar.module.css';\nimport NavigationItems from '../NavigationItems/NavigationItems';\nimport DrawerToggle from '../SideDrawer/DrawerToggle/DrawerToggle';\n\nconst toolbar = props => (\n    <header className={css.Toolbar}>\n        {!props.isDesktop && (\n            <React.Fragment>\n                <DrawerToggle clicked={props.drawerToggleClicked} />\n                <div className={css.Name}>\n                    <NavLink to=\"/\" className={css.Link}>\n                        Podman UI\n                    </NavLink>\n                </div>\n            </React.Fragment>\n        )}\n        {props.isDesktop && (\n            <nav>\n                <NavigationItems isDesktop />\n            </nav>\n        )}\n    </header>\n);\n\nexport default toolbar;\n","import React from 'react';\n\nimport css from './Backdrop.module.css';\n\nconst backdrop = props => (\n    props.show ? <div className={css.Backdrop} onClick={props.clicked}></div> : null\n);\n\nexport default backdrop;\n","import React from 'react';\n\nimport css from './SideDrawer.module.css';\n\nimport NavigationItems from '../NavigationItems/NavigationItems';\nimport Backdrop from '../../UI/Backdrop/Backdrop';\n\n\nconst sideDrawer = props => {\n    let attachedClasses = [css.SideDrawer, css.Close];\n    if (props.open) {\n        attachedClasses = [css.SideDrawer, css.Open];\n    }\n    return (\n        <React.Fragment>\n            <Backdrop show={props.open} clicked={props.closed} />\n            <div className={attachedClasses.join(' ')} onClick={props.closed}>\n                <nav>\n                    <NavigationItems isDesktop={false} />\n                </nav>\n            </div>\n        </React.Fragment>\n    );\n};\n\nexport default sideDrawer;\n","import React, { useState } from 'react';\nimport css from './Layout.module.css';\n\nimport Toolbar from '../Navigation/Toolbar/Toolbar';\nimport SideDrawer from '../Navigation/SideDrawer/SideDrawer';\n\n\ntype LayoutProps = {\n    isDesktop: boolean,\n    children: React.ReactNode,\n};\n\nconst Layout = (props: LayoutProps) => {\n    const [showSideDrawer, setShowSideDrawer] = useState<boolean>(false);\n\n    const sideDrawerClosedHandler = () => {\n        setShowSideDrawer(false);\n    };\n\n    const sideDrawerToggleHandler = () => {\n        setShowSideDrawer(!showSideDrawer);\n    };\n\n    return (\n        <React.Fragment>\n            <Toolbar\n                isDesktop={props.isDesktop}\n                drawerToggleClicked={sideDrawerToggleHandler}\n            />\n\n            {!props.isDesktop && (\n                <SideDrawer\n                    open={showSideDrawer}\n                    closed={sideDrawerClosedHandler}\n                />\n            )}\n\n            <main className={css.Layout}>{props.children}</main>\n        </React.Fragment>\n    );\n}\n\nexport default Layout;\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport css from './Intro.module.css';\n\nimport { useViewport } from '../../Viewport';\n\n\nconst Intro = () => {\n    const { width, phone, tabletPortrait, tabletLandscape, desktop } = useViewport();\n    console.log(`width=${width}, phone=${phone}, tabletPortrait=${tabletPortrait}, tabletLandscape=${tabletLandscape}, desktop=${desktop}`);\n\n    return (\n        <div className={css.Intro}>\n            <div className={css.Content}>\n                <h1>Welcome to Podman Web UI Demo!</h1>\n                <h2>Navigate to images/containers/volumes pages</h2>\n                {/* <p>My Token = {window.token}</p> */}\n                <NavLink to=\"/containers\" className={css.Link}>\n                    Try containers!\n                </NavLink>\n            </div>\n        </div>\n    );\n};\n\nexport default Intro;\n","import React, { useState, useEffect, Suspense } from 'react';\nimport { Route, Switch, withRouter, Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport throttle from 'lodash.throttle';\n\nimport './App.css';\nimport { AppState } from './store';\nimport { imagesDataTest, containersDataTest, volumesDataTest } from './testData/testData';\n\nimport Layout from './components/Layout/Layout';\nimport Intro from './pages/Intro/Intro';\n\n\ndeclare global {\n  interface Window {\n    token: String;\n  }\n}\n\n\nconst Images = React.lazy(() => {\n  return import('./pages/Images/Images');\n});\n\nconst Containers = React.lazy(() => {\n  return import('./pages/Containers/Containers');\n});\n\nconst ContainerLogs = React.lazy(() => {\n  return import('./pages/ContainerLogs/ContainerLogs');\n});\n\nconst Volumes = React.lazy(() => {\n  return import('./pages/Volumes/Volumes');\n});\n\ninterface IAppProps {\n  isAuthenticated: boolean\n}\n\nconst App = (props: IAppProps) => {\n  const [isDesktop, setIsDesktop] = useState<boolean>(window.innerWidth >= 1000);\n\n  const handleWindowResize = () => {\n    setIsDesktop(window.innerWidth >= 1000);\n  };\n\n  useEffect(() => {\n    // Did Mount\n    window.addEventListener(\n      'resize',\n      throttle(() => {\n        handleWindowResize();\n      }, 200)\n    );\n  }, []);\n\n  useEffect(() => {\n    // Will Unmount\n    return () => {\n      window.removeEventListener(\n        'resize',\n        throttle(() => {\n          handleWindowResize();\n        }, 200)\n      );\n    }\n  }, []);\n\n  const routes = (\n    <Switch>\n      <Route path=\"/\" exact component={Intro} />\n      <Route path=\"/images/\" exact render={() => <Images imagesDataTest={imagesDataTest} />} />\n      <Route path=\"/containers/\" exact render={() => <Containers containersDataTest={containersDataTest} />} />\n      <Route path=\"/container_logs/:id\" render={() => <ContainerLogs />} />\n      <Route path=\"/volumes/\" render={() => <Volumes volumesDataTest={volumesDataTest} />} />\n      <Redirect to=\"/\" />\n    </Switch>\n  );\n\n  return (\n    <div>\n      <Layout isDesktop={isDesktop}>\n        <Suspense fallback={<p>Loading...</p>}>{routes}</Suspense>\n      </Layout>\n    </div>\n  );\n}\n\nconst mapStateToProps = (state: AppState) => {\n  return {\n    isAuthenticated: true\n  };\n};\n\nexport default withRouter(\n  connect(\n    mapStateToProps,\n  )(App)\n);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { persistStore } from 'redux-persist';\nimport { PersistGate } from 'redux-persist/integration/react';\n\nimport { ConnectedRouter } from 'connected-react-router';\n\nimport { configureStore, history } from './store';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport WebSocketProvider from './WebSocket';\nimport { ViewportProvider } from './Viewport';\n\n\nconst store = configureStore();\nconst persistor = persistStore(store)\n\nconst app = (\n    <Provider store={store}>\n        <PersistGate loading={null} persistor={persistor}>\n            <WebSocketProvider>\n                <ViewportProvider>\n                    <ConnectedRouter history={history}>\n                        <App />\n                    </ConnectedRouter>\n                </ViewportProvider>\n            </WebSocketProvider>\n        </PersistGate>\n    </Provider>\n);\n\nReactDOM.render(\n    <React.StrictMode>\n        {app}\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"SideDrawer\":\"SideDrawer_SideDrawer__1ro79\",\"Open\":\"SideDrawer_Open__gZi6D\",\"Close\":\"SideDrawer_Close__3WM2B\",\"Logo\":\"SideDrawer_Logo__1HooS\"};","import React, { createContext, useContext, useEffect, useState } from 'react';\nimport throttle from 'lodash.throttle';\n\n\nconst ViewportContext: any = createContext({});\n\nexport const ViewportProvider = ({ children }) => {\n    // breakpoints 600px, 900px, 1200px will be reflect in CSS as well\n    const isPhone = () => window.innerWidth < 600;\n    const isTabletPortrait = () => window.innerWidth >= 600 && window.innerWidth < 900;\n    const isTabletLandscape = () => window.innerWidth >= 900 && window.innerWidth && window.innerWidth < 1200;\n    const isDesktop = () => window.innerWidth >= 1200;\n\n    const [width, setWidth] = useState(window.innerWidth);\n    const [height, setHeight] = useState(window.innerHeight);\n    const [phone, setPhone] = useState(isPhone());\n    const [tabletPortrait, setTabletPortrait] = useState(isTabletPortrait());\n    const [tabletLandscape, setTabletLandscape] = useState(isTabletLandscape());\n    const [desktop, setDesktop] = useState(isDesktop());\n    const handleWindowResize = () => {\n        setWidth(window.innerWidth);\n        setHeight(window.innerHeight);\n        setPhone(isPhone());\n        setTabletPortrait(isTabletPortrait());\n        setTabletLandscape(isTabletLandscape());\n        setDesktop(isDesktop());\n    };\n\n    useEffect(() => {\n        window.addEventListener(\n            \"resize\",\n            throttle(() => {\n                handleWindowResize();\n            }, 200)\n        );\n        return () => window.removeEventListener(\"resize\", handleWindowResize);\n    }, []);\n\n    return (\n        <ViewportContext.Provider value={{ width, height, phone, tabletPortrait, tabletLandscape, desktop }}>\n            {children}\n        </ViewportContext.Provider>\n    );\n};\n\nexport const useViewport = () => {\n    const { width, height, phone, tabletPortrait, tabletLandscape, desktop } = useContext(ViewportContext);\n    return { width, height, phone, tabletPortrait, tabletLandscape, desktop };\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Toolbar\":\"Toolbar_Toolbar__kSh8L\",\"Logo\":\"Toolbar_Logo__qZIV3\",\"Name\":\"Toolbar_Name__aDyvF\",\"Link\":\"Toolbar_Link__2Y_UJ\",\"DesktopOnly\":\"Toolbar_DesktopOnly___DbzX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Intro\":\"Intro_Intro__3J7Rq\",\"Content\":\"Intro_Content__396Yx\",\"Link\":\"Intro_Link__3iXm9\"};","export const API_BASE = \"http://localhost:5000\";\nexport const WS_BASE = \"http://localhost:5000\";\n// http://127.0.0.1:5000\n","import axios from 'axios';\nimport { ThunkDispatch } from 'redux-thunk';\nimport { AnyAction } from 'redux';\nimport { Image } from '../../models/Models';\nimport {\n    FETCH_IMAGES_START, FETCH_IMAGES_SUCCESS, FETCH_IMAGES_FAIL,\n    REMOVE_IMAGES_START, REMOVE_IMAGES_SUCCESS, REMOVE_IMAGES_FAIL,\n    PRUNE_IMAGES_START, PRUNE_IMAGES_SUCCESS, PRUNE_IMAGES_FAIL,\n    PULL_IMAGE_START, PULL_IMAGE_SUCCESS, PULL_IMAGE_FAIL,\n} from './actionTypes';\n\nimport { API_BASE } from '../../config';\n\n\n// IMAGES\n\n// Fetch\nexport const fetchImagesStart = () => {\n    return {\n        type: FETCH_IMAGES_START\n    };\n};\n\nexport const fetchImagesSuccess = (images: Image) => {\n    return {\n        type: FETCH_IMAGES_SUCCESS,\n        images: images\n    };\n};\n\nexport const fetchImagesFail = (error: string) => {\n    return {\n        type: FETCH_IMAGES_FAIL,\n        error: error\n    };\n};\n\nexport const fetchImages = () => {\n    return (dispatch: ThunkDispatch<any, any, AnyAction>) => {\n        dispatch(fetchImagesStart());\n\n        const url = `${API_BASE}/images`;\n\n        const headers = {\n            'Content-Type': 'application/json',\n        }\n\n        axios.get(url, { headers: headers })\n            .then(response => {\n                dispatch(fetchImagesSuccess(response.data.images));\n            })\n            .catch(err => {\n                dispatch(fetchImagesFail(err.response.data));\n            });\n    };\n};\n\n// Remove\nexport const removeImagesStart = () => {\n    return {\n        type: REMOVE_IMAGES_START\n    };\n};\n\nexport const removeImagesSuccess = (images: Image) => {\n    return {\n        type: REMOVE_IMAGES_SUCCESS,\n        images: images\n    };\n};\n\nexport const removeImagesFail = (error: string) => {\n    return {\n        type: REMOVE_IMAGES_FAIL,\n        error: error\n    };\n};\n\nexport const removeImages = (imageIds: Array<String>) => {\n    return (dispatch: ThunkDispatch<any, any, AnyAction>) => {\n        console.log(\"removeImages()\");\n        dispatch(removeImagesStart());\n\n        const url = `${API_BASE}/images`;\n\n        const headers = {\n            'Content-Type': 'application/json',\n        }\n\n        axios.delete(url, {\n            headers: headers,\n            data: {\n                IDs: imageIds\n            }\n        }).then(response => {\n            dispatch(removeImagesSuccess(response.data.images));\n        }).catch(err => {\n            dispatch(removeImagesFail(err.response.data));\n        });\n    };\n};\n\n// Prune\nexport const pruneImagesStart = () => {\n    return {\n        type: PRUNE_IMAGES_START\n    };\n};\n\nexport const pruneImagesSuccess = (images: Image) => {\n    return {\n        type: PRUNE_IMAGES_SUCCESS,\n        images: images\n    };\n};\n\nexport const pruneImagesFail = (error: string) => {\n    return {\n        type: PRUNE_IMAGES_FAIL,\n        error: error\n    };\n};\n\nexport const pruneImages = () => {\n    return (dispatch: ThunkDispatch<any, any, AnyAction>) => {\n        console.log(\"pruneImages()\");\n        dispatch(pruneImagesStart());\n\n        const url = `${API_BASE}/images/prune`;\n\n        const headers = {\n            'Content-Type': 'application/json',\n        }\n\n        axios.delete(url, {\n            headers: headers,\n        }).then(response => {\n            dispatch(pruneImagesSuccess(response.data.images));\n        }).catch(err => {\n            dispatch(pruneImagesFail(err.response.data));\n        });\n    };\n};\n\n// Pull Image\nexport const pullImageStart = () => {\n    return {\n        type: PULL_IMAGE_START\n    };\n};\n\nexport const pullImageSuccess = (images: Image) => {\n    return {\n        type: PULL_IMAGE_SUCCESS,\n        images: images\n    };\n};\n\nexport const pullImageFail = (error: string) => {\n    return {\n        type: PULL_IMAGE_FAIL,\n        error: error\n    };\n};\n\nexport const pullImage = (name: string) => {\n    return (dispatch: ThunkDispatch<any, any, AnyAction>) => {\n        console.log(\"pullImage()\");\n        dispatch(pullImageStart());\n\n        const url = `${API_BASE}/images/pull`;\n\n        const headers = {\n            'Content-Type': 'application/json',\n            'Access-Control-Allow-Origin': '*'\n        }\n\n        const data = {\n            name: name\n        }\n\n        axios.post(url, data, {\n            headers: headers,\n        }).then(response => {\n            dispatch(pullImageSuccess(response.data.images));\n        }).catch(err => {\n            dispatch(pullImageFail(err.response.data));\n        });\n    };\n};\n","import axios from 'axios';\nimport { ThunkDispatch } from 'redux-thunk';\nimport { AnyAction } from 'redux';\nimport { Container } from '../../models/Models';\nimport {\n    FETCH_CONTAINERS_START, FETCH_CONTAINERS_SUCCESS, FETCH_CONTAINERS_FAIL,\n    REMOVE_CONTAINERS_START, REMOVE_CONTAINERS_SUCCESS, REMOVE_CONTAINERS_FAIL,\n    STOP_CONTAINERS_START, STOP_CONTAINERS_SUCCESS, STOP_CONTAINERS_FAIL,\n    KILL_CONTAINERS_START, KILL_CONTAINERS_SUCCESS, KILL_CONTAINERS_FAIL,\n    UPDATE_CONTAINER_LOG,\n    CONTAINER_RUN_START, CONTAINER_RUN_SUCCESS, CONTAINER_RUN_FAIL,\n} from './actionTypes';\n\nimport { push } from 'connected-react-router';\n\nimport { API_BASE } from '../../config';\n\n\n// CONTAINERS\n\n// Fetch\nexport const fetchContainersStart = () => {\n    return {\n        type: FETCH_CONTAINERS_START\n    };\n};\n\nexport const fetchContainersSuccess = (containers: Container) => {\n    return {\n        type: FETCH_CONTAINERS_SUCCESS,\n        containers: containers\n    };\n};\n\nexport const fetchContainersFail = (error: string) => {\n    return {\n        type: FETCH_CONTAINERS_FAIL,\n        error: error\n    };\n};\n\nexport const fetchContainers = () => {\n    return (dispatch: ThunkDispatch<any, any, AnyAction>) => {\n        dispatch(fetchContainersStart());\n\n        const url = `${API_BASE}/containers`;\n\n        const headers = {\n            'Content-Type': 'application/json',\n        }\n\n        axios.get(url, { headers: headers })\n            .then(response => {\n                dispatch(fetchContainersSuccess(response.data.containers));\n            })\n            .catch(err => {\n                dispatch(fetchContainersFail(err.response.data));\n            });\n    };\n};\n\n// Remove\nexport const removeContainersStart = () => {\n    return {\n        type: REMOVE_CONTAINERS_START\n    };\n};\n\nexport const removeContainersSuccess = (containers: Container) => {\n    return {\n        type: REMOVE_CONTAINERS_SUCCESS,\n        containers: containers\n    };\n};\n\nexport const removeContainersFail = (error: string) => {\n    return {\n        type: REMOVE_CONTAINERS_FAIL,\n        error: error\n    };\n};\n\nexport const removeContainers = (containerIds: Array<String>) => {\n    return (dispatch: ThunkDispatch<any, any, AnyAction>) => {\n        console.log(\"removeContainers()\");\n        dispatch(removeContainersStart());\n\n        const url = `${API_BASE}/containers`;\n\n        const headers = {\n            'Content-Type': 'application/json',\n            'Access-Control-Allow-Origin': '*'\n        }\n\n        axios.delete(url, {\n            headers: headers,\n            data: {\n                IDs: containerIds\n            }\n        }).then(response => {\n            dispatch(removeContainersSuccess(response.data.containers));\n        }).catch(err => {\n            dispatch(removeContainersFail(err.response.data));\n        });\n    };\n};\n\n// Stop\nexport const stopContainersStart = () => {\n    return {\n        type: STOP_CONTAINERS_START\n    };\n};\n\nexport const stopContainersSuccess = (containers: Container) => {\n    return {\n        type: STOP_CONTAINERS_SUCCESS,\n        containers: containers\n    };\n};\n\nexport const stopContainersFail = (error: string) => {\n    return {\n        type: STOP_CONTAINERS_FAIL,\n        error: error\n    };\n};\n\nexport const stopContainers = (containerIds: Array<String>) => {\n    return (dispatch: ThunkDispatch<any, any, AnyAction>) => {\n        console.log(\"stopContainers()\");\n        dispatch(stopContainersStart());\n\n        const url = `${API_BASE}/containers/stop`;\n        const headers = {\n            'Content-Type': 'application/json',\n            'Access-Control-Allow-Origin': '*'\n        }\n        const data = {\n            IDs: containerIds\n        }\n\n        axios.post(url, data, {\n            headers: headers,\n        }).then(response => {\n            dispatch(stopContainersSuccess(response.data.containers));\n        }).catch(err => {\n            dispatch(stopContainersFail(err.response.data));\n        });\n    };\n};\n\n// Kill\nexport const killContainersStart = () => {\n    return {\n        type: KILL_CONTAINERS_START\n    };\n};\n\nexport const killContainersSuccess = (containers: Container) => {\n    return {\n        type: KILL_CONTAINERS_SUCCESS,\n        containers: containers\n    };\n};\n\nexport const killContainersFail = (error: string) => {\n    return {\n        type: KILL_CONTAINERS_FAIL,\n        error: error\n    };\n};\n\nexport const killContainers = (containerIds: Array<String>) => {\n    return (dispatch: ThunkDispatch<any, any, AnyAction>) => {\n        console.log(\"killContainers()\");\n        dispatch(killContainersStart());\n\n        const url = `${API_BASE}/containers/kill`;\n        const headers = {\n            'Content-Type': 'application/json',\n            'Access-Control-Allow-Origin': '*'\n        }\n        const data = {\n            IDs: containerIds\n        }\n\n        axios.post(url, data, {\n            headers: headers,\n        }).then(response => {\n            dispatch(killContainersSuccess(response.data.containers));\n        }).catch(err => {\n            dispatch(killContainersFail(err.response.data));\n        });\n    };\n};\n\n// Update Container Log\nexport const updateContainerLogs = (containerLogs) => {\n    return {\n        type: UPDATE_CONTAINER_LOG,\n        containerLogs: containerLogs\n    }\n}\n\n// Container Run\nexport const containerRunStart = () => {\n    return {\n        type: CONTAINER_RUN_START\n    };\n};\n\nexport const containerRunSuccess = (containers: Container) => {\n    return {\n        type: CONTAINER_RUN_SUCCESS,\n        containers: containers\n    };\n};\n\nexport const containerRunFail = (error: string) => {\n    return {\n        type: CONTAINER_RUN_FAIL,\n        error: error\n    };\n};\n\nexport const containerRun = (command: String) => {\n    return (dispatch: ThunkDispatch<any, any, AnyAction>) => {\n        dispatch(containerRunStart());\n\n        const url = `${API_BASE}/container-run`;\n        const headers = {\n            'Content-Type': 'application/json',\n            'Access-Control-Allow-Origin': '*'\n        }\n        const data = {\n            command: command\n        }\n\n        axios.post(url, data, {\n            headers: headers,\n        }).then(response => {\n            // -dt -p 8080:8080 --rm docker.io/library/alpine /bin/sh\n            const parts = command.split(\" \");\n\n            parts.forEach(part => {\n                response.data.containers.forEach(container => {\n                    const image = container.image.split(\":\")[0];\n                    // console.log(`part: ${part} | image: ${image} | ID: ${container.containerId} | imageRaw: ${container.image}`);\n\n                    if (part === container.containerId || part === container.image || part === image) {\n                        dispatch(push(`/container_logs/${container.containerId}`));\n                    }\n                });\n            });\n            dispatch(containerRunSuccess(response.data.containers));\n        }).catch(err => {\n            dispatch(containerRunFail(err.response.data));\n        });\n    };\n};\n","import axios from 'axios';\nimport { ThunkDispatch } from 'redux-thunk';\nimport { AnyAction } from 'redux';\nimport { Volume } from '../../models/Models';\nimport {\n    FETCH_VOLUMES_START, FETCH_VOLUMES_SUCCESS, FETCH_VOLUMES_FAIL,\n    CREATE_VOLUME_START, CREATE_VOLUME_SUCCESS, CREATE_VOLUME_FAIL,\n    REMOVE_VOLUMES_START, REMOVE_VOLUMES_SUCCESS, REMOVE_VOLUMES_FAIL,\n} from './actionTypes';\n\nimport { API_BASE } from '../../config';\n\n\n// VOLUMES\n\n// Fetch\nexport const fetchVolumesStart = () => {\n    return {\n        type: FETCH_VOLUMES_START\n    };\n};\n\nexport const fetchVolumesSuccess = (volumes: Volume) => {\n    return {\n        type: FETCH_VOLUMES_SUCCESS,\n        volumes: volumes\n    };\n};\n\nexport const fetchVolumesFail = (error: string) => {\n    return {\n        type: FETCH_VOLUMES_FAIL,\n        error: error\n    };\n};\n\nexport const fetchVolumes = () => {\n    return (dispatch: ThunkDispatch<any, any, AnyAction>) => {\n        dispatch(fetchVolumesStart());\n\n        const url = `${API_BASE}/volumes`;\n\n        const headers = {\n            'Content-Type': 'application/json',\n        }\n\n        axios.get(url, { headers: headers })\n            .then(response => {\n                dispatch(fetchVolumesSuccess(response.data.volumes));\n            })\n            .catch(err => {\n                dispatch(fetchVolumesFail(err.response.data));\n            });\n    };\n};\n\n// Create\nexport const createVolumeStart = () => {\n    return {\n        type: CREATE_VOLUME_START\n    };\n};\n\nexport const createVolumeSuccess = (volumes: Volume) => {\n    return {\n        type: CREATE_VOLUME_SUCCESS,\n        volumes: volumes\n    };\n};\n\nexport const createVolumeFail = (error: string) => {\n    return {\n        type: CREATE_VOLUME_FAIL,\n        error: error\n    };\n};\n\nexport const createVolume = (name: string) => {\n    return (dispatch: ThunkDispatch<any, any, AnyAction>) => {\n        console.log(\"createVolume()\");\n        dispatch(createVolumeStart());\n\n        const url = `${API_BASE}/volumes/create`;\n\n        const headers = {\n            'Content-Type': 'application/json',\n            'Access-Control-Allow-Origin': '*'\n        }\n\n        const data = {\n            name: name\n        }\n\n        axios.post(url, data, {\n            headers: headers,\n        }).then(response => {\n            dispatch(createVolumeSuccess(response.data.volumes));\n        }).catch(err => {\n            dispatch(createVolumeFail(err.response.data));\n        });\n    };\n};\n\n// Remove\nexport const removeVolumesStart = () => {\n    return {\n        type: REMOVE_VOLUMES_START\n    };\n};\n\nexport const removeVolumesSuccess = (volumes: Volume) => {\n    return {\n        type: REMOVE_VOLUMES_SUCCESS,\n        volumes: volumes\n    };\n};\n\nexport const removeVolumesFail = (error: string) => {\n    return {\n        type: REMOVE_VOLUMES_FAIL,\n        error: error\n    };\n};\n\nexport const removeVolumes = (names: string[]) => {\n    return (dispatch: ThunkDispatch<any, any, AnyAction>) => {\n        console.log(\"removeVolumes(), names:\");\n        console.log(names);\n        dispatch(removeVolumesStart());\n\n        const url = `${API_BASE}/volumes`;\n\n        const headers = {\n            'Content-Type': 'application/json',\n            'Access-Control-Allow-Origin': '*'\n        }\n\n        const data = {\n            names: names\n        }\n\n        axios.delete(url, {\n            headers: headers,\n            data,\n        }).then(response => {\n            dispatch(removeVolumesSuccess(response.data.volumes));\n        }).catch(err => {\n            dispatch(removeVolumesFail(err.response.data));\n        });\n    };\n};\n","export {\n    fetchImages,\n    removeImages,\n    pruneImages,\n    pullImage,\n} from './images';\n\nexport {\n    fetchContainers,\n    removeContainers,\n    updateContainerLogs,\n    containerRun,\n    stopContainers,\n    killContainers,\n} from './containers';\n\nexport {\n    fetchVolumes,\n    createVolume,\n    removeVolumes,\n} from './volumes';\n","import React, { createContext } from 'react';\nimport io from 'socket.io-client';\nimport { WS_BASE } from './config';\nimport { useDispatch } from 'react-redux';\nimport * as actions from './store/actions/index';\n\n\nconst WebSocketContext = createContext(null)\n\nexport { WebSocketContext }\n\nexport default ({ children }) => {\n    let socket;\n    let ws;\n\n    const dispatch = useDispatch();\n\n    const updateLogs = (id) => {\n        console.log(\"Websocket.tsx updateLogs() => socket.emit event://update-logs\");\n        const payload = {\n            id: id\n        }\n        socket.emit(\"event://update-logs\", payload);\n    }\n\n    if (!socket) {\n        socket = io.connect(WS_BASE)\n\n        socket.on(\"event://get-logs\", (msg) => {\n            console.log(\"Websocket.tsx socket.on event://get-logs\");\n            console.log(\"response:\");\n            console.log(msg);\n            const containerLogs = msg;\n            dispatch(actions.updateContainerLogs(containerLogs));\n        })\n\n        ws = {\n            socket: socket,\n            updateLogs\n        }\n    }\n\n    return (\n        <WebSocketContext.Provider value={ws}>\n            {children}\n        </WebSocketContext.Provider>\n    )\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"List\":\"NavigationItems_List__wwn3x\",\"Item\":\"NavigationItems_Item__35FCo\",\"Link\":\"NavigationItems_Link__25qn-\",\"Name\":\"NavigationItems_Name__2wsmg\",\"active\":\"NavigationItems_active__3L5BX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Layout\":\"Layout_Layout__wFgtg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"DrawerToggle\":\"DrawerToggle_DrawerToggle__1uIuJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Backdrop\":\"Backdrop_Backdrop__3C8m1\"};"],"sourceRoot":""}