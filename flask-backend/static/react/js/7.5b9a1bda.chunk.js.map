{"version":3,"sources":["components/UI/LoadingIndicator/LoadingIndicator.tsx","components/UI/LoadingIndicator/LoadingIndicator.module.css","helpers/helpers.tsx","pages/Volumes/Volumes.module.css","components/MaterialCustomized/MenuVolumes.tsx","pages/Volumes/Volumes.tsx"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_LoadingIndicator_module_css__WEBPACK_IMPORTED_MODULE_1__","_LoadingIndicator_module_css__WEBPACK_IMPORTED_MODULE_1___default","LoadingIndicator","a","createElement","className","css","Loading_Indicator","module","exports","isAllTrue","obj","_i","_Object$entries","Object","entries","length","_ref3","_ref2","_home_thesis_combined_thesis_app_react_flask_pod_ui_app_react_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__","handleSelectAll","selectedItems","console","log","allTrue","concat","updated","_home_thesis_combined_thesis_app_react_flask_pod_ui_app_react_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","_i2","_Object$entries2","_ref6","_ref5","key","toggleSelectAll","isSelectedAny","_i3","_Object$entries3","_ref9","_ref8","extractIds","items","imageIds","_i5","_Object$entries5","_ref15","_ref14","push","extractSelected","_i6","_Object$entries6","_ref18","_ref17","Volumes","Wrapper","Info","Content","Buttons","Heading","Name","Driver","Mountpoint","Button","Headline","DetailTitle","MenuVolumes","props","volumeName","volumeOperation","_useState","useState","_useState2","slicedToArray","anchorEl","setAnchorEl","name","handleClose","react_default","variant","color","aria-controls","aria-haspopup","onClick","event","currentTarget","Menu","id","keepMounted","open","Boolean","onClose","MenuItem","connect","state","volumes","dispatch","fetchVolumes","actions","createVolume","removeVolumes","selectedVolumes","_useViewport","useViewport","width","phone","tabletPortrait","tabletLandscape","desktop","defaultSelectedVolumes","objectSpread","setSelectedVolumes","_useState3","_useState4","openCreateVolumeModal","setOpenCreateVolumeModal","_useState5","_useState6","createVolumeName","setCreateVolumeName","useEffect","handleCheckboxChange","changeEvent","target","old","handleVolumeOperation","mode","volumesNames","toLowerCase","isSelected","volumesTitleClasses","content","loading","Grid","container","direction","map","volume","i","Fragment","Accordion","AccordionSummary","expandIcon","ExpandMore_default","aria-label","FormControlLabel","stopPropagation","onFocus","control","Checkbox","checked","label","item","Tooltip","title","MaterialCustomized_MenuVolumes","AccordionDetails","disabled","startIcon","Delete_default","Dialog","aria-labelledby","DialogTitle","DialogContent","DialogContentText","TextField","autoFocus","margin","type","fullWidth","onChange","e","value","DialogActions","join"],"mappings":"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","file":"js/7.5b9a1bda.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport css from './LoadingIndicator.module.css';\r\n\r\nconst LoadingIndicator = () => (\r\n    <div className={css.Loading_Indicator}>\r\n        <div />\r\n        <div />\r\n        <div />\r\n        <div />\r\n    </div>\r\n);\r\n\r\nexport default LoadingIndicator;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Loading_Indicator\":\"LoadingIndicator_Loading_Indicator__1KMH5\"};","// Sets all properties of an object to FALSE\nexport const isAllTrue = (obj: Object) => {\n    for (const [key, value] of Object.entries(obj)) {\n        if (value === false) {\n            return false;\n        }\n    }\n    return true;\n};\n\nexport const toggleSelectAll = (obj: Object, allTrue: Boolean) => {\n    for (const [key, value] of Object.entries(obj)) {\n        if (allTrue) {\n            obj[key] = false\n        } else {\n            obj[key] = true\n        }\n    }\n};\n\nexport const handleSelectAll = (selectedItems: Object) => {\n    console.log(\"handleSelectAll(), selectedItems:\");\n    console.log(selectedItems);\n    const allTrue = isAllTrue(selectedItems);\n    console.log(`allTrue: ${allTrue}`);\n    const updated = { ...selectedItems };\n    toggleSelectAll(updated, allTrue);\n    console.log(\"updated:\");\n    console.log(updated);\n\n    return updated\n};\n\nexport const isSelectedAny = (selectedItems: Object) => {\n    console.log(\"isSelectedAny()\");\n    for (const [key, value] of Object.entries(selectedItems)) {\n        if (value === true) {\n            return true\n        }\n    }\n\n    return false;\n};\n\nexport const isSelectedOne = (selectedItems: Object) => {\n    let count = 0;\n\n    for (const [key, value] of Object.entries(selectedItems)) {\n        if (value === true) {\n            count++;\n        }\n    }\n\n    return count === 1;\n};\n\nexport const extractIds = (items: Object) => {\n    const imageIds = [];\n    for (const [key, value] of Object.entries(items)) {\n        if (value === true) {\n            imageIds.push(key);\n        }\n    }\n    return imageIds;\n};\n\nexport const extractSelected = (items) => {\n    const selectedItems = [];\n    for (const [key, value] of Object.entries(items)) {\n        if (value === true) {\n            selectedItems.push(key);\n        }\n    }\n    return selectedItems;\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Volumes\":\"Volumes_Volumes__2IIXL\",\"Wrapper\":\"Volumes_Wrapper__1cJTx\",\"Info\":\"Volumes_Info__1bpRA\",\"Content\":\"Volumes_Content__2BjWl\",\"Buttons\":\"Volumes_Buttons__lVUIg\",\"Heading\":\"Volumes_Heading__15rOP\",\"Name\":\"Volumes_Name__db3ND\",\"Driver\":\"Volumes_Driver__66Hp5\",\"Mountpoint\":\"Volumes_Mountpoint__1-Ckb\",\"Button\":\"Volumes_Button__30XFq\",\"Headline\":\"Volumes_Headline__lZ5JI\",\"DetailTitle\":\"Volumes_DetailTitle__1-K0i\"};","import React, { useState } from 'react';\n\nimport Button from '@material-ui/core/Button';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\n\n\nconst MenuVolumes = props => {\n    const { volumeName, volumeOperation } = props\n    const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n    const name = {};\n    name[volumeName] = true;\n\n    const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleClose = () => {\n        setAnchorEl(null);\n    };\n\n    return (\n        <div>\n            <Button variant=\"outlined\" color=\"secondary\" aria-controls=\"simple-menu\" aria-haspopup=\"true\" onClick={handleClick}>\n                Actions\n            </Button>\n            <Menu\n                id=\"simple-menu\"\n                anchorEl={anchorEl}\n                keepMounted\n                open={Boolean(anchorEl)}\n                onClose={handleClose}\n            >\n                <MenuItem onClick={() => volumeOperation(name, \"remove\")}>Remove</MenuItem>\n                <MenuItem onClick={handleClose}>Close</MenuItem>\n            </Menu>\n        </div>\n    )\n}\n\nexport default MenuVolumes;\n","import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { ThunkDispatch } from 'redux-thunk';\nimport { AnyAction } from 'redux';\nimport * as actions from '../../store/actions/index';\nimport { AppState } from '../../store';\n\nimport css from './Volumes.module.css';\nimport LoadingIndicator from '../../components/UI/LoadingIndicator/LoadingIndicator';\nimport { Volume } from '../../models/Models';\n\nimport { isAllTrue, handleSelectAll, extractIds, isSelectedAny } from '../../helpers/helpers';\n\nimport Grid from '@material-ui/core/Grid';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Button from '@material-ui/core/Button';\nimport DeleteIcon from '@material-ui/icons/Delete';\n// import { makeStyles } from '@material-ui/core/styles';\nimport { Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, TextField, Typography } from '@material-ui/core';\n\nimport Accordion from '@material-ui/core/Accordion';\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\n\nimport MenuVolumes from '../../components/MaterialCustomized/MenuVolumes';\nimport Tooltip from '@material-ui/core/Tooltip';\n\nimport { useViewport } from '../../Viewport';\n\n\ninterface IVolumesProps {\n    volumes: Volume[],\n    loading: boolean,\n    fetchVolumes: Function,\n    createVolume: Function,\n    removeVolumes: Function,\n\n    volumesDataTest: Volume[]\n}\n\nconst Volumes = (props: IVolumesProps) => {\n    const { fetchVolumes, createVolume, removeVolumes, volumes } = props;\n    const { width, phone, tabletPortrait, tabletLandscape, desktop } = useViewport();\n    console.log(`width=${width}, phone=${phone}, tabletPortrait=${tabletPortrait}, tabletLandscape=${tabletLandscape}, desktop=${desktop}`);\n\n    const defaultSelectedVolumes = {};\n\n    for (const [key, value] of Object.entries(volumes)) {\n        defaultSelectedVolumes[value.Name] = false\n    }\n\n    const [selectedVolumes, setSelectedVolumes] = useState<any>({ ...defaultSelectedVolumes });\n    const [openCreateVolumeModal, setOpenCreateVolumeModal] = useState(false);\n    const [createVolumeName, setCreateVolumeName] = useState(\"\");\n\n    const allTrue = isAllTrue(selectedVolumes);\n\n    useEffect(() => {\n        fetchVolumes();\n    }, [fetchVolumes]);\n\n    const handleCheckboxChange = changeEvent => {\n        const { id } = changeEvent.target;\n        const old = { ...selectedVolumes };\n\n        for (const [key, value] of Object.entries(old)) {\n            if (id === key) {\n                old[key] = !old[key];\n            }\n        }\n\n        setSelectedVolumes(old);\n    };\n\n    const handleCreateVolumeOpen = () => {\n        setOpenCreateVolumeModal(true);\n    };\n\n    const handleCreateVolumeClose = () => {\n        setOpenCreateVolumeModal(false);\n    };\n\n    const onChangeCreateVolume = (e) => {\n        setCreateVolumeName(e.target.value);\n    };\n\n    const handleVolumeCreate = () => {\n        setOpenCreateVolumeModal(false);\n        if (createVolumeName.length == 0) {\n            console.log(\"empty volume create name\");\n            return;\n        }\n        createVolume(createVolumeName);\n        setCreateVolumeName('');\n    };\n\n    const handleVolumeOperation = (selectedVolumes, mode: string) => {\n        console.log(`triggered handleVolumeOperation(), mode: ${mode}`);\n        const volumesNames = extractIds(selectedVolumes);\n\n        switch (mode.toLowerCase()) {\n            case \"remove\":\n                removeVolumes(volumesNames);\n                break;\n            default: console.log(\"Unknown operation!\");\n        }\n\n        const updated = { ...selectedVolumes };\n\n        for (const [key, value] of Object.entries(updated)) {\n            if (value === true) {\n                updated[key] = false\n            }\n        }\n        setSelectedVolumes(updated);\n    };\n\n    const selectAll = () => {\n        const updated = handleSelectAll(selectedVolumes);\n        setSelectedVolumes(updated);\n    };\n\n    const isSelected = isSelectedAny(selectedVolumes);\n\n    const volumesTitleClasses = [css.Content, css.Heading];\n\n    let content = <div className={css.Wrapper}><LoadingIndicator /></div>\n\n    if (!props.loading) {\n        content = <Grid container direction=\"column\">\n            {(volumes && volumes.length) ?\n                (volumes.map((volume, i) => {\n                    return <React.Fragment key={volume.Name}>\n\n                        <Accordion>\n\n                            <AccordionSummary\n                                expandIcon={<ExpandMoreIcon />}\n                                aria-label=\"Expand\"\n                                aria-controls=\"additional-actions1-content\"\n                                id=\"additional-actions1-header\"\n                            >\n                                <FormControlLabel\n                                    aria-label=\"Acknowledge\"\n                                    onClick={(event) => event.stopPropagation()}\n                                    onFocus={(event) => event.stopPropagation()}\n                                    control={<Checkbox\n                                        color=\"primary\"\n                                        onClick={handleCheckboxChange}\n                                        id={volume.Name}\n                                        checked={selectedVolumes[volume.Name]} />}\n                                    // label=\"Select\"\n                                    label=\"\"\n                                />\n                                <Grid item container className={css.Content}>\n                                    <Tooltip title={volume.Name}>\n                                        <Grid className={css.Name}>{volume.Name}</Grid>\n                                    </Tooltip>\n                                    {(desktop || tabletLandscape) &&\n                                        <Tooltip title={volume.Driver}>\n                                            <Grid className={css.Driver}>{volume.Driver}</Grid>\n                                        </Tooltip>\n                                    }\n                                    {desktop &&\n                                        <Tooltip title={volume.Mountpoint}>\n                                            <Grid className={css.Mountpoint}>{volume.Mountpoint}</Grid>\n                                        </Tooltip>\n                                    }\n\n                                    <FormControlLabel\n                                        aria-label=\"Acknowledge\"\n                                        onClick={(event) => event.stopPropagation()}\n                                        onFocus={(event) => event.stopPropagation()}\n                                        control={<MenuVolumes\n                                            volumeName={volume.Name}\n                                            volumeOperation={handleVolumeOperation}\n                                        />}\n                                        // label=\"Select\"\n                                        label=\"\"\n                                    />\n                                </Grid>\n                            </AccordionSummary>\n\n                            <AccordionDetails>\n                                <Grid container direction=\"column\">\n                                    <Grid container direction=\"row\">\n                                        <Grid item className={css.DetailTitle}>Mountpoint:</Grid>\n                                        <Grid item className={css.Mountpoint}>{volume.Mountpoint}</Grid>\n                                    </Grid>\n                                    <Grid container direction=\"row\">\n                                        <Grid item className={css.DetailTitle}>Driver:</Grid>\n                                        <Grid item className={css.Driver}>{volume.Driver}</Grid>\n                                    </Grid>\n                                </Grid>\n                            </AccordionDetails>\n\n                        </Accordion>\n\n                    </React.Fragment>\n                    // <Grid item container className={css.Content} key={volume.Name}>\n                    // </Grid>\n                }))\n                :\n                ''\n            }\n        </Grid>\n    }\n\n    return (\n        <div className={css.Volumes}>\n            <div className={css.Wrapper}>\n                <h1 className={css.Headline}>Podman Volumes</h1>\n                <p>Showing information about Volumes based on the `podman volume inspect` command</p>\n                <Grid container className={css.Buttons}>\n                    <Grid item className={css.Button}>\n                        <Button\n                            disabled={!isSelected}\n                            color=\"secondary\"\n                            variant=\"outlined\"\n                            startIcon={<DeleteIcon />}\n                            onClick={() => handleVolumeOperation(selectedVolumes, \"remove\")}>\n                            Remove Selected\n                        </Button>\n                    </Grid>\n\n                    <Grid item className={css.Button}>\n                        <Button variant=\"outlined\" color=\"primary\" onClick={handleCreateVolumeOpen}>\n                            Create\n                        </Button>\n                        <Dialog open={openCreateVolumeModal} onClose={handleCreateVolumeClose} aria-labelledby=\"form-dialog-title\">\n                            <DialogTitle id=\"form-dialog-title\">Create</DialogTitle>\n                            <DialogContent>\n                                <DialogContentText>\n                                    Enter the name of volume you want to create\"\n                            </DialogContentText>\n                                <TextField\n                                    autoFocus\n                                    margin=\"dense\"\n                                    id=\"name\"\n                                    label=\"Volume Create\"\n                                    type=\"text\"\n                                    fullWidth\n                                    onChange={onChangeCreateVolume}\n                                />\n                            </DialogContent>\n                            <DialogActions>\n                                <Button onClick={handleVolumeCreate} color=\"primary\">\n                                    Create\n                            </Button>\n                            </DialogActions>\n                        </Dialog>\n                    </Grid>\n\n                </Grid>\n\n\n                <div className={css.Info}>\n                    <div className={volumesTitleClasses.join(' ')}>\n                        <Checkbox color=\"primary\" onClick={selectAll} checked={allTrue} />\n                        <div className={css.Name}>Name</div>\n                        {(desktop || tabletLandscape) &&\n                            <div className={css.Driver}>Driver</div>\n                        }\n                        {desktop &&\n                            <div className={css.Mountpoint}>Mountpoint</div>\n                        }\n                    </div>\n                    {content}\n                </div>\n            </div>\n        </div>\n    );\n};\n\nconst mapStateToProps = (state: AppState) => {\n    return {\n        volumes: state.volumes.volumes,\n    };\n};\n\nconst mapDispatchToProps = (dispatch: ThunkDispatch<any, any, AnyAction>) => {\n    return {\n        fetchVolumes: () =>\n            dispatch(actions.fetchVolumes()),\n        createVolume: (name) =>\n            dispatch(actions.createVolume(name)),\n        removeVolumes: (selectedVolumes: string[]) =>\n            dispatch(actions.removeVolumes(selectedVolumes)),\n    };\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Volumes);\n"],"sourceRoot":""}