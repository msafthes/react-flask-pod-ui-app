{"version":3,"sources":["WebSocket.tsx","components/Layout/Layout.module.css","components/UI/LoadingIndicator/LoadingIndicator.module.css","components/Navigation/SideDrawer/DrawerToggle/DrawerToggle.module.css","config.tsx","components/UI/Backdrop/Backdrop.module.css","components/Navigation/NavigationItems/NavigationItems.module.css","store/actions/actionTypes.tsx","store/index.tsx","store/reducers/images.tsx","store/reducers/containers.tsx","store/reducers/volumes.tsx","store/reducers/connections.tsx","testData/testData.tsx","components/MaterialCustomized/MenuConnections.tsx","components/Navigation/NavigationItems/NavigationItems.tsx","components/Navigation/SideDrawer/DrawerToggle/DrawerToggle.tsx","components/Navigation/Toolbar/Toolbar.tsx","components/UI/Backdrop/Backdrop.tsx","components/Navigation/SideDrawer/SideDrawer.tsx","components/Layout/Layout.tsx","pages/Intro/Intro.tsx","App.tsx","serviceWorker.ts","index.tsx","store/actions/images.tsx","store/actions/containers.tsx","store/actions/volumes.tsx","store/actions/connections.tsx","store/actions/index.tsx","components/MaterialCustomized/MenuStyles.module.css","components/Navigation/SideDrawer/SideDrawer.module.css","components/Navigation/Toolbar/Toolbar.module.css","pages/Intro/Intro.module.css","components/UI/LoadingIndicator/LoadingIndicator.tsx","Viewport.tsx"],"names":["__webpack_require__","d","__webpack_exports__","WebSocketContext","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","socket_io_client__WEBPACK_IMPORTED_MODULE_1__","socket_io_client__WEBPACK_IMPORTED_MODULE_1___default","_config__WEBPACK_IMPORTED_MODULE_2__","react_redux__WEBPACK_IMPORTED_MODULE_3__","_store_actions_index__WEBPACK_IMPORTED_MODULE_4__","createContext","_ref","socket","ws","children","dispatch","useDispatch","io","connect","WS_BASE","on","msg","containerLogs","actions","updateLogs","id","username","payload","emit","a","createElement","Provider","value","module","exports","Layout","Loading_Indicator","DrawerToggle","API_BASE","Backdrop","List","Item","Link","Name","active","FETCH_IMAGES_START","FETCH_IMAGES_SUCCESS","FETCH_IMAGES_FAIL","REMOVE_IMAGES_START","REMOVE_IMAGES_SUCCESS","REMOVE_IMAGES_FAIL","PRUNE_IMAGES_START","PRUNE_IMAGES_SUCCESS","PRUNE_IMAGES_FAIL","PULL_IMAGE_START","PULL_IMAGE_SUCCESS","PULL_IMAGE_FAIL","FETCH_CONTAINERS_START","FETCH_CONTAINERS_SUCCESS","FETCH_CONTAINERS_FAIL","REMOVE_CONTAINERS_START","REMOVE_CONTAINERS_SUCCESS","REMOVE_CONTAINERS_FAIL","UPDATE_CONTAINER_LOG","CONTAINER_RUN_START","CONTAINER_RUN_SUCCESS","CONTAINER_RUN_FAIL","STOP_CONTAINERS_START","STOP_CONTAINERS_SUCCESS","STOP_CONTAINERS_FAIL","KILL_CONTAINERS_START","KILL_CONTAINERS_SUCCESS","KILL_CONTAINERS_FAIL","FETCH_VOLUMES_START","FETCH_VOLUMES_SUCCESS","FETCH_VOLUMES_FAIL","CREATE_VOLUME_START","CREATE_VOLUME_SUCCESS","CREATE_VOLUME_FAIL","REMOVE_VOLUMES_START","REMOVE_VOLUMES_SUCCESS","REMOVE_VOLUMES_FAIL","FETCH_KEY_START","FETCH_KEY_SUCCESS","FETCH_KEY_FAIL","ADD_CONNECTION_START","ADD_CONNECTION_SUCCESS","ADD_CONNECTION_FAIL","REMOVE_CONNECTION_START","REMOVE_CONNECTION_SUCCESS","REMOVE_CONNECTION_FAIL","ACTIVATE_CONNECTION_START","ACTIVATE_CONNECTION_SUCCESS","ACTIVATE_CONNECTION_FAIL","history","initialState","images","error","loading","reducer","state","arguments","length","undefined","action","type","Object","objectSpread","fetchImagesStart","fetchImagesSuccess","fetchImagesFail","removeImagesStart","removeImagesSuccess","removeImagesFail","pullImageStart","pullImageSuccess","pullImageFail","pruneImagesStart","pruneImagesSuccess","pruneImagesFail","containers","fetchContainersStart","fetchContainersSuccess","fetchContainersFail","removeContainersStart","removeContainersSuccess","removeContainersFail","stopContainersStart","stopContainersSuccess","stopContainersFail","killContainersStart","killContainersSuccess","killContainersFail","updateContainerLogs","containerRunStart","containerRunSuccess","containerRunFail","volumes","fetchVolumesStart","fetchVolumesSuccess","fetchVolumesFail","createVolumeStart","createVolumeSuccess","createVolumeFail","removeVolumesStart","removeVolumesSuccess","removeVolumesFail","connections","ip","podmanSocketPath","activeConnection","sshKey","fetchKeyStart","fetchKeySuccess","fetchKeyFail","addConnectionStart","concat","toConsumableArray","connection","addConnectionSuccess","addConnectionFail","removeConnectionStart","filter","removeConnectionSuccess","removeConnectionFail","activateConnectionStart","activateConnectionSuccess","activateConnectionFail","composeEnhancers","compose","persistConfig","key","storage","createBrowserHistory","persistedReducer","persistReducer","combineReducers","imagesReducer","containersReducer","volumesReducer","connectionsReducer","router","connectRouter","imagesDataTest","created","repository","size","tag","containersDataTest","containerId","image","command","ports","names","volumesDataTest","Anonymous","CreatedAt","Driver","GID","Labels","Mountpoint","Options","Scope","UID","errorConnections","fetchKey","addConnection","removeConnection","activateConnection","props","_useState","useState","_useState2","slicedToArray","anchorEl","setAnchorEl","_useState3","_useState4","showError","setShowError","_useState5","_useState6","showBackendError","setShowBackendError","_useState7","_useState8","errorInfo","setErrorInfo","_useState9","_useState10","openConnectionModal","setOpenConnectionModal","_useState11","_useState12","newConnection","setNewConnection","useEffect","handleClose","connectionItems","react_default","Grid","container","direction","map","i","Fragment","MenuItem","onClick","selected","Delete_default","color","className","css","RemoveConnection","Button","variant","aria-controls","aria-haspopup","ButtonConnections","startIcon","CastConnected_default","event","currentTarget","Alert","severity","onClose","AlertTitle","Error","Menu","keepMounted","open","Boolean","AddCircle_default","ConnectionAdd","Dialog","aria-labelledby","DialogTitle","DialogContent","Key","copy","LoadingIndicator","TextField","autoFocus","margin","label","fullWidth","onChange","e","target","DialogActions","some","NavigationItems","isDesktop","react_router_dom","to","activeClassName","exact","MaterialCustomized_MenuConnections","drawerToggle","clicked","toolbar","Toolbar","drawerToggleClicked","Navigation_NavigationItems_NavigationItems","backdrop","show","sideDrawer","attachedClasses","SideDrawer","Close","Open","closed","join","showSideDrawer","setShowSideDrawer","Intro","Content","Images","React","lazy","Promise","all","then","bind","Containers","ContainerLogs","Volumes","withRouter","isAuthenticated","window","innerWidth","setIsDesktop","handleWindowResize","addEventListener","throttle","removeEventListener","routes","react_router","path","component","render","components_Layout_Layout","react","fallback","location","hostname","match","store","createStore","applyMiddleware","routerMiddleware","thunk","persistor","persistStore","app","es","integration_react","WebSocket","Viewport","esm","src_App_0","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message","fetchImages","asyncToGenerator","regenerator_default","mark","_callee","getState","activeUsername","url","headers","response","wrap","_context","prev","next","Content-Type","Active-Username","axios","get","sent","data","t0","stop","_x","_x2","apply","this","removeImages","imageIds","_ref2","_callee2","_context2","delete","IDs","_x3","_x4","pruneImages","_ref3","_callee3","_context3","reponse","_x5","_x6","pullImage","name","_ref4","_callee4","_context4","Access-Control-Allow-Origin","post","_x7","_x8","fetchContainers","removeContainers","containerIds","stopContainers","killContainers","containerRun","_ref5","_callee5","_context5","split","forEach","part","push","_x9","_x10","fetchVolumes","createVolume","removeVolumes","images_fetchImages","images_removeImages","images_pruneImages","images_pullImage","containers_fetchContainers","containers_removeContainers","containers_updateContainerLogs","containers_containerRun","containers_stopContainers","containers_killContainers","volumes_fetchVolumes","volumes_createVolume","volumes_removeVolumes","connections_fetchKey","connections_addConnection","connections_removeConnection","connections_activateConnection","Logo","DesktopOnly","_LoadingIndicator_module_css__WEBPACK_IMPORTED_MODULE_1__","_LoadingIndicator_module_css__WEBPACK_IMPORTED_MODULE_1___default","ViewportContext","ViewportProvider","isPhone","isTabletPortrait","isTabletLandscape","_home_msafpc_react_flask_pod_ui_app_react_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","width","setWidth","innerHeight","height","setHeight","phone","setPhone","tabletPortrait","setTabletPortrait","tabletLandscape","setTabletLandscape","desktop","setDesktop","react__WEBPACK_IMPORTED_MODULE_1___default","useViewport","_useContext","useContext"],"mappings":"0FAAAA,EAAAC,EAAAC,EAAA,sBAAAC,IAAA,IAAAC,EAAAJ,EAAA,GAAAK,EAAAL,EAAAM,EAAAF,GAAAG,EAAAP,EAAA,KAAAQ,EAAAR,EAAAM,EAAAC,GAAAE,EAAAT,EAAA,IAAAU,EAAAV,EAAA,IAAAW,EAAAX,EAAA,IAOMG,EAAmBS,wBAAc,MAIxBV,EAAA,WAAAW,GAAkB,IACzBC,EACAC,EAFUC,EAAeH,EAAfG,SAIRC,EAAWC,cAwBjB,OAdKJ,KACDA,EAASK,IAAGC,QAAQC,MAEbC,GAAG,mBAAoB,SAACC,GAC3B,IAAMC,EAAgBD,EACtBN,EAASQ,IAA4BD,MAGzCT,EAAK,CACDD,OAAQA,EACRY,WAlBW,SAACC,EAAIC,GACpB,IAAMC,EAAU,CACZF,GAAIA,EACJC,SAAUA,GAEdd,EAAOgB,KAAK,sBAAuBD,MAkBnCxB,EAAA0B,EAAAC,cAAC7B,EAAiB8B,SAAlB,CAA2BC,MAAOnB,GAC7BC,yBCxCbmB,EAAAC,QAAA,CAAkBC,OAAA,6CCAlBF,EAAAC,QAAA,CAAkBE,kBAAA,kECAlBH,EAAAC,QAAA,CAAkBG,aAAA,qECDlBvC,EAAAC,EAAAC,EAAA,sBAAAsC,IAAAxC,EAAAC,EAAAC,EAAA,sBAAAmB,IAKO,IAAMmB,EAAW,gCACXnB,EAAU,iDCLvBc,EAAAC,QAAA,CAAkBK,SAAA,kICAlBN,EAAAC,QAAA,CAAkBM,KAAA,8BAAAC,KAAA,8BAAAC,KAAA,8BAAAC,KAAA,8BAAAC,OAAA,iECClB9C,EAAAC,EAAAC,EAAA,sBAAA6C,IAAA/C,EAAAC,EAAAC,EAAA,sBAAA8C,IAAAhD,EAAAC,EAAAC,EAAA,sBAAA+C,IAAAjD,EAAAC,EAAAC,EAAA,sBAAAgD,IAAAlD,EAAAC,EAAAC,EAAA,sBAAAiD,IAAAnD,EAAAC,EAAAC,EAAA,sBAAAkD,IAAApD,EAAAC,EAAAC,EAAA,sBAAAmD,IAAArD,EAAAC,EAAAC,EAAA,sBAAAoD,IAAAtD,EAAAC,EAAAC,EAAA,sBAAAqD,IAAAvD,EAAAC,EAAAC,EAAA,sBAAAsD,IAAAxD,EAAAC,EAAAC,EAAA,sBAAAuD,IAAAzD,EAAAC,EAAAC,EAAA,sBAAAwD,IAAA1D,EAAAC,EAAAC,EAAA,sBAAAyD,IAAA3D,EAAAC,EAAAC,EAAA,sBAAA0D,IAAA5D,EAAAC,EAAAC,EAAA,sBAAA2D,IAAA7D,EAAAC,EAAAC,EAAA,sBAAA4D,IAAA9D,EAAAC,EAAAC,EAAA,sBAAA6D,IAAA/D,EAAAC,EAAAC,EAAA,sBAAA8D,IAAAhE,EAAAC,EAAAC,EAAA,sBAAA+D,IAAAjE,EAAAC,EAAAC,EAAA,sBAAAgE,IAAAlE,EAAAC,EAAAC,EAAA,sBAAAiE,IAAAnE,EAAAC,EAAAC,EAAA,sBAAAkE,IAAApE,EAAAC,EAAAC,EAAA,sBAAAmE,IAAArE,EAAAC,EAAAC,EAAA,sBAAAoE,IAAAtE,EAAAC,EAAAC,EAAA,sBAAAqE,IAAAvE,EAAAC,EAAAC,EAAA,sBAAAsE,IAAAxE,EAAAC,EAAAC,EAAA,sBAAAuE,IAAAzE,EAAAC,EAAAC,EAAA,sBAAAwE,IAAA1E,EAAAC,EAAAC,EAAA,sBAAAyE,IAAA3E,EAAAC,EAAAC,EAAA,sBAAA0E,IAAA5E,EAAAC,EAAAC,EAAA,sBAAA2E,IAAA7E,EAAAC,EAAAC,EAAA,sBAAA4E,IAAA9E,EAAAC,EAAAC,EAAA,sBAAA6E,IAAA/E,EAAAC,EAAAC,EAAA,sBAAA8E,IAAAhF,EAAAC,EAAAC,EAAA,sBAAA+E,IAAAjF,EAAAC,EAAAC,EAAA,sBAAAgF,IAAAlF,EAAAC,EAAAC,EAAA,sBAAAiF,IAAAnF,EAAAC,EAAAC,EAAA,sBAAAkF,IAAApF,EAAAC,EAAAC,EAAA,sBAAAmF,IAAArF,EAAAC,EAAAC,EAAA,sBAAAoF,IAAAtF,EAAAC,EAAAC,EAAA,sBAAAqF,IAAAvF,EAAAC,EAAAC,EAAA,sBAAAsF,IAAAxF,EAAAC,EAAAC,EAAA,sBAAAuF,IAAAzF,EAAAC,EAAAC,EAAA,sBAAAwF,IAAA1F,EAAAC,EAAAC,EAAA,sBAAAyF,IAAA3F,EAAAC,EAAAC,EAAA,sBAAA0F,IAAA5F,EAAAC,EAAAC,EAAA,sBAAA2F,IAAA7F,EAAAC,EAAAC,EAAA,sBAAA4F,IAAA9F,EAAAC,EAAAC,EAAA,sBAAA6F,IAEO,IAAMhD,EAAqB,qBACrBC,EAAuB,uBACvBC,EAAoB,oBAEpBC,EAAsB,sBACtBC,EAAwB,wBACxBC,EAAqB,qBAErBC,EAAqB,qBACrBC,EAAuB,uBACvBC,EAAoB,oBAEpBC,EAAmB,mBACnBC,EAAqB,qBACrBC,EAAkB,kBAGlBC,EAAyB,yBACzBC,EAA2B,2BAC3BC,EAAwB,wBAExBC,EAA0B,0BAC1BC,EAA4B,4BAC5BC,EAAyB,yBAEzBC,EAAuB,uBAEvBC,EAAsB,sBACtBC,EAAwB,wBACxBC,EAAqB,qBAErBC,EAAwB,wBACxBC,EAA0B,0BAC1BC,EAAuB,uBAEvBC,EAAwB,wBACxBC,EAA0B,0BAC1BC,EAAuB,uBAGvBC,EAAsB,sBACtBC,EAAwB,wBACxBC,EAAqB,qBAErBC,EAAsB,sBACtBC,EAAwB,wBACxBC,EAAqB,qBAErBC,EAAuB,uBACvBC,EAAyB,yBACzBC,EAAsB,sBAGtBC,EAAkB,kBAClBC,EAAoB,oBACpBC,EAAiB,iBAEjBC,EAAuB,uBACvBC,EAAyB,yBACzBC,EAAsB,sBAEtBC,EAA0B,0BAC1BC,EAA4B,4BAC5BC,EAAyB,yBAEzBC,EAA4B,4BAC5BC,EAA8B,8BAC9BC,EAA2B,wECzCnBC,sICTfC,EAA6B,CAC/BC,OAAQ,GACRC,MAAO,GACPC,SAAS,GA6EEC,EAtBC,WAA0H,IAAzHC,EAAyHC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAjHN,EAAcS,EAAmGH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACtI,OAAQC,EAAOC,MACX,KAAK5D,IAAoB,OArDR,SAACuD,EAAqBI,GAC3C,OAAOE,OAAAC,EAAA,EAAAD,CAAA,GAAKN,EAAZ,CAAmBH,MAAO,GAAIC,SAAS,IAoDHU,CAAiBR,GACjD,KAAKtD,IAAsB,OAlDR,SAACsD,EAAqBI,GAC7C,OAAOE,OAAAC,EAAA,EAAAD,CAAA,GAAKN,EAAZ,CAAmBJ,OAAQQ,EAAOR,OAAQC,MAAO,GAAIC,SAAS,IAiDxBW,CAAmBT,EAAOI,GAC5D,KAAKzD,IAAmB,OA/CR,SAACqD,EAAqBI,GAC1C,OAAOE,OAAAC,EAAA,EAAAD,CAAA,GAAKN,EAAZ,CAAmBH,MAAOO,EAAOP,MAAOC,SAAS,IA8CdY,CAAgBV,EAAOI,GAEtD,KAAKxD,IAAqB,OA5CR,SAACoD,EAAqBI,GAC5C,OAAOE,OAAAC,EAAA,EAAAD,CAAA,GAAKN,EAAZ,CAAmBH,MAAO,GAAIC,SAAS,IA2CFa,CAAkBX,GACnD,KAAKnD,IAAuB,OAzCR,SAACmD,EAAqBI,GAC9C,OAAOE,OAAAC,EAAA,EAAAD,CAAA,GAAKN,EAAZ,CAAmBJ,OAAQQ,EAAOR,OAAQC,MAAO,GAAIC,SAAS,IAwCvBc,CAAoBZ,EAAOI,GAC9D,KAAKtD,IAAoB,OAtCR,SAACkD,EAAqBI,GAC3C,OAAOE,OAAAC,EAAA,EAAAD,CAAA,GAAKN,EAAZ,CAAmBH,MAAOO,EAAOP,MAAOC,SAAS,IAqCbe,CAAiBb,EAAOI,GAExD,KAAKlD,IAAkB,OAnCR,SAAC8C,EAAqBI,GACzC,OAAOE,OAAAC,EAAA,EAAAD,CAAA,GAAKN,EAAZ,CAAmBH,MAAO,GAAIC,SAAS,IAkCLgB,CAAed,GAC7C,KAAK7C,IAAoB,OAhCR,SAAC6C,EAAqBI,GAC3C,OAAOE,OAAAC,EAAA,EAAAD,CAAA,GAAKN,EAAZ,CAAmBJ,OAAQQ,EAAOR,OAAQC,MAAO,GAAIC,SAAS,IA+B1BiB,CAAiBf,EAAOI,GACxD,KAAKhD,IAAiB,OA7BR,SAAC4C,EAAqBI,GACxC,OAAOE,OAAAC,EAAA,EAAAD,CAAA,GAAKN,EAAZ,CAAmBH,MAAOO,EAAOP,MAAOC,SAAS,IA4BhBkB,CAAchB,EAAOI,GAElD,KAAKrD,IAAoB,OA1BR,SAACiD,EAAqBI,GAC3C,OAAOE,OAAAC,EAAA,EAAAD,CAAA,GAAKN,EAAZ,CAAmBH,MAAO,GAAIC,SAAS,IAyBHmB,CAAiBjB,GACjD,KAAKhD,IAAsB,OAvBR,SAACgD,EAAqBI,GAC7C,OAAOE,OAAAC,EAAA,EAAAD,CAAA,GAAKN,EAAZ,CAAmBJ,OAAQQ,EAAOR,OAAQC,MAAO,GAAIC,SAAS,IAsBxBoB,CAAmBlB,EAAOI,GAC5D,KAAKnD,IAAmB,OApBR,SAAC+C,EAAqBI,GAC1C,OAAOE,OAAAC,EAAA,EAAAD,CAAA,GAAKN,EAAZ,CAAmBH,MAAOO,EAAOP,MAAOC,SAAS,IAmBdqB,CAAgBnB,EAAOI,GAEtD,QAAS,OAAOJ,ICtElBL,EAAiC,CACnCyB,WAAY,GACZvB,MAAO,GACPC,SAAS,EACT5E,cAAe,IAsGJ6E,EA7BC,WACwE,IADvEC,EACuEC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAD/DN,EAAcS,EACiDH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACpF,OAAQC,EAAOC,MACX,KAAKhD,IAAwB,OAxER,SAAC2C,EAAyBI,GACnD,OAAOE,OAAAC,EAAA,EAAAD,CAAA,GAAKN,EAAZ,CAAmBH,MAAO,GAAIC,SAAS,IAuECuB,CAAqBrB,GACzD,KAAK1C,IAA0B,OArER,SAAC0C,EAAyBI,GACrD,OAAOE,OAAAC,EAAA,EAAAD,CAAA,GAAKN,EAAZ,CAAmBoB,WAAYhB,EAAOgB,WAAYvB,MAAO,GAAIC,SAAS,IAoE5BwB,CAAuBtB,EAAOI,GACpE,KAAK7C,IAAuB,OAlER,SAACyC,EAAyBI,GAClD,OAAOE,OAAAC,EAAA,EAAAD,CAAA,GAAKN,EAAZ,CAAmBH,MAAOO,EAAOP,MAAOC,SAAS,IAiEVyB,CAAoBvB,EAAOI,GAE9D,KAAK5C,IAAyB,OA/DR,SAACwC,EAAyBI,GACpD,OAAOE,OAAAC,EAAA,EAAAD,CAAA,GAAKN,EAAZ,CAAmBH,MAAO,GAAIC,SAAS,IA8DE0B,CAAsBxB,GAC3D,KAAKvC,IAA2B,OA5DR,SAACuC,EAAyBI,GACtD,OAAOE,OAAAC,EAAA,EAAAD,CAAA,GAAKN,EAAZ,CAAmBoB,WAAYhB,EAAOgB,WAAYvB,MAAO,GAAIC,SAAS,IA2D3B2B,CAAwBzB,EAAOI,GACtE,KAAK1C,IAAwB,OAzDR,SAACsC,EAAyBI,GACnD,OAAOE,OAAAC,EAAA,EAAAD,CAAA,GAAKN,EAAZ,CAAmBH,MAAOO,EAAOP,MAAOC,SAAS,IAwDT4B,CAAqB1B,EAAOI,GAEhE,KAAKrC,IAAuB,OAtDR,SAACiC,EAAyBI,GAClD,OAAOE,OAAAC,EAAA,EAAAD,CAAA,GAAKN,EAAZ,CAAmBH,MAAO,GAAIC,SAAS,IAqDA6B,CAAoB3B,GACvD,KAAKhC,IAAyB,OAnDR,SAACgC,EAAyBI,GACpD,OAAOE,OAAAC,EAAA,EAAAD,CAAA,GAAKN,EAAZ,CAAmBoB,WAAYhB,EAAOgB,WAAYvB,MAAO,GAAIC,SAAS,IAkD7B8B,CAAsB5B,EAAOI,GAClE,KAAKnC,IAAsB,OAhDR,SAAC+B,EAAyBI,GACjD,OAAOE,OAAAC,EAAA,EAAAD,CAAA,GAAKN,EAAZ,CAAmBH,MAAOO,EAAOP,MAAOC,SAAS,IA+CX+B,CAAmB7B,EAAOI,GAE5D,KAAKlC,IAAuB,OA7CR,SAAC8B,EAAyBI,GAClD,OAAOE,OAAAC,EAAA,EAAAD,CAAA,GAAKN,EAAZ,CAAmBH,MAAO,GAAIC,SAAS,IA4CAgC,CAAoB9B,GACvD,KAAK7B,IAAyB,OA1CR,SAAC6B,EAAyBI,GACpD,OAAOE,OAAAC,EAAA,EAAAD,CAAA,GAAKN,EAAZ,CAAmBoB,WAAYhB,EAAOgB,WAAYvB,MAAO,GAAIC,SAAS,IAyC7BiC,CAAsB/B,EAAOI,GAClE,KAAKhC,IAAsB,OAvCR,SAAC4B,EAAyBI,GACjD,OAAOE,OAAAC,EAAA,EAAAD,CAAA,GAAKN,EAAZ,CAAmBH,MAAOO,EAAOP,MAAOC,SAAS,IAsCXkC,CAAmBhC,EAAOI,GAE5D,KAAKzC,IAAsB,OApCP,SAACqC,EAAyBI,GAClD,OAAOE,OAAAC,EAAA,EAAAD,CAAA,GAAKN,EAAZ,CAAmB9E,cAAekF,EAAOlF,cAAe4E,SAAS,IAmC3BmC,CAAoBjC,EAAOI,GAE7D,KAAKxC,IAAqB,OAjCR,SAACoC,EAAyBI,GAChD,OAAOE,OAAAC,EAAA,EAAAD,CAAA,GAAKN,EAAZ,CAAmBH,MAAO,GAAIC,SAAS,IAgCFoC,CAAkBlC,GACnD,KAAKnC,IAAuB,OA9BR,SAACmC,EAAyBI,GAClD,OAAOE,OAAAC,EAAA,EAAAD,CAAA,GAAKN,EAAZ,CAAmBoB,WAAYhB,EAAOgB,WAAYvB,MAAO,GAAIC,SAAS,IA6B/BqC,CAAoBnC,EAAOI,GAC9D,KAAKtC,IAAoB,OA3BR,SAACkC,EAAyBI,GAC/C,OAAOE,OAAAC,EAAA,EAAAD,CAAA,GAAKN,EAAZ,CAAmBH,MAAOO,EAAOP,MAAOC,SAAS,IA0BbsC,CAAiBpC,EAAOI,GAExD,QAAS,OAAOJ,IChHlBL,EAA8B,CAChC0C,QAAS,GACTxC,MAAO,GACPC,SAAS,GA4DEC,EAlBC,WAA6G,IAA5GC,EAA4GC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAApGN,EAAcS,EAAsFH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACzH,OAAQC,EAAOC,MACX,KAAKhC,IAAqB,OAxCR,SAAC2B,EAAsBI,GAC7C,OAAOE,OAAAC,EAAA,EAAAD,CAAA,GAAKN,EAAZ,CAAmBH,MAAO,GAAIC,SAAS,IAuCFwC,CAAkBtC,GACnD,KAAK1B,IAAuB,OArCR,SAAC0B,EAAsBI,GAC/C,OAAOE,OAAAC,EAAA,EAAAD,CAAA,GAAKN,EAAZ,CAAmBqC,QAASjC,EAAOiC,QAASxC,MAAO,GAAIC,SAAS,IAoCzByC,CAAoBvC,EAAOI,GAC9D,KAAK7B,IAAoB,OAlCR,SAACyB,EAAsBI,GAC5C,OAAOE,OAAAC,EAAA,EAAAD,CAAA,GAAKN,EAAZ,CAAmBH,MAAOO,EAAOP,MAAOC,SAAS,IAiCb0C,CAAiBxC,EAAOI,GAExD,KAAK5B,IAAqB,OA/BR,SAACwB,EAAsBI,GAC7C,OAAOE,OAAAC,EAAA,EAAAD,CAAA,GAAKN,EAAZ,CAAmBH,MAAO,GAAIC,SAAS,IA8BF2C,CAAkBzC,GACnD,KAAKvB,IAAuB,OA5BR,SAACuB,EAAsBI,GAC/C,OAAOE,OAAAC,EAAA,EAAAD,CAAA,GAAKN,EAAZ,CAAmBqC,QAASjC,EAAOiC,QAASxC,MAAO,GAAIC,SAAS,IA2BzB4C,CAAoB1C,EAAOI,GAC9D,KAAK1B,IAAoB,OAzBR,SAACsB,EAAsBI,GAC5C,OAAOE,OAAAC,EAAA,EAAAD,CAAA,GAAKN,EAAZ,CAAmBH,MAAOO,EAAOP,MAAOC,SAAS,IAwBb6C,CAAiB3C,EAAOI,GAExD,KAAKzB,IAAsB,OAtBR,SAACqB,EAAsBI,GAC9C,OAAOE,OAAAC,EAAA,EAAAD,CAAA,GAAKN,EAAZ,CAAmBH,MAAO,GAAIC,SAAS,IAqBD8C,CAAmB5C,GACrD,KAAKpB,IAAwB,OAnBR,SAACoB,EAAsBI,GAChD,OAAOE,OAAAC,EAAA,EAAAD,CAAA,GAAKN,EAAZ,CAAmBqC,QAASjC,EAAOiC,QAASxC,MAAO,GAAIC,SAAS,IAkBxB+C,CAAqB7C,EAAOI,GAChE,KAAKvB,IAAqB,OAhBR,SAACmB,EAAsBI,GAC7C,OAAOE,OAAAC,EAAA,EAAAD,CAAA,GAAKN,EAAZ,CAAmBH,MAAOO,EAAOP,MAAOC,SAAS,IAeZgD,CAAkB9C,EAAOI,GAE1D,QAAS,OAAOJ,YCxDlBL,EAAkC,CACpCoD,YAAa,CAAC,CAAEzH,SAAU,QAAS0H,GAAI,GAAIC,iBAAkB,KAC7DC,iBAAkB,CAAE5H,SAAU,QAAS0H,GAAI,GAAIC,iBAAkB,IACjEE,OAAQ,GACRtD,MAAO,GACPC,SAAS,GAwFEC,EAtBC,WAA2I,IAA1IC,EAA0IC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAlIN,EAAcS,EAAoHH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACvJ,OAAQC,EAAOC,MACX,KAAKvB,IAAiB,OAhER,SAACkB,EAA0BI,GAC7C,OAAOE,OAAAC,EAAA,EAAAD,CAAA,GAAKN,EAAZ,CAAmBH,MAAO,GAAIC,SAAS,IA+DNsD,CAAcpD,GAC3C,KAAKjB,IAAmB,OA7DR,SAACiB,EAA0BI,GAC/C,OAAOE,OAAAC,EAAA,EAAAD,CAAA,GAAKN,EAAZ,CAAmBmD,OAAQ/C,EAAO+C,OAAQtD,MAAO,GAAIC,SAAS,IA4D3BuD,CAAgBrD,EAAOI,GACtD,KAAKpB,IAAgB,OA1DR,SAACgB,EAA0BI,GAC5C,OAAOE,OAAAC,EAAA,EAAAD,CAAA,GAAKN,EAAZ,CAAmBH,MAAOO,EAAOP,MAAOC,SAAS,IAyDjBwD,CAAatD,EAAOI,GAEhD,KAAKnB,IAAsB,OAvDR,SAACe,EAA0BI,GAClD,OAAOE,OAAAC,EAAA,EAAAD,CAAA,GAAKN,EAAZ,CAAmBH,MAAO,GAAIC,SAAS,IAsDDyD,CAAmBvD,GACrD,KAAKd,IAAwB,OApDR,SAACc,EAA0BI,GACpD,OAAOE,OAAAC,EAAA,EAAAD,CAAA,GACAN,EADP,CACc+C,YAAW,GAAAS,OAAAlD,OAAAmD,EAAA,EAAAnD,CAAMN,EAAM+C,aAAZ,CAAyB3C,EAAOsD,aAAa7D,MAAO,GAAIC,SAAS,IAkDlD6D,CAAqB3D,EAAOI,GAChE,KAAKjB,IAAqB,OA/CR,SAACa,EAA0BI,GACjD,OAAOE,OAAAC,EAAA,EAAAD,CAAA,GAAKN,EAAZ,CAAmBH,MAAOO,EAAOP,MAAOC,SAAS,IA8CZ8D,CAAkB5D,EAAOI,GAE1D,KAAKhB,IAAyB,OA5CR,SAACY,EAA0BI,GACrD,OAAOE,OAAAC,EAAA,EAAAD,CAAA,GAAKN,EAAZ,CAAmBH,MAAO,GAAIC,SAAS,IA2CE+D,CAAsB7D,GAC3D,KAAKX,IAA2B,OAzCR,SAACW,EAA0BI,GACvD,OAAOE,OAAAC,EAAA,EAAAD,CAAA,GACAN,EADP,CAEI+C,YAAa/C,EAAM+C,YAAYe,OAAO,SAAAJ,GAAU,OAAIA,EAAWpI,WAAa8E,EAAOsD,WAAWpI,WAAWuE,MAAO,GAAIC,SAAS,EAC7HoD,iBAAmBlD,EAAMkD,iBAAiB5H,WAAa8E,EAAOsD,WAAWpI,UAAY0E,EAAMkD,iBAAiBF,KAAO5C,EAAOsD,WAAWV,GACjI,CAAE1H,SAAU,GAAI0H,GAAI,GAAIC,iBAAkB,IAE1CjD,EAAMkD,mBAkC6Ba,CAAwB/D,EAAOI,GACtE,KAAKd,IAAwB,OA/BR,SAACU,EAA0BI,GACpD,OAAOE,OAAAC,EAAA,EAAAD,CAAA,GAAKN,EAAZ,CAAmBH,MAAOO,EAAOP,MAAOC,SAAS,IA8BTkE,CAAqBhE,EAAOI,GAEhE,KAAKb,IAA2B,OA5BR,SAACS,EAA0BI,GACvD,OAAOE,OAAAC,EAAA,EAAAD,CAAA,GAAKN,EAAZ,CAAmBH,MAAO,GAAIC,SAAS,IA2BImE,CAAwBjE,GAC/D,KAAKR,IAA6B,OAzBR,SAACQ,EAA0BI,GACzD,OAAOE,OAAAC,EAAA,EAAAD,CAAA,GAAKN,EAAZ,CAAmBkD,iBAAkB9C,EAAOsD,aAwBCQ,CAA0BlE,EAAOI,GAC1E,KAAKX,IAA0B,OAtBR,SAACO,EAA0BI,GACtD,OAAOE,OAAAC,EAAA,EAAAD,CAAA,GAAKN,EAAZ,CAAmBH,MAAOO,EAAOP,MAAOC,SAAS,IAqBPqE,CAAuBnE,EAAOI,GAEpE,QAAS,OAAOJ,IJtFlBoE,EAAoIC,IAEpIC,EAAgB,CAClBC,IAAK,OACLC,aAWS9E,EAAU+E,cAEjBC,EAAmBC,YAAeL,GAVnB5E,EAU8CA,EAVlCkF,YAAgB,CAC7ChF,OAAQiF,EACRzD,WAAY0D,EACZzC,QAAS0C,EACThC,YAAaiC,EACbC,OAAQC,YAAcxF,mDKnCbyF,UAAiB,CAC1B,CACIZ,IAAO,EACPa,QAAW,cACX/J,GAAM,eACNgK,WAAc,0BACdC,KAAQ,SACRC,IAAO,uBAEX,CACIhB,IAAO,EACPa,QAAW,eACX/J,GAAM,eACNgK,WAAc,2BACdC,KAAQ,UACRC,IAAO,YAIFC,EAAqB,CAC9B,CACIjB,IAAK,EACLkB,YAAa,eACbC,MAAO,8CACPC,QAAS,uBACTP,QAAS,gBACTQ,MAAO,yBACPC,MAAO,cAEX,CACItB,IAAK,EACLkB,YAAa,qBACbC,MAAO,kCACPC,QAAS,gCACTP,QAAS,iBACTQ,MAAO,yBACPC,MAAO,cAIFC,EAAkB,CAC3B,CACIC,WAAW,EACXC,UAAW,oCACXC,OAAQ,QACRC,IAAK,EACLC,OAAQ,GACRC,WAAY,sEACZ7J,KAAM,WACN8J,QAAS,GACTC,MAAO,QACPC,IAAK,GAET,CACIR,WAAW,EACXC,UAAW,oCACXC,OAAQ,QACRC,IAAK,EACLC,OAAQ,GACRC,WAAY,sEACZ7J,KAAM,WACN8J,QAAS,GACTC,MAAO,QACPC,IAAK,8RCmMEzL,eAvBS,SAACkF,GACrB,MAAO,CACH+C,YAAa/C,EAAM+C,YAAYA,YAC/BG,iBAAkBlD,EAAM+C,YAAYG,iBACpCC,OAAQnD,EAAM+C,YAAYI,OAC1BrD,QAASE,EAAMqC,QAAQvC,QACvB0G,iBAAkBxG,EAAM+C,YAAYlD,QAIjB,SAAClF,GACxB,MAAO,CACH8L,SAAU,kBACN9L,EAASQ,QACbuL,cAAe,SAAChD,GAAD,OACX/I,EAASQ,IAAsBuI,KACnCiD,iBAAkB,SAACjD,GAAD,OACd/I,EAASQ,IAAyBuI,KACtCkD,mBAAoB,SAAClD,GAAD,OAChB/I,EAASQ,IAA2BuI,OAIjC5I,CAzNS,SAAC+L,GAAiC,IAC9C1D,EAAoI0D,EAApI1D,OAAQsD,EAA4HI,EAA5HJ,SAAU1D,EAAkH8D,EAAlH9D,YAAaG,EAAqG2D,EAArG3D,iBAAkB0D,EAAmFC,EAAnFD,mBAAoBF,EAA+DG,EAA/DH,cAAeC,EAAgDE,EAAhDF,iBAA2BH,GAAqBK,EAA9B/G,QAA8B+G,EAArBL,kBADjEM,EAEtBC,mBAA6B,MAFPC,EAAA1G,OAAA2G,EAAA,EAAA3G,CAAAwG,EAAA,GAE/CI,EAF+CF,EAAA,GAErCG,EAFqCH,EAAA,GAAAI,EAIpBL,oBAAkB,GAJEM,EAAA/G,OAAA2G,EAAA,EAAA3G,CAAA8G,EAAA,GAI/CE,EAJ+CD,EAAA,GAIpCE,EAJoCF,EAAA,GAAAG,EAKNT,oBAAkB,GALZU,EAAAnH,OAAA2G,EAAA,EAAA3G,CAAAkH,EAAA,GAK/CE,EAL+CD,EAAA,GAK7BE,EAL6BF,EAAA,GAAAG,EAMpBb,mBAAiB,IANGc,EAAAvH,OAAA2G,EAAA,EAAA3G,CAAAsH,EAAA,GAM/CE,EAN+CD,EAAA,GAMpCE,EANoCF,EAAA,GAAAG,EAQAjB,oBAAS,GARTkB,EAAA3H,OAAA2G,EAAA,EAAA3G,CAAA0H,EAAA,GAQ/CE,EAR+CD,EAAA,GAQ1BE,EAR0BF,EAAA,GAAAG,EASZrB,mBAAqB,CAAEzL,SAAU,GAAI0H,GAAI,GAAIC,iBAAkB,KATnDoF,EAAA/H,OAAA2G,EAAA,EAAA3G,CAAA8H,EAAA,GAS/CE,EAT+CD,EAAA,GAShCE,EATgCF,EAAA,GAWtDG,oBAAU,WACN/B,KACD,CAACA,IAEJ+B,oBAAU,WACNb,EAAoBnB,EAAiBtG,OAAS,IAC/C,CAACsG,IAEJ,IA6CMiC,EAAc,WAChBtB,EAAY,OAGZuB,EAAkB,KAsBtB,OApBI3F,GAAeA,EAAY7C,OAAS,IACpCwI,EAAkBC,EAAAlN,EAAAC,cAACkN,GAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,UAEnC/F,EAAYgG,IAAI,SAACrF,EAAwBsF,GACtC,OAAOL,EAAAlN,EAAAC,cAACiN,EAAAlN,EAAMwN,SAAP,CAAgB1E,IAAKb,EAAWV,IAClC2F,EAAAlN,EAAAC,cAAEwN,GAAA,EAAF,CACGC,QAASjG,EAAiB5H,WAAaoI,EAAWpI,SAC9C,WApBxBsL,EAoBuDlD,IAE/B,aACJ0F,SAAUlG,EAAiB5H,WAAaoI,EAAWpI,UAClDoI,EAAWpI,SAAkC,UAAxBoI,EAAWpI,UAAwB,IAAKoI,EAAWV,GAChD,UAAxBU,EAAWpI,UAAwBqN,EAAAlN,EAAAC,cAAC2N,GAAA5N,EAAD,CAAY0N,QAAS,WA7B7ExC,EA6B0GjD,IAAa4F,MAAM,YAAYC,UAAWC,IAAIC,yBASxJd,EAAAlN,EAAAC,cAAA,WACIiN,EAAAlN,EAAAC,cAACgO,EAAA,EAAD,CAAQC,QAAQ,OAAOL,MAAM,UAAUM,gBAAc,cAAcC,gBAAc,OAAON,UAAWC,IAAIM,kBACnGC,UAAWpB,EAAAlN,EAAAC,cAACsO,GAAAvO,EAAD,MACX0N,QAlCQ,SAACc,GACjB9C,EAAY8C,EAAMC,iBA+Bd,eAOI5C,GACAqB,EAAAlN,EAAAC,cAACyO,GAAA,EAAD,CAAOC,SAAS,QAAQC,QAAS,WAAQ9C,GAAcD,KACnDqB,EAAAlN,EAAAC,cAAC4O,GAAA,EAAD,KAAY3B,EAAAlN,EAAAC,cAAA,wBACVoM,EAAU5H,OAAS,EACjB4H,EAEA,IAMRJ,GACAiB,EAAAlN,EAAAC,cAACyO,GAAA,EAAD,CAAOC,SAAS,QAAQC,QAAS,WAAQ1C,GAAqBD,KAC1DiB,EAAAlN,EAAAC,cAAC4O,GAAA,EAAD,KAAY3B,EAAAlN,EAAAC,cAAA,gCACX8K,EAAiBtG,OAAS,GACvByI,EAAAlN,EAAAC,cAAA,KAAG6N,UAAWC,IAAIe,OAAQ/D,IAKtCmC,EAAAlN,EAAAC,cAAC8O,GAAA,EAAD,CACInP,GAAG,cACH6L,SAAUA,EACVuD,aAAW,EACXC,KAAMC,QAAQzD,GACdmD,QAAS5B,GAETE,EAAAlN,EAAAC,cAACwN,GAAA,EAAD,CAAUC,QA5GO,WACzBhB,GAAuB,KA2G0BQ,EAAAlN,EAAAC,cAACkP,GAAAnP,EAAD,CAAe6N,MAAM,UAAUC,UAAWC,IAAIqB,gBAAvF,kBACAlC,EAAAlN,EAAAC,cAACoP,GAAA,EAAD,CAAQJ,KAAMxC,EAAqBmC,QAzGjB,WAC1BlC,GAAuB,IAwGoD4C,kBAAgB,qBAC/EpC,EAAAlN,EAAAC,cAACsP,GAAA,EAAD,CAAa3P,GAAG,qBAAhB,kBACAsN,EAAAlN,EAAAC,cAACuP,GAAA,EAAD,KACItC,EAAAlN,EAAAC,cAACkN,GAAA,EAAD,4IAEoED,EAAAlN,EAAAC,cAAA,WAFpE,IAE8EiN,EAAAlN,EAAAC,cAAA,kCAE9EiN,EAAAlN,EAAAC,cAACkN,GAAA,EAAD,KAAMD,EAAAlN,EAAAC,cAAA,WAAN,4EAGCyH,EACGwF,EAAAlN,EAAAC,cAACgO,EAAA,EAAD,CACIH,UAAWC,IAAI0B,IACfvB,QAAQ,YACRL,MAAM,UACNH,QAAS,kBAAMgC,IAAKhI,KAJxB,YASAwF,EAAAlN,EAAAC,cAAC0P,EAAA,EAAD,MAGJzC,EAAAlN,EAAAC,cAACkN,GAAA,EAAD,KACID,EAAAlN,EAAAC,cAAA,WADJ,gCAGAiN,EAAAlN,EAAAC,cAAC2P,GAAA,EAAD,CACIC,WAAS,EACTC,OAAO,QACPlQ,GAAG,OACHmQ,MAAM,WACNnL,KAAK,OACLoL,WAAS,EACTC,SAtII,SAACC,GACzBpD,EAAiBjI,OAAAC,EAAA,EAAAD,CAAA,GAAKgI,EAAN,CAAqBhN,SAAUqQ,EAAEC,OAAOhQ,YAuIxC+M,EAAAlN,EAAAC,cAAC2P,GAAA,EAAD,CACIC,WAAS,EACTC,OAAO,QACPlQ,GAAG,OACHmQ,MAAM,aACNnL,KAAK,OACLoL,WAAS,EACTC,SA3IF,SAACC,GACnBpD,EAAiBjI,OAAAC,EAAA,EAAAD,CAAA,GAAKgI,EAAN,CAAqBtF,GAAI2I,EAAEC,OAAOhQ,YA4IlC+M,EAAAlN,EAAAC,cAAC2P,GAAA,EAAD,CACIC,WAAS,EACTC,OAAO,QACPlQ,GAAG,OACHmQ,MAAM,qEACNnL,KAAK,OACLoL,WAAS,EACTC,SAhJA,SAACC,GACrBpD,EAAiBjI,OAAAC,EAAA,EAAAD,CAAA,GAAKgI,EAAN,CAAqBrF,iBAAkB0I,EAAEC,OAAOhQ,aAkJpD+M,EAAAlN,EAAAC,cAACmQ,GAAA,EAAD,KACIlD,EAAAlN,EAAAC,cAACgO,EAAA,EAAD,CAAQP,QAhJA,WAExB,GADAhB,GAAuB,IAClBG,EAAchN,WAAagN,EAActF,KAAOsF,EAAcrF,kBAC/DF,EAAY+I,KAAK,SAAApI,GAAU,OAAIA,EAAWpI,WAAagN,EAAchN,WAIrE,OAHAmN,IACAV,EAAa,2CACbR,GAAa,GAGjBb,EAAc4B,GACdC,EAAiB,CAAEjN,SAAU,GAAI0H,GAAI,GAAIC,iBAAkB,MAsILqG,MAAM,WAA5C,YAKPZ,MCxKFqD,GAtDS,SAAAlF,GAAK,OACzB8B,EAAAlN,EAAAC,cAAA,MAAI6N,UAAWC,IAAIpN,MACdyK,EAAMmF,WACHrD,EAAAlN,EAAAC,cAAA,MAAI6N,UAAWC,IAAIjN,MACfoM,EAAAlN,EAAAC,cAACuQ,EAAA,EAAD,CACIC,GAAG,IACH3C,UAAWC,IAAIlN,KACf6P,gBAAiB3C,IAAIhN,QAHzB,cASRmM,EAAAlN,EAAAC,cAAA,MAAI6N,UAAWC,IAAInN,MACfsM,EAAAlN,EAAAC,cAACuQ,EAAA,EAAD,CACIC,GAAG,IACHE,OAAK,EACL7C,UAAWC,IAAIlN,KACf6P,gBAAiB3C,IAAIhN,QAJzB,SASJmM,EAAAlN,EAAAC,cAAA,MAAI6N,UAAWC,IAAInN,MACfsM,EAAAlN,EAAAC,cAACuQ,EAAA,EAAD,CACIC,GAAG,UACH3C,UAAWC,IAAIlN,KACf6P,gBAAiB3C,IAAIhN,QAHzB,WAQJmM,EAAAlN,EAAAC,cAAA,MAAI6N,UAAWC,IAAInN,MACfsM,EAAAlN,EAAAC,cAACuQ,EAAA,EAAD,CACIC,GAAG,cACH3C,UAAWC,IAAIlN,KACf6P,gBAAiB3C,IAAIhN,QAHzB,eAQJmM,EAAAlN,EAAAC,cAAA,MAAI6N,UAAWC,IAAInN,MACfsM,EAAAlN,EAAAC,cAACuQ,EAAA,EAAD,CACIC,GAAG,WACH3C,UAAWC,IAAIlN,KACf6P,gBAAiB3C,IAAIhN,QAHzB,YAQJmM,EAAAlN,EAAAC,cAAC2Q,GAAD,6BC7COC,GARM,SAACzF,GAAD,OACjB8B,EAAAlN,EAAAC,cAAA,OAAK6N,UAAWC,KAAIvN,aAAckN,QAAStC,EAAM0F,SAC7C5D,EAAAlN,EAAAC,cAAA,YACAiN,EAAAlN,EAAAC,cAAA,YACAiN,EAAAlN,EAAAC,cAAA,cCmBO8Q,GApBC,SAAA3F,GAAK,OACjB8B,EAAAlN,EAAAC,cAAA,UAAQ6N,UAAWC,IAAIiD,UACjB5F,EAAMmF,WACJrD,EAAAlN,EAAAC,cAACiN,EAAAlN,EAAMwN,SAAP,KACIN,EAAAlN,EAAAC,cAACO,GAAD,CAAcsQ,QAAS1F,EAAM6F,sBAC7B/D,EAAAlN,EAAAC,cAAA,OAAK6N,UAAWC,IAAIjN,MAChBoM,EAAAlN,EAAAC,cAACuQ,EAAA,EAAD,CAASC,GAAG,IAAI3C,UAAWC,IAAIlN,MAA/B,eAMXuK,EAAMmF,WACHrD,EAAAlN,EAAAC,cAAA,WACIiN,EAAAlN,EAAAC,cAACiR,GAAD,CAAiBX,WAAS,gDCb3BY,GAJE,SAAA/F,GAAK,OAClBA,EAAMgG,KAAOlE,EAAAlN,EAAAC,cAAA,OAAK6N,UAAWC,KAAIrN,SAAUgN,QAAStC,EAAM0F,UAAkB,MCoBjEO,GAjBI,SAAAjG,GACf,IAAIkG,EAAkB,CAACvD,KAAIwD,WAAYxD,KAAIyD,OAI3C,OAHIpG,EAAM6D,OACNqC,EAAkB,CAACvD,KAAIwD,WAAYxD,KAAI0D,OAGvCvE,EAAAlN,EAAAC,cAACiN,EAAAlN,EAAMwN,SAAP,KACIN,EAAAlN,EAAAC,cAACS,GAAD,CAAU0Q,KAAMhG,EAAM6D,KAAM6B,QAAS1F,EAAMsG,SAC3CxE,EAAAlN,EAAAC,cAAA,OAAK6N,UAAWwD,EAAgBK,KAAK,KAAMjE,QAAStC,EAAMsG,QACtDxE,EAAAlN,EAAAC,cAAA,WACIiN,EAAAlN,EAAAC,cAACiR,GAAD,CAAiBX,WAAW,QCwBjCjQ,GA9BA,SAAC8K,GAAuB,IAAAC,EACSC,oBAAkB,GAD3BC,EAAA1G,OAAA2G,EAAA,EAAA3G,CAAAwG,EAAA,GAC5BuG,EAD4BrG,EAAA,GACZsG,EADYtG,EAAA,GAWnC,OACI2B,EAAAlN,EAAAC,cAACiN,EAAAlN,EAAMwN,SAAP,KACIN,EAAAlN,EAAAC,cAAC+Q,GAAD,CACIT,UAAWnF,EAAMmF,UACjBU,oBARoB,WAC5BY,GAAmBD,OAUbxG,EAAMmF,WACJrD,EAAAlN,EAAAC,cAACsR,GAAD,CACItC,KAAM2C,EACNF,OAlBgB,WAC5BG,GAAkB,MAqBd3E,EAAAlN,EAAAC,cAAA,QAAM6N,UAAWC,IAAIzN,QAAS8K,EAAMnM,gCCrBjC6S,GAZD,WACV,OACI5E,EAAAlN,EAAAC,cAAA,OAAK6N,UAAWC,KAAI+D,OAChB5E,EAAAlN,EAAAC,cAAA,OAAK6N,UAAWC,KAAIgE,SAChB7E,EAAAlN,EAAAC,cAAA,uCACAiN,EAAAlN,EAAAC,cAAA,uHACAiN,EAAAlN,EAAAC,cAAA,uICWV+R,GAASC,IAAMC,KAAK,WACxB,OAAOC,QAAAC,IAAA,CAAAnU,EAAAiS,EAAA,GAAAjS,EAAAiS,EAAA,KAAAmC,KAAApU,EAAAqU,KAAA,aAGHC,GAAaN,IAAMC,KAAK,WAC5B,OAAOC,QAAAC,IAAA,CAAAnU,EAAAiS,EAAA,GAAAjS,EAAAiS,EAAA,KAAAmC,KAAApU,EAAAqU,KAAA,aAGHE,GAAgBP,IAAMC,KAAK,WAC/B,OAAOC,QAAAC,IAAA,CAAAnU,EAAAiS,EAAA,GAAAjS,EAAAiS,EAAA,KAAAmC,KAAApU,EAAAqU,KAAA,aAGHG,GAAUR,IAAMC,KAAK,WACzB,OAAOC,QAAAC,IAAA,CAAAnU,EAAAiS,EAAA,GAAAjS,EAAAiS,EAAA,KAAAmC,KAAApU,EAAAqU,KAAA,aA8DMI,eACbrT,YAPsB,SAACkF,GACvB,MAAO,CACLoO,iBAAiB,IAKnBtT,CAxDU,SAAC+L,GAAqB,IAAAC,EACEC,mBAAkBsH,OAAOC,YAAc,KADzCtH,EAAA1G,OAAA2G,EAAA,EAAA3G,CAAAwG,EAAA,GACzBkF,EADyBhF,EAAA,GACduH,EADcvH,EAAA,GAG1BwH,EAAqB,WACzBD,EAAaF,OAAOC,YAAc,MAGpC9F,oBAAU,WAER6F,OAAOI,iBACL,SACAC,IAAS,WACPF,KACC,OAEJ,IAEHhG,oBAAU,WAER,OAAO,WACL6F,OAAOM,oBACL,SACAD,IAAS,WACPF,KACC,QAGN,IAEH,IAAMI,EACJjG,EAAAlN,EAAAC,cAACmT,EAAA,EAAD,KACElG,EAAAlN,EAAAC,cAACmT,EAAA,EAAD,CAAOC,KAAK,IAAI1C,OAAK,EAAC2C,UAAWxB,KACjC5E,EAAAlN,EAAAC,cAACmT,EAAA,EAAD,CAAOC,KAAK,WAAW1C,OAAK,EAAC4C,OAAQ,kBAAMrG,EAAAlN,EAAAC,cAAC+R,GAAD,CAAQtI,eAAgBA,OACnEwD,EAAAlN,EAAAC,cAACmT,EAAA,EAAD,CAAOC,KAAK,eAAe1C,OAAK,EAAC4C,OAAQ,kBAAMrG,EAAAlN,EAAAC,cAACsS,GAAD,CAAYxI,mBAAoBA,OAC/EmD,EAAAlN,EAAAC,cAACmT,EAAA,EAAD,CAAOC,KAAK,sBAAsBE,OAAQ,kBAAMrG,EAAAlN,EAAAC,cAACuS,GAAD,SAChDtF,EAAAlN,EAAAC,cAACmT,EAAA,EAAD,CAAOC,KAAK,YAAYE,OAAQ,kBAAMrG,EAAAlN,EAAAC,cAACwS,GAAD,CAASpI,gBAAiBA,OAChE6C,EAAAlN,EAAAC,cAACmT,EAAA,EAAD,CAAU3C,GAAG,OAIjB,OACEvD,EAAAlN,EAAAC,cAAA,WACEiN,EAAAlN,EAAAC,cAACuT,GAAD,CAAQjD,UAAWA,GACjBrD,EAAAlN,EAAAC,cAACwT,EAAA,SAAD,CAAUC,SAAUxG,EAAAlN,EAAAC,cAAA,wBAAoBkT,QCxE5BjE,QACW,cAA7B0D,OAAOe,SAASC,UAEe,UAA7BhB,OAAOe,SAASC,UAEhBhB,OAAOe,SAASC,SAASC,MACvB,kFCDAC,GhB6BYC,YAAY9K,EAAkBN,EACxCqL,YACIC,YAAiBhQ,GACjBiQ,OgB/BNC,GAAYC,YAAaN,IAEzBO,GACFnH,EAAAlN,EAAAC,cAACqU,EAAA,EAAD,CAAUR,MAAOA,IACb5G,EAAAlN,EAAAC,cAACsU,EAAA,EAAD,CAAalQ,QAAS,KAAM8P,UAAWA,IACnCjH,EAAAlN,EAAAC,cAACuU,GAAA,EAAD,KACItH,EAAAlN,EAAAC,cAACwU,GAAA,EAAD,KACIvH,EAAAlN,EAAAC,cAACyU,EAAA,EAAD,CAAiBzQ,QAASA,GACtBiJ,EAAAlN,EAAAC,cAAC0U,GAAD,WAQxBC,IAASrB,OACLrG,EAAAlN,EAAAC,cAACiN,EAAAlN,EAAM6U,WAAP,KACKR,IAELS,SAASC,eAAe,SDqGtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7C,KAAK,SAAA8C,GACJA,EAAaC,eAEdC,MAAM,SAAAjR,GACLkR,QAAQlR,MAAMA,EAAMmR,wGEnHftQ,EAAkB,SAACb,GAC5B,MAAO,CACHQ,KAAM1D,IACNkD,MAAOA,IAIFoR,EAAc,WACvB,sBAAA1W,EAAA+F,OAAA4Q,EAAA,EAAA5Q,CAAA6Q,EAAA1V,EAAA2V,KAAO,SAAAC,EAAO1W,EAA8C2W,GAArD,IAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAP,EAAA1V,EAAAkW,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACGP,EAAiBD,IAAWvO,YAAYG,iBAAiB5H,SAC/DX,EAtBG,CACH0F,KAAM5D,MAuBA+U,EAJH,GAAAhO,OAIYtH,IAJZ,WAMGuV,EAAU,CACZM,eAAgB,mBAChBC,kBAAmBT,GARpBK,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAYwBG,IAAMC,IAAIV,EAAK,CAAEC,QAASA,IAZlD,OAYOC,EAZPE,EAAAO,KAaCxX,GA5BuBiF,EA4BK8R,EAASU,KAAKxS,OA3B3C,CACHS,KAAM3D,IACNkD,OAAQA,KAYLgS,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAS,GAAAT,EAAA,SAeCA,EAAAS,GAAIX,SACA/W,EAAS+F,EAAgBkR,EAAAS,GAAIX,SAASU,OAEtCzX,EAAS+F,EAAgB,0DAlB9B,yBAAAkR,EAAAU,OAfuB,IAAC1S,GAexByR,EAAA,kBAAP,gBAAAkB,EAAAC,GAAA,OAAAjY,EAAAkY,MAAAC,KAAAzS,YAAA,IAqCSY,EAAmB,SAAChB,GAC7B,MAAO,CACHQ,KAAMvD,IACN+C,MAAOA,IAIF8S,EAAe,SAACC,GACzB,sBAAAC,EAAAvS,OAAA4Q,EAAA,EAAA5Q,CAAA6Q,EAAA1V,EAAA2V,KAAO,SAAA0B,EAAOnY,EAA8C2W,GAArD,IAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAP,EAAA1V,EAAAkW,KAAA,SAAAoB,GAAA,cAAAA,EAAAlB,KAAAkB,EAAAjB,MAAA,cACGP,EAAiBD,IAAWvO,YAAYG,iBAAiB5H,SAC/DX,EAtBG,CACH0F,KAAMzD,MAuBA4U,EAJH,GAAAhO,OAIYtH,IAJZ,WAMGuV,EAAU,CACZM,eAAgB,mBAChBC,kBAAmBT,GARpBwB,EAAAlB,KAAA,EAAAkB,EAAAjB,KAAA,EAYwBG,IAAMe,OAAOxB,EAAK,CAAEC,QAASA,EAASW,KAAM,CAAEa,IAAKL,KAZ3E,OAYOlB,EAZPqB,EAAAZ,KAaCxX,GA5BwBiF,EA4BK8R,EAASU,KAAKxS,OA3B5C,CACHS,KAAMxD,IACN+C,OAAQA,KAYLmT,EAAAjB,KAAA,iBAAAiB,EAAAlB,KAAA,GAAAkB,EAAAV,GAAAU,EAAA,SAeCA,EAAAV,GAAIX,SACA/W,EAASkG,EAAiBkS,EAAAV,GAAIX,SAASU,OAEvCzX,EAASkG,EAAiB,2DAlB/B,yBAAAkS,EAAAT,OAfwB,IAAC1S,GAezBkT,EAAA,kBAAP,gBAAAI,EAAAC,GAAA,OAAAN,EAAAJ,MAAAC,KAAAzS,YAAA,IAqCSkB,EAAkB,SAACtB,GAC5B,MAAO,CACHQ,KAAMpD,IACN4C,MAAOA,IAIFuT,EAAc,WACvB,sBAAAC,EAAA/S,OAAA4Q,EAAA,EAAA5Q,CAAA6Q,EAAA1V,EAAA2V,KAAO,SAAAkC,EAAO3Y,EAA8C2W,GAArD,IAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAP,EAAA1V,EAAAkW,KAAA,SAAA4B,GAAA,cAAAA,EAAA1B,KAAA0B,EAAAzB,MAAA,cACGP,EAAiBD,IAAWvO,YAAYG,iBAAiB5H,SAC/DX,EAtBG,CACH0F,KAAMtD,MAuBAyU,EAJH,GAAAhO,OAIYtH,IAJZ,iBAMGuV,EAAU,CACZM,eAAgB,mBAChBC,kBAAmBT,GARpBgC,EAAA1B,KAAA,EAAA0B,EAAAzB,KAAA,EAYwBG,IAAMe,OAAOxB,EAAK,CAAEC,QAASA,IAZrD,OAYOC,EAZP6B,EAAApB,KAaCxX,GA5BuBiF,EA4BK8R,EAASU,KAAKxS,OA3B3C,CACHS,KAAMrD,IACN4C,OAAQA,KAYL2T,EAAAzB,KAAA,iBAAAyB,EAAA1B,KAAA,GAAA0B,EAAAlB,GAAAkB,EAAA,SAeCA,EAAAlB,GAAImB,QACA7Y,EAASwG,EAAgBoS,EAAAlB,GAAIX,SAASU,OAEtCzX,EAASwG,EAAgB,0DAlB9B,yBAAAoS,EAAAjB,OAfuB,IAAC1S,GAexB0T,EAAA,kBAAP,gBAAAG,EAAAC,GAAA,OAAAL,EAAAZ,MAAAC,KAAAzS,YAAA,IAqCSe,EAAgB,SAACnB,GAC1B,MAAO,CACHQ,KAAMjD,IACNyC,MAAOA,IAIF8T,EAAY,SAACC,GACtB,sBAAAC,EAAAvT,OAAA4Q,EAAA,EAAA5Q,CAAA6Q,EAAA1V,EAAA2V,KAAO,SAAA0C,EAAOnZ,EAA8C2W,GAArD,IAAAC,EAAAC,EAAAC,EAAAW,EAAAV,EAAA,OAAAP,EAAA1V,EAAAkW,KAAA,SAAAoC,GAAA,cAAAA,EAAAlC,KAAAkC,EAAAjC,MAAA,cACGP,EAAiBD,IAAWvO,YAAYG,iBAAiB5H,SAC/DX,EAtBG,CACH0F,KAAMnD,MAuBAsU,EAJH,GAAAhO,OAIYtH,IAJZ,gBAMGuV,EAAU,CACZM,eAAgB,mBAChBiC,8BAA+B,IAC/BhC,kBAAmBT,GAGjBa,EAAO,CACTwB,KAAMA,GAbPG,EAAAlC,KAAA,EAAAkC,EAAAjC,KAAA,EAiBwBG,IAAMgC,KAAKzC,EAAKY,EAAM,CAAEX,QAASA,IAjBzD,OAiBOC,EAjBPqC,EAAA5B,KAkBCxX,GAjCqBiF,EAiCK8R,EAASU,KAAKxS,OAhCzC,CACHS,KAAMlD,IACNyC,OAAQA,KAYLmU,EAAAjC,KAAA,iBAAAiC,EAAAlC,KAAA,GAAAkC,EAAA1B,GAAA0B,EAAA,SAoBCA,EAAA1B,GAAImB,QACA7Y,EAASqG,EAAc+S,EAAA1B,GAAIX,SAASU,OAEpCzX,EAASqG,EAAc,wDAvB5B,yBAAA+S,EAAAzB,OAfqB,IAAC1S,GAetBkU,EAAA,kBAAP,gBAAAI,EAAAC,GAAA,OAAAN,EAAApB,MAAAC,KAAAzS,YAAA,YC3ISsB,EAAsB,SAAC1B,GAChC,MAAO,CACHQ,KAAM9C,IACNsC,MAAOA,IAIFuU,EAAkB,WAC3B,sBAAA7Z,EAAA+F,OAAA4Q,EAAA,EAAA5Q,CAAA6Q,EAAA1V,EAAA2V,KAAO,SAAAC,EAAO1W,EAA8C2W,GAArD,IAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAP,EAAA1V,EAAAkW,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACGP,EAAiBD,IAAWvO,YAAYG,iBAAiB5H,SAC/DX,EAtBG,CACH0F,KAAMhD,MAuBAmU,EAJH,GAAAhO,OAIYtH,IAJZ,eAMGuV,EAAU,CACZM,eAAgB,mBAChBC,kBAAmBT,GARpBK,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAYwBG,IAAMC,IAAIV,EAAK,CAAEC,QAASA,IAZlD,OAYOC,EAZPE,EAAAO,KAaCxX,GA5B2ByG,EA4BKsQ,EAASU,KAAKhR,WA3B/C,CACHf,KAAM/C,IACN8D,WAAYA,KAYTwQ,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAS,GAAAT,EAAA,SAeCA,EAAAS,GAAIX,SACA/W,EAAS4G,EAAoBqQ,EAAAS,GAAIX,SAASU,OAE1CzX,EAAS4G,EAAoB,8DAlBlC,yBAAAqQ,EAAAU,OAf2B,IAAClR,GAe5BiQ,EAAA,kBAAP,gBAAAkB,EAAAC,GAAA,OAAAjY,EAAAkY,MAAAC,KAAAzS,YAAA,IAqCSyB,EAAuB,SAAC7B,GACjC,MAAO,CACHQ,KAAM3C,IACNmC,MAAOA,IAIFwU,EAAmB,SAACC,GAC7B,sBAAAzB,EAAAvS,OAAA4Q,EAAA,EAAA5Q,CAAA6Q,EAAA1V,EAAA2V,KAAO,SAAA0B,EAAOnY,EAA8C2W,GAArD,IAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAP,EAAA1V,EAAAkW,KAAA,SAAAoB,GAAA,cAAAA,EAAAlB,KAAAkB,EAAAjB,MAAA,cACGP,EAAiBD,IAAWvO,YAAYG,iBAAiB5H,SAC/DX,EAtBG,CACH0F,KAAM7C,MAuBAgU,EAJH,GAAAhO,OAIYtH,IAJZ,eAMGuV,EAAU,CACZM,eAAgB,mBAChBiC,8BAA+B,IAC/BhC,kBAAmBT,GATpBwB,EAAAlB,KAAA,EAAAkB,EAAAjB,KAAA,EAawBG,IAAMe,OAAOxB,EAAK,CAAEC,QAASA,EAASW,KAAM,CAAEa,IAAKqB,KAb3E,OAaO5C,EAbPqB,EAAAZ,KAcCxX,GA7B4ByG,EA6BKsQ,EAASU,KAAKhR,WA5BhD,CACHf,KAAM5C,IACN2D,WAAYA,KAYT2R,EAAAjB,KAAA,iBAAAiB,EAAAlB,KAAA,GAAAkB,EAAAV,GAAAU,EAAA,SAgBCA,EAAAV,GAAIX,SACA/W,EAAS+G,EAAqBqR,EAAAV,GAAIX,SAASU,OAE3CzX,EAAS+G,EAAqB,+DAnBnC,yBAAAqR,EAAAT,OAf4B,IAAClR,GAe7B0R,EAAA,kBAAP,gBAAAI,EAAAC,GAAA,OAAAN,EAAAJ,MAAAC,KAAAzS,YAAA,IAsCS4B,EAAqB,SAAChC,GAC/B,MAAO,CACHQ,KAAMpC,IACN4B,MAAOA,IAIF0U,EAAiB,SAACD,GAC3B,sBAAAjB,EAAA/S,OAAA4Q,EAAA,EAAA5Q,CAAA6Q,EAAA1V,EAAA2V,KAAO,SAAAkC,EAAO3Y,EAA8C2W,GAArD,IAAAC,EAAAC,EAAAC,EAAAW,EAAAV,EAAA,OAAAP,EAAA1V,EAAAkW,KAAA,SAAA4B,GAAA,cAAAA,EAAA1B,KAAA0B,EAAAzB,MAAA,cACGP,EAAiBD,IAAWvO,YAAYG,iBAAiB5H,SAC/DX,EAtBG,CACH0F,KAAMtC,MAuBAyT,EAJH,GAAAhO,OAIYtH,IAJZ,oBAKGuV,EAAU,CACZM,eAAgB,mBAChBiC,8BAA+B,IAC/BhC,kBAAmBT,GAEjBa,EAAO,CACTa,IAAKqB,GAXNf,EAAA1B,KAAA,EAAA0B,EAAAzB,KAAA,EAewBG,IAAMgC,KAAKzC,EAAKY,EAAM,CAAEX,QAASA,IAfzD,OAeOC,EAfP6B,EAAApB,KAgBCxX,GA/B0ByG,EA+BKsQ,EAASU,KAAKhR,WA9B9C,CACHf,KAAMrC,IACNoD,WAAYA,KAYTmS,EAAAzB,KAAA,iBAAAyB,EAAA1B,KAAA,GAAA0B,EAAAlB,GAAAkB,EAAA,SAkBCA,EAAAlB,GAAIX,SACA/W,EAASkH,EAAmB0R,EAAAlB,GAAIX,SAASU,OAEzCzX,EAASkH,EAAmB,6DArBjC,yBAAA0R,EAAAjB,OAf0B,IAAClR,GAe3BkS,EAAA,kBAAP,gBAAAG,EAAAC,GAAA,OAAAL,EAAAZ,MAAAC,KAAAzS,YAAA,IAwCS+B,EAAqB,SAACnC,GAC/B,MAAO,CACHQ,KAAMjC,IACNyB,MAAOA,IAIF2U,EAAiB,SAACF,GAC3B,sBAAAT,EAAAvT,OAAA4Q,EAAA,EAAA5Q,CAAA6Q,EAAA1V,EAAA2V,KAAO,SAAA0C,EAAOnZ,EAA8C2W,GAArD,IAAAC,EAAAC,EAAAC,EAAAW,EAAAV,EAAA,OAAAP,EAAA1V,EAAAkW,KAAA,SAAAoC,GAAA,cAAAA,EAAAlC,KAAAkC,EAAAjC,MAAA,cACGP,EAAiBD,IAAWvO,YAAYG,iBAAiB5H,SAC/DX,EAtBG,CACH0F,KAAMnC,MAuBAsT,EAJH,GAAAhO,OAIYtH,IAJZ,oBAKGuV,EAAU,CACZM,eAAgB,mBAChBiC,8BAA+B,IAC/BhC,kBAAmBT,GAEjBa,EAAO,CACTa,IAAKqB,GAXNP,EAAAlC,KAAA,EAAAkC,EAAAjC,KAAA,EAewBG,IAAMgC,KAAKzC,EAAKY,EAAM,CAAEX,QAASA,IAfzD,OAeOC,EAfPqC,EAAA5B,KAgBCxX,GA/B0ByG,EA+BKsQ,EAASU,KAAKhR,WA9B9C,CACHf,KAAMlC,IACNiD,WAAYA,KAYT2S,EAAAjC,KAAA,iBAAAiC,EAAAlC,KAAA,GAAAkC,EAAA1B,GAAA0B,EAAA,SAkBCA,EAAA1B,GAAIX,SACA/W,EAASqH,EAAmB+R,EAAA1B,GAAIX,SAASU,OAEzCzX,EAASqH,EAAmB,6DArBjC,yBAAA+R,EAAAzB,OAf0B,IAAClR,GAe3B0S,EAAA,kBAAP,gBAAAI,EAAAC,GAAA,OAAAN,EAAApB,MAAAC,KAAAzS,YAAA,IA2BSgC,EAAsB,SAAC/G,GAChC,MAAO,CACHmF,KAAM1C,IACNzC,cAAeA,IAkBVkH,EAAmB,SAACvC,GAC7B,MAAO,CACHQ,KAAMvC,IACN+B,MAAOA,IAIF4U,EAAe,SAAC9O,GACzB,sBAAA+O,EAAApU,OAAA4Q,EAAA,EAAA5Q,CAAA6Q,EAAA1V,EAAA2V,KAAO,SAAAuD,EAAOha,EAA8C2W,GAArD,IAAAC,EAAAC,EAAAC,EAAAW,EAAAV,EAAA,OAAAP,EAAA1V,EAAAkW,KAAA,SAAAiD,GAAA,cAAAA,EAAA/C,KAAA+C,EAAA9C,MAAA,cACGP,EAAiBD,IAAWvO,YAAYG,iBAAiB5H,SAC/DX,EAtBG,CACH0F,KAAMzC,MAuBA4T,EAJH,GAAAhO,OAIYtH,IAJZ,kBAKGuV,EAAU,CACZM,eAAgB,mBAChBiC,8BAA+B,IAC/BhC,kBAAmBT,GAEjBa,EAAO,CACTzM,QAASA,GAXViP,EAAA/C,KAAA,EAAA+C,EAAA9C,KAAA,EAewBG,IAAMgC,KAAKzC,EAAKY,EAAM,CAAEX,QAASA,IAfzD,OAeOC,EAfPkD,EAAAzC,KAiBexM,EAAQkP,MAAM,KAEtBC,QAAQ,SAAAC,GACVrD,EAASU,KAAKhR,WAAW0T,QAAQ,SAAAjM,GAC7B,IAAMnD,EAAQmD,EAAUnD,MAAMmP,MAAM,KAAK,GAErCE,IAASlM,EAAUpD,aAAesP,IAASlM,EAAUnD,OAASqP,IAASrP,GACvE/K,EAASqa,YAAI,mBAAAxR,OAAoBqF,EAAUpD,mBAIvD9K,GA3CwByG,EA2CKsQ,EAASU,KAAKhR,WA1C5C,CACHf,KAAMxC,IACNuD,WAAYA,KAYTwT,EAAA9C,KAAA,iBAAA8C,EAAA/C,KAAA,GAAA+C,EAAAvC,GAAAuC,EAAA,SA8BCA,EAAAvC,GAAIX,SACA/W,EAASyH,EAAiBwS,EAAAvC,GAAIX,SAASU,OAEvCzX,EAASyH,EAAiB,mEAjC/B,yBAAAwS,EAAAtC,OAfwB,IAAClR,GAezBuT,EAAA,kBAAP,gBAAAM,EAAAC,GAAA,OAAAR,EAAAjC,MAAAC,KAAAzS,YAAA,IChNSuC,EAAmB,SAAC3C,GAC7B,MAAO,CACHQ,KAAM9B,IACNsB,MAAOA,IAIFsV,EAAe,WACxB,sBAAA5a,EAAA+F,OAAA4Q,EAAA,EAAA5Q,CAAA6Q,EAAA1V,EAAA2V,KAAO,SAAAC,EAAO1W,EAA8C2W,GAArD,IAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAP,EAAA1V,EAAAkW,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACGP,EAAiBD,IAAWvO,YAAYG,iBAAiB5H,SAC/DX,EAtBG,CACH0F,KAAMhC,MAuBAmT,EAJH,GAAAhO,OAIYtH,IAJZ,YAMGuV,EAAU,CACZM,eAAgB,mBAChBC,kBAAmBT,GARpBK,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAYwBG,IAAMC,IAAIV,EAAK,CAAEC,QAASA,IAZlD,OAYOC,EAZPE,EAAAO,KAaCxX,GA5BwB0H,EA4BKqP,EAASU,KAAK/P,QA3B5C,CACHhC,KAAM/B,IACN+D,QAASA,KAYNuP,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAS,GAAAT,EAAA,SAeCA,EAAAS,GAAIX,SACA/W,EAAS6H,EAAiBoP,EAAAS,GAAIX,SAASU,OAEvCzX,EAAS6H,EAAiB,2DAlB/B,yBAAAoP,EAAAU,OAfwB,IAACjQ,GAezBgP,EAAA,kBAAP,gBAAAkB,EAAAC,GAAA,OAAAjY,EAAAkY,MAAAC,KAAAzS,YAAA,IAqCS0C,EAAmB,SAAC9C,GAC7B,MAAO,CACHQ,KAAM3B,IACNmB,MAAOA,IAIFuV,EAAe,SAACxB,GACzB,sBAAAf,EAAAvS,OAAA4Q,EAAA,EAAA5Q,CAAA6Q,EAAA1V,EAAA2V,KAAO,SAAA0B,EAAOnY,EAA8C2W,GAArD,IAAAC,EAAAC,EAAAC,EAAAW,EAAAV,EAAA,OAAAP,EAAA1V,EAAAkW,KAAA,SAAAoB,GAAA,cAAAA,EAAAlB,KAAAkB,EAAAjB,MAAA,cACGP,EAAiBD,IAAWvO,YAAYG,iBAAiB5H,SAC/DX,EAtBG,CACH0F,KAAM7B,MAuBAgT,EAJH,GAAAhO,OAIYtH,IAJZ,mBAMGuV,EAAU,CACZM,eAAgB,mBAChBiC,8BAA+B,IAC/BhC,kBAAmBT,GAGjBa,EAAO,CACTwB,KAAMA,GAbPb,EAAAlB,KAAA,EAAAkB,EAAAjB,KAAA,EAiBwBG,IAAMgC,KAAKzC,EAAKY,EAAM,CAAEX,QAASA,IAjBzD,OAiBOC,EAjBPqB,EAAAZ,KAkBCxX,GAjCwB0H,EAiCKqP,EAASU,KAAK/P,QAhC5C,CACHhC,KAAM5B,IACN4D,QAASA,KAYN0Q,EAAAjB,KAAA,iBAAAiB,EAAAlB,KAAA,GAAAkB,EAAAV,GAAAU,EAAA,SAoBCA,EAAAV,GAAIX,SACA/W,EAASgI,EAAiBoQ,EAAAV,GAAIX,SAASU,OAEvCzX,EAASgI,EAAiB,4DAvB/B,yBAAAoQ,EAAAT,OAfwB,IAACjQ,GAezByQ,EAAA,kBAAP,gBAAAI,EAAAC,GAAA,OAAAN,EAAAJ,MAAAC,KAAAzS,YAAA,IA0CS6C,EAAoB,SAACjD,GAC9B,MAAO,CACHQ,KAAMxB,IACNgB,MAAOA,IAIFwV,EAAgB,SAACxP,GAC1B,sBAAAwN,EAAA/S,OAAA4Q,EAAA,EAAA5Q,CAAA6Q,EAAA1V,EAAA2V,KAAO,SAAAkC,EAAO3Y,EAA8C2W,GAArD,IAAAC,EAAAC,EAAAC,EAAAW,EAAAV,EAAA,OAAAP,EAAA1V,EAAAkW,KAAA,SAAA4B,GAAA,cAAAA,EAAA1B,KAAA0B,EAAAzB,MAAA,cACGP,EAAiBD,IAAWvO,YAAYG,iBAAiB5H,SAC/DX,EAtBG,CACH0F,KAAM1B,MAuBA6S,EAJH,GAAAhO,OAIYtH,IAJZ,YAMGuV,EAAU,CACZM,eAAgB,mBAChBiC,8BAA+B,IAC/BhC,kBAAmBT,GAGjBa,EAAO,CACTvM,MAAOA,GAbR0N,EAAA1B,KAAA,EAAA0B,EAAAzB,KAAA,EAiBwBG,IAAMe,OAAOxB,EAAK,CAAEC,QAASA,EAASW,SAjB9D,OAiBOV,EAjBP6B,EAAApB,KAkBCxX,GAjCyB0H,EAiCKqP,EAASU,KAAK/P,QAhC7C,CACHhC,KAAMzB,IACNyD,QAASA,KAYNkR,EAAAzB,KAAA,iBAAAyB,EAAA1B,KAAA,GAAA0B,EAAAlB,GAAAkB,EAAA,SAoBCA,EAAAlB,GAAIX,SACA/W,EAASmI,EAAkByQ,EAAAlB,GAAIX,SAASU,OAExCzX,EAASmI,EAAkB,4DAvBhC,yBAAAyQ,EAAAjB,OAfyB,IAACjQ,GAe1BiR,EAAA,kBAAP,gBAAAG,EAAAC,GAAA,OAAAL,EAAAZ,MAAAC,KAAAzS,YAAA,ICtGSqD,EAAe,SAACzD,GACzB,MAAO,CACHQ,KAAMrB,IACNa,MAAOA,IAIF4G,EAAW,WACpB,sBAAAlM,EAAA+F,OAAA4Q,EAAA,EAAA5Q,CAAA6Q,EAAA1V,EAAA2V,KAAO,SAAAC,EAAO1W,GAAP,IAAA6W,EAAAC,EAAAC,EAAA,OAAAP,EAAA1V,EAAAkW,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACHnX,EArBG,CACH0F,KAAMvB,MAsBA0S,EAHH,GAAAhO,OAGYtH,IAHZ,oBAKGuV,EAAU,CACZM,eAAgB,oBANjBH,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAUwBG,IAAMC,IAAIV,EAAK,CAAEC,QAASA,IAVlD,OAUOC,EAVPE,EAAAO,KAWCxX,GA1BoBwI,EA0BKuO,EAASU,KAAKjP,OAzBxC,CACH9C,KAAMtB,IACNoE,OAAQA,KAYLyO,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAS,GAAAT,EAAA,SAaCA,EAAAS,GAAIX,SACA/W,EAAS2I,EAAasO,EAAAS,GAAIX,SAASU,OAEnCzX,EAAS2I,EAAa,8DAhB3B,yBAAAsO,EAAAU,OAfoB,IAACnP,GAerBkO,EAAA,kBAAP,gBAAAkB,GAAA,OAAAhY,EAAAkY,MAAAC,KAAAzS,YAAA,IA4BS0D,EAAuB,SAACD,GACjC,MAAO,CACHrD,KAAMnB,IACNwE,WAAYA,IAIPE,EAAoB,SAAC/D,GAC9B,MAAO,CACHQ,KAAMlB,IACNU,MAAOA,IAIF6G,EAAgB,SAAChD,GAC1B,sBAAAmP,EAAAvS,OAAA4Q,EAAA,EAAA5Q,CAAA6Q,EAAA1V,EAAA2V,KAAO,SAAA0B,EAAOnY,GAAP,IAAA6W,EAAAC,EAAAW,EAAA,OAAAjB,EAAA1V,EAAAkW,KAAA,SAAAoB,GAAA,cAAAA,EAAAlB,KAAAkB,EAAAjB,MAAA,cACHnX,EArBG,CACH0F,KAAMpB,MAsBAuS,EAHH,GAAAhO,OAGYtH,IAHZ,gBAKGuV,EAAU,CACZM,eAAgB,mBAChBiC,8BAA+B,KAG7B5B,EAAO,CACT1O,WAAYA,GAXbqP,EAAAlB,KAAA,EAAAkB,EAAAjB,KAAA,EAeOG,IAAMgC,KAAKzC,EAAKY,EAAM,CAAEX,QAASA,IAfxC,OAgBC9W,EAASgJ,EAAqBD,IAhB/BqP,EAAAjB,KAAA,iBAAAiB,EAAAlB,KAAA,GAAAkB,EAAAV,GAAAU,EAAA,SAkBCA,EAAAV,GAAIX,SACA/W,EAASiJ,EAAkBmP,EAAAV,GAAIX,SAASU,OAExCzX,EAASiJ,EAAkB,8DArBhC,yBAAAmP,EAAAT,SAAAQ,EAAA,kBAAP,gBAAAN,GAAA,OAAAK,EAAAJ,MAAAC,KAAAzS,YAAA,IAiCS8D,EAA0B,SAACL,GACpC,MAAO,CACHrD,KAAMhB,IACNqE,WAAYA,IAIPM,EAAuB,SAACnE,GACjC,MAAO,CACHQ,KAAMf,IACNO,MAAOA,IAIF8G,EAAmB,SAACjD,GAC7B,sBAAA2P,EAAA/S,OAAA4Q,EAAA,EAAA5Q,CAAA6Q,EAAA1V,EAAA2V,KAAO,SAAAkC,EAAO3Y,GAAP,IAAA6W,EAAAC,EAAAW,EAAA,OAAAjB,EAAA1V,EAAAkW,KAAA,SAAA4B,GAAA,cAAAA,EAAA1B,KAAA0B,EAAAzB,MAAA,cACHnX,EArBG,CACH0F,KAAMjB,MAsBAoS,EAHH,GAAAhO,OAGYtH,IAHZ,gBAKGuV,EAAU,CACZM,eAAgB,mBAChBiC,8BAA+B,KAG7B5B,EAAO,CACT1O,WAAYA,GAXb6P,EAAA1B,KAAA,EAAA0B,EAAAzB,KAAA,EAeOG,IAAMe,OAAOxB,EAAK,CAAEC,QAASA,EAASW,SAf7C,OAgBCzX,EAASoJ,EAAwBL,IAhBlC6P,EAAAzB,KAAA,iBAAAyB,EAAA1B,KAAA,GAAA0B,EAAAlB,GAAAkB,EAAA,SAkBCA,EAAAlB,GAAIX,SACA/W,EAASqJ,EAAqBuP,EAAAlB,GAAIX,SAASU,OAE3CzX,EAASqJ,EAAqB,iEArBnC,yBAAAuP,EAAAjB,SAAAgB,EAAA,kBAAP,gBAAAJ,GAAA,OAAAG,EAAAZ,MAAAC,KAAAzS,YAAA,IAiCSiE,EAA4B,SAACR,GACtC,MAAO,CACHrD,KAAMb,IACNkE,WAAYA,IAIPS,EAAyB,SAACtE,GACnC,MAAO,CACHQ,KAAMZ,IACNI,MAAOA,IAIF+G,EAAqB,SAAClD,GAC/B,sBAAAmQ,EAAAvT,OAAA4Q,EAAA,EAAA5Q,CAAA6Q,EAAA1V,EAAA2V,KAAO,SAAA0C,EAAOnZ,EAA8C2W,GAArD,IAAAC,EAAAC,EAAAC,EAAAW,EAAA,OAAAjB,EAAA1V,EAAAkW,KAAA,SAAAoC,GAAA,cAAAA,EAAAlC,KAAAkC,EAAAjC,MAAA,UACGP,EAAiBD,IAAWvO,YAAYG,iBAAiB5H,SAC/DX,EAtBG,CACH0F,KAAMd,MAuBAiS,EAJH,GAAAhO,OAIYtH,IAJZ,yBAMGuV,EAAU,CACZM,eAAgB,mBAChBiC,8BAA+B,IAC/BhC,kBAAmBT,GAGjBa,EAAO,CACT1O,WAAYA,GAGO,UAAnB6N,EAhBD,CAAAwC,EAAAjC,KAAA,QAiBCnX,EAASuJ,EAA0BR,IAjBpCqQ,EAAAjC,KAAA,uBAAAiC,EAAAlC,KAAA,EAAAkC,EAAAjC,KAAA,GAoBWG,IAAMgC,KAAKzC,EAAKY,EAAM,CAAEX,QAASA,IApB5C,QAqBK9W,EAASuJ,EAA0BR,IArBxCqQ,EAAAjC,KAAA,iBAAAiC,EAAAlC,KAAA,GAAAkC,EAAA1B,GAAA0B,EAAA,SAuBKA,EAAA1B,GAAIX,SACA/W,EAASwJ,EAAuB4P,EAAA1B,GAAIX,SAASU,OAE7CzX,EAASwJ,EAAuB,mEA1BzC,yBAAA4P,EAAAzB,SAAAwB,EAAA,kBAAP,gBAAAX,EAAAM,GAAA,OAAAI,EAAApB,MAAAC,KAAAzS,YAAA,ICjLJvG,EAAAC,EAAAC,EAAA,sBAAA0b,IAAA5b,EAAAC,EAAAC,EAAA,sBAAA2b,IAAA7b,EAAAC,EAAAC,EAAA,sBAAA4b,IAAA9b,EAAAC,EAAAC,EAAA,sBAAA6b,IAAA/b,EAAAC,EAAAC,EAAA,sBAAA8b,IAAAhc,EAAAC,EAAAC,EAAA,sBAAA+b,IAAAjc,EAAAC,EAAAC,EAAA,sBAAAgc,IAAAlc,EAAAC,EAAAC,EAAA,sBAAAic,IAAAnc,EAAAC,EAAAC,EAAA,sBAAAkc,IAAApc,EAAAC,EAAAC,EAAA,sBAAAmc,IAAArc,EAAAC,EAAAC,EAAA,sBAAAoc,IAAAtc,EAAAC,EAAAC,EAAA,sBAAAqc,IAAAvc,EAAAC,EAAAC,EAAA,sBAAAsc,IAAAxc,EAAAC,EAAAC,EAAA,sBAAAuc,IAAAzc,EAAAC,EAAAC,EAAA,sBAAAwc,IAAA1c,EAAAC,EAAAC,EAAA,sBAAAyc,IAAA3c,EAAAC,EAAAC,EAAA,sBAAA0c,wBCCAza,EAAAC,QAAA,CAAkByO,MAAA,0BAAAT,kBAAA,sCAAAL,iBAAA,qCAAAyB,IAAA,wBAAAL,cAAA,uDCAlBhP,EAAAC,QAAA,CAAkBkR,WAAA,+BAAAE,KAAA,yBAAAD,MAAA,0BAAAsJ,KAAA,8CCAlB1a,EAAAC,QAAA,CAAkB2Q,QAAA,yBAAA8J,KAAA,sBAAAha,KAAA,sBAAAD,KAAA,sBAAAka,YAAA,kDCAlB3a,EAAAC,QAAA,CAAkByR,MAAA,qBAAAC,QAAA,uBAAAlR,KAAA,sDCDlB,IAAAxC,EAAAJ,EAAA,GAAAK,EAAAL,EAAAM,EAAAF,GAAA2c,EAAA/c,EAAA,KAAAgd,EAAAhd,EAAAM,EAAAyc,GAaerL,IATU,kBACrBrR,EAAA0B,EAAAC,cAAA,OAAK6N,UAAWC,IAAIxN,mBAChBjC,EAAA0B,EAAAC,cAAA,YACA3B,EAAA0B,EAAAC,cAAA,YACA3B,EAAA0B,EAAAC,cAAA,YACA3B,EAAA0B,EAAAC,cAAA,4JCLFib,EAAuBrc,wBAAc,IAE9Bsc,EAAmB,SAAArc,GAAkB,IAAfG,EAAeH,EAAfG,SAEzBmc,EAAU,kBAAMxI,OAAOC,WAAa,KACpCwI,EAAmB,kBAAMzI,OAAOC,YAAc,KAAOD,OAAOC,WAAa,KACzEyI,EAAoB,kBAAM1I,OAAOC,YAAc,KAAOD,OAAOC,YAAcD,OAAOC,WAAa,MAC/FtC,EAAY,kBAAMqC,OAAOC,YAAc,MALCxH,EAOpBC,mBAASsH,OAAOC,YAPItH,EAAA1G,OAAA0W,EAAA,EAAA1W,CAAAwG,EAAA,GAOvCmQ,EAPuCjQ,EAAA,GAOhCkQ,EAPgClQ,EAAA,GAAAI,EAQlBL,mBAASsH,OAAO8I,aARE9P,EAAA/G,OAAA0W,EAAA,EAAA1W,CAAA8G,EAAA,GAQvCgQ,EARuC/P,EAAA,GAQ/BgQ,EAR+BhQ,EAAA,GAAAG,EASpBT,mBAAS8P,KATWpP,EAAAnH,OAAA0W,EAAA,EAAA1W,CAAAkH,EAAA,GASvC8P,EATuC7P,EAAA,GAShC8P,EATgC9P,EAAA,GAAAG,EAUFb,mBAAS+P,KAVPjP,EAAAvH,OAAA0W,EAAA,EAAA1W,CAAAsH,EAAA,GAUvC4P,EAVuC3P,EAAA,GAUvB4P,EAVuB5P,EAAA,GAAAG,EAWAjB,mBAASgQ,KAXT9O,EAAA3H,OAAA0W,EAAA,EAAA1W,CAAA0H,EAAA,GAWvC0P,EAXuCzP,EAAA,GAWtB0P,EAXsB1P,EAAA,GAAAG,EAYhBrB,mBAASiF,KAZO3D,EAAA/H,OAAA0W,EAAA,EAAA1W,CAAA8H,EAAA,GAYvCwP,EAZuCvP,EAAA,GAY9BwP,EAZ8BxP,EAAA,GAaxCmG,EAAqB,WACvB0I,EAAS7I,OAAOC,YAChB+I,EAAUhJ,OAAO8I,aACjBI,EAASV,KACTY,EAAkBX,KAClBa,EAAmBZ,KACnBc,EAAW7L,MAaf,OAVAxD,oBAAU,WAON,OANA6F,OAAOI,iBACH,SACAC,IAAS,WACLF,KACD,MAEA,kBAAMH,OAAOM,oBAAoB,SAAUH,KACnD,IAGCsJ,EAAArc,EAAAC,cAACib,EAAgBhb,SAAjB,CAA0BC,MAAO,CAAEqb,QAAOG,SAAQE,QAAOE,iBAAgBE,kBAAiBE,YACrFld,IAKAqd,EAAc,WAAM,IAAAC,EAC8CC,qBAAWtB,GACtF,MAAO,CAAEM,MAFoBe,EACrBf,MACQG,OAFaY,EACdZ,OACSE,MAFKU,EACNV,MACQE,eAFFQ,EACCR,eACiBE,gBAFlBM,EACiBN,gBACkBE,QAFnCI,EACkCJ","file":"js/main.1674fa79.chunk.js","sourcesContent":["import React, { createContext } from 'react';\nimport io from 'socket.io-client';\nimport { WS_BASE } from './config';\nimport { useDispatch } from 'react-redux';\nimport * as actions from './store/actions/index';\n\n\nconst WebSocketContext = createContext(null)\n\nexport { WebSocketContext }\n\nexport default ({ children }) => {\n    let socket;\n    let ws;\n\n    const dispatch = useDispatch();\n\n    const updateLogs = (id, username) => {\n        const payload = {\n            id: id,\n            username: username\n        }\n        socket.emit(\"event://update-logs\", payload);\n    }\n\n    if (!socket) {\n        socket = io.connect(WS_BASE)\n\n        socket.on(\"event://get-logs\", (msg) => {\n            const containerLogs = msg;\n            dispatch(actions.updateContainerLogs(containerLogs));\n        })\n\n        ws = {\n            socket: socket,\n            updateLogs\n        }\n    }\n\n    return (\n        <WebSocketContext.Provider value={ws}>\n            {children}\n        </WebSocketContext.Provider>\n    )\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Layout\":\"Layout_Layout__3Mulu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Loading_Indicator\":\"LoadingIndicator_Loading_Indicator___IiFK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"DrawerToggle\":\"DrawerToggle_DrawerToggle__1gzqg\"};","// Modify these values based on where you're running your application.\n// Format:\n// export const API_BASE = \"http://IP_ADDRESS:PORT/api\";\n// export const WS_BASE = \"http://IP_ADDRESS:PORT\";\n\nexport const API_BASE = \"http://192.168.16.33:5000/api\";\nexport const WS_BASE = \"http://192.168.16.33:5000\";\n\n// export const API_BASE = \"http://localhost:5000/api\";\n// export const WS_BASE = \"http://localhost:5000\";\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Backdrop\":\"Backdrop_Backdrop__2ozUk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"List\":\"NavigationItems_List__2XMpU\",\"Item\":\"NavigationItems_Item__SSp2Z\",\"Link\":\"NavigationItems_Link__1jknP\",\"Name\":\"NavigationItems_Name__3-6P4\",\"active\":\"NavigationItems_active__2VqxM\"};","import { Image, Container, Volume, Connection } from \"../../models/Models\";\n\n// See all available actions\n// Images Action Types\nexport const FETCH_IMAGES_START = 'FETCH_IMAGES_START';\nexport const FETCH_IMAGES_SUCCESS = 'FETCH_IMAGES_SUCCESS';\nexport const FETCH_IMAGES_FAIL = 'FETCH_IMAGES_FAIL';\n\nexport const REMOVE_IMAGES_START = 'REMOVE_IMAGES_START';\nexport const REMOVE_IMAGES_SUCCESS = 'REMOVE_IMAGES_SUCCESS';\nexport const REMOVE_IMAGES_FAIL = 'REMOVE_IMAGES_FAIL';\n\nexport const PRUNE_IMAGES_START = 'PRUNE_IMAGES_START';\nexport const PRUNE_IMAGES_SUCCESS = 'PRUNE_IMAGES_SUCCESS';\nexport const PRUNE_IMAGES_FAIL = 'PRUNE_IMAGES_FAIL';\n\nexport const PULL_IMAGE_START = 'PULL_IMAGE_START';\nexport const PULL_IMAGE_SUCCESS = 'PULL_IMAGE_SUCCESS';\nexport const PULL_IMAGE_FAIL = 'PULL_IMAGE_FAIL';\n\n// Containers Action Types\nexport const FETCH_CONTAINERS_START = 'FETCH_CONTAINERS_START';\nexport const FETCH_CONTAINERS_SUCCESS = 'FETCH_CONTAINERS_SUCCESS';\nexport const FETCH_CONTAINERS_FAIL = 'FETCH_CONTAINERS_FAIL';\n\nexport const REMOVE_CONTAINERS_START = 'REMOVE_CONTAINERS_START';\nexport const REMOVE_CONTAINERS_SUCCESS = 'REMOVE_CONTAINERS_SUCCESS';\nexport const REMOVE_CONTAINERS_FAIL = 'REMOVE_CONTAINERS_FAIL';\n\nexport const UPDATE_CONTAINER_LOG = \"UPDATE_CONTAINER_LOG\";\n\nexport const CONTAINER_RUN_START = 'CONTAINER_RUN_START';\nexport const CONTAINER_RUN_SUCCESS = 'CONTAINER_RUN_SUCCESS';\nexport const CONTAINER_RUN_FAIL = 'CONTAINER_RUN_FAIL';\n\nexport const STOP_CONTAINERS_START = 'STOP_CONTAINERS_START';\nexport const STOP_CONTAINERS_SUCCESS = 'STOP_CONTAINERS_SUCCESS';\nexport const STOP_CONTAINERS_FAIL = 'STOP_CONTAINERS_FAIL';\n\nexport const KILL_CONTAINERS_START = 'KILL_CONTAINERS_START';\nexport const KILL_CONTAINERS_SUCCESS = 'KILL_CONTAINERS_SUCCESS';\nexport const KILL_CONTAINERS_FAIL = 'KILL_CONTAINERS_FAIL';\n\n// Volumes Action Types\nexport const FETCH_VOLUMES_START = 'FETCH_VOLUMES_START';\nexport const FETCH_VOLUMES_SUCCESS = 'FETCH_VOLUMES_SUCCESS';\nexport const FETCH_VOLUMES_FAIL = 'FETCH_VOLUMES_FAIL';\n\nexport const CREATE_VOLUME_START = 'CREATE_VOLUME_START';\nexport const CREATE_VOLUME_SUCCESS = 'CREATE_VOLUME_SUCCESS';\nexport const CREATE_VOLUME_FAIL = 'CREATE_VOLUME_FAIL';\n\nexport const REMOVE_VOLUMES_START = 'REMOVE_VOLUMES_START';\nexport const REMOVE_VOLUMES_SUCCESS = 'REMOVE_VOLUMES_SUCCESS';\nexport const REMOVE_VOLUMES_FAIL = 'REMOVE_VOLUMES_FAIL';\n\n// Connections Action Types\nexport const FETCH_KEY_START = 'FETCH_KEY_START';\nexport const FETCH_KEY_SUCCESS = 'FETCH_KEY_SUCCESS';\nexport const FETCH_KEY_FAIL = 'FETCH_KEY_FAIL';\n\nexport const ADD_CONNECTION_START = 'ADD_CONNECTION_START';\nexport const ADD_CONNECTION_SUCCESS = 'ADD_CONNECTION_SUCCESS';\nexport const ADD_CONNECTION_FAIL = 'ADD_CONNECTION_FAIL';\n\nexport const REMOVE_CONNECTION_START = 'REMOVE_CONNECTION_START';\nexport const REMOVE_CONNECTION_SUCCESS = 'REMOVE_CONNECTION_SUCCESS';\nexport const REMOVE_CONNECTION_FAIL = 'REMOVE_CONNECTION_FAIL';\n\nexport const ACTIVATE_CONNECTION_START = 'ACTIVATE_CONNECTION_START';\nexport const ACTIVATE_CONNECTION_SUCCESS = 'ACTIVATE_CONNECTION_SUCCESS';\nexport const ACTIVATE_CONNECTION_FAIL = 'ACTIVATE_CONNECTION_FAIL';\n\n\n////////////////////////////////////////////////////////////////////////////////////////\n// Images State\nexport interface IImagesState {\n    images: Image[],\n    error: string,\n    loading: boolean\n}\n\n// Images Fetch\nexport interface IFetchImagesStartAction {\n    type: typeof FETCH_IMAGES_START\n}\n\nexport interface IFetchImagesSuccessAction {\n    type: typeof FETCH_IMAGES_SUCCESS,\n    images: Image[]\n}\n\nexport interface IFetchImagesFailAction {\n    type: typeof FETCH_IMAGES_FAIL,\n    error: string\n}\n\nexport type FetchImagesTypes = IFetchImagesStartAction | IFetchImagesSuccessAction | IFetchImagesFailAction;\n\n// Images Remove\nexport interface IRemoveImagesStartAction {\n    type: typeof REMOVE_IMAGES_START\n}\n\nexport interface IRemoveImagesSuccessAction {\n    type: typeof REMOVE_IMAGES_SUCCESS,\n    images: Image[]\n}\n\nexport interface IRemoveImagesFailAction {\n    type: typeof REMOVE_IMAGES_FAIL,\n    error: string\n}\n\nexport type RemoveImagesTypes = IRemoveImagesStartAction | IRemoveImagesSuccessAction | IRemoveImagesFailAction;\n\n// Images Prune\nexport interface IPruneImagesStartAction {\n    type: typeof PRUNE_IMAGES_START\n}\n\nexport interface IPruneImagesSuccessAction {\n    type: typeof PRUNE_IMAGES_SUCCESS,\n    images: Image[]\n}\n\nexport interface IPruneImagesFailAction {\n    type: typeof PRUNE_IMAGES_FAIL,\n    error: string\n}\n\nexport type PruneImagesTypes = IPruneImagesStartAction | IPruneImagesSuccessAction | IPruneImagesFailAction;\n\n// Image Pull\nexport interface IPullImageStartAction {\n    type: typeof PULL_IMAGE_START\n}\n\nexport interface IPullImageSuccessAction {\n    type: typeof PULL_IMAGE_SUCCESS,\n    images: Image[]\n}\n\nexport interface IPullImageFailAction {\n    type: typeof PULL_IMAGE_FAIL,\n    error: string\n}\n\nexport type PullImageTypes = IPullImageStartAction | IPullImageSuccessAction | IPullImageFailAction;\n\n\n////////////////////////////////////////////////////////////////////////////////////////\n// Containers State\nexport interface IContainersState {\n    containers: Container[],\n    error: string,\n    loading: boolean,\n    containerLogs: any\n}\n\n// Containers Fetch\nexport interface IFetchContainersStartAction {\n    type: typeof FETCH_CONTAINERS_START\n}\n\nexport interface IFetchContainersSuccessAction {\n    type: typeof FETCH_CONTAINERS_SUCCESS,\n    containers: Container[]\n}\n\nexport interface IFetchContainersFailAction {\n    type: typeof FETCH_CONTAINERS_FAIL,\n    error: string\n}\n\nexport type FetchContainersTypes = IFetchContainersStartAction | IFetchContainersSuccessAction | IFetchContainersFailAction;\n\n// Containers Remove\nexport interface IRemoveContainersStartAction {\n    type: typeof REMOVE_CONTAINERS_START\n}\n\nexport interface IRemoveContainersSuccessAction {\n    type: typeof REMOVE_CONTAINERS_SUCCESS,\n    containers: Container[]\n}\n\nexport interface IRemoveContainersFailAction {\n    type: typeof REMOVE_CONTAINERS_FAIL,\n    error: string\n}\n\nexport type RemoveContainersTypes = IRemoveContainersStartAction | IRemoveContainersSuccessAction | IRemoveContainersFailAction;\n\n//  Container Log Update\nexport interface IUpdateContainerLogsAction {\n    type: typeof UPDATE_CONTAINER_LOG,\n    containerLogs: string\n}\n\n// Container Run\nexport interface IContainerRunStartAction {\n    type: typeof CONTAINER_RUN_START\n}\n\nexport interface IContainerRunSuccessAction {\n    type: typeof CONTAINER_RUN_SUCCESS,\n    containers: Container[]\n}\n\nexport interface IContainerRunFailAction {\n    type: typeof CONTAINER_RUN_FAIL,\n    error: string\n}\n\nexport type ContainerRunTypes = IContainerRunStartAction | IContainerRunSuccessAction | IContainerRunFailAction;\n\n// Containers Stop\nexport interface IStopContainersStartAction {\n    type: typeof STOP_CONTAINERS_START\n}\n\nexport interface IStopContainersSuccessAction {\n    type: typeof STOP_CONTAINERS_SUCCESS,\n    containers: Container[]\n}\n\nexport interface IStopContainersFailAction {\n    type: typeof STOP_CONTAINERS_FAIL,\n    error: string\n}\n\nexport type StopContainersTypes = IStopContainersStartAction | IStopContainersSuccessAction | IStopContainersFailAction;\n\n// Containers Kill\nexport interface IKillContainersStartAction {\n    type: typeof KILL_CONTAINERS_START\n}\n\nexport interface IKillContainersSuccessAction {\n    type: typeof KILL_CONTAINERS_SUCCESS,\n    containers: Container[]\n}\n\nexport interface IKillContainersFailAction {\n    type: typeof KILL_CONTAINERS_FAIL,\n    error: string\n}\n\nexport type KillContainersTypes = IKillContainersStartAction | IKillContainersSuccessAction | IKillContainersFailAction;\n\n\n////////////////////////////////////////////////////////////////////////////////////////\n// Volumes State\nexport interface IVolumesState {\n    volumes: Volume[],\n    error: string,\n    loading: boolean\n}\n\n// Volumes Fetch\nexport interface IFetchVolumesStartAction {\n    type: typeof FETCH_VOLUMES_START\n}\n\nexport interface IFetchVolumesSuccessAction {\n    type: typeof FETCH_VOLUMES_SUCCESS,\n    volumes: Volume[]\n}\n\nexport interface IFetchVolumesFailAction {\n    type: typeof FETCH_VOLUMES_FAIL,\n    error: string\n}\n\nexport type FetchVolumesTypes = IFetchVolumesStartAction | IFetchVolumesSuccessAction | IFetchVolumesFailAction;\n\n// Volume Create\nexport interface ICreateVolumeStartAction {\n    type: typeof CREATE_VOLUME_START\n}\n\nexport interface ICreateVolumeSuccessAction {\n    type: typeof CREATE_VOLUME_SUCCESS,\n    volumes: Volume[]\n}\n\nexport interface ICreateVolumeFailAction {\n    type: typeof CREATE_VOLUME_FAIL,\n    error: string\n}\n\nexport type CreateVolumeTypes = ICreateVolumeStartAction | ICreateVolumeSuccessAction | ICreateVolumeFailAction;\n\n// Volumes Remove\nexport interface IRemoveVolumesStartAction {\n    type: typeof REMOVE_VOLUMES_START\n}\n\nexport interface IRemoveVolumesSuccessAction {\n    type: typeof REMOVE_VOLUMES_SUCCESS,\n    volumes: Volume[]\n}\n\nexport interface IRemoveVolumesFailAction {\n    type: typeof REMOVE_VOLUMES_FAIL,\n    error: string\n}\n\nexport type RemoveVolumesTypes = IRemoveVolumesStartAction | IRemoveVolumesSuccessAction | IRemoveVolumesFailAction;\n\n////////////////////////////////////////////////////////////////////////////////////////\n// Connections State\nexport interface IConnectionsState {\n    connections: Connection[],\n    sshKey: string,\n    activeConnection: Connection,\n    error: string,\n    loading: boolean\n}\n\n// Key Fetch\nexport interface IFetchKeyStartAction {\n    type: typeof FETCH_KEY_START\n}\n\nexport interface IFetchKeySuccessAction {\n    type: typeof FETCH_KEY_SUCCESS,\n    sshKey: string\n}\n\nexport interface IFetchKeyFailAction {\n    type: typeof FETCH_KEY_FAIL,\n    error: string\n}\n\nexport type FetchKeyTypes = IFetchKeyStartAction | IFetchKeySuccessAction | IFetchKeyFailAction;\n\n// Connection Add\nexport interface IAddConnectionStartAction {\n    type: typeof ADD_CONNECTION_START\n}\n\nexport interface IAddConnectionSuccessAction {\n    type: typeof ADD_CONNECTION_SUCCESS,\n    connection: Connection\n}\n\nexport interface IAddConnectionFailAction {\n    type: typeof ADD_CONNECTION_FAIL,\n    error: string\n}\n\nexport type AddConnectionTypes = IAddConnectionStartAction | IAddConnectionSuccessAction | IAddConnectionFailAction;\n\n// Connection Remove\nexport interface IRemoveConnectionStartAction {\n    type: typeof REMOVE_CONNECTION_START\n}\n\nexport interface IRemoveConnectionSuccessAction {\n    type: typeof REMOVE_CONNECTION_SUCCESS,\n    connection: Connection\n}\n\nexport interface IRemoveConnectionFailAction {\n    type: typeof REMOVE_CONNECTION_FAIL,\n    error: string\n}\n\nexport type RemoveConnectionTypes = IRemoveConnectionStartAction | IRemoveConnectionSuccessAction | IRemoveConnectionFailAction;\n\n// Connection Activate\nexport interface IActivateConnectionStartAction {\n    type: typeof ACTIVATE_CONNECTION_START\n}\n\nexport interface IActivateConnectionSuccessAction {\n    type: typeof ACTIVATE_CONNECTION_SUCCESS,\n    connection: Connection\n}\n\nexport interface IActivateConnectionFailAction {\n    type: typeof ACTIVATE_CONNECTION_FAIL,\n    error: string\n}\n\nexport type ActivateConnectionTypes = IActivateConnectionStartAction | IActivateConnectionSuccessAction | IActivateConnectionFailAction;\n\n\n////////////////////////////////////////////////////////////////////////////////////////\n","import { createStore, applyMiddleware, compose, combineReducers, Store } from 'redux';\nimport thunk from 'redux-thunk';\nimport { persistReducer } from 'redux-persist';\n// defaults to localStorage for web\nimport storage from 'redux-persist/lib/storage';\n// Connected React Router\nimport { connectRouter } from 'connected-react-router';\nimport { createBrowserHistory } from 'history';\nimport { routerMiddleware } from 'connected-react-router';\n\n// Reducers\nimport imagesReducer from './reducers/images';\nimport containersReducer from './reducers/containers';\nimport volumesReducer from './reducers/volumes';\nimport connectionsReducer from './reducers/connections';\n\n\ndeclare global {\n    interface Window {\n        __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\n    }\n}\n\nconst composeEnhancers = process.env.NODE_ENV === 'development' ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ as typeof compose : null || compose;\n\nconst persistConfig = {\n    key: 'root',\n    storage,\n}\n\nconst rootReducer = (history) => combineReducers({\n    images: imagesReducer,\n    containers: containersReducer,\n    volumes: volumesReducer,\n    connections: connectionsReducer,\n    router: connectRouter(history),\n});\n\nexport const history = createBrowserHistory();\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer(history));\n\n// export type AppState = ReturnType<typeof rootReducer>;\nexport type AppState = any;\n\nexport function configureStore(): Store<AppState> {\n    const store = createStore(persistedReducer, composeEnhancers(\n        applyMiddleware(\n            routerMiddleware(history),\n            thunk\n        )\n    ));\n\n    return store;\n}\n","import {\n    IImagesState,\n\n    FETCH_IMAGES_START, FETCH_IMAGES_SUCCESS, FETCH_IMAGES_FAIL,\n    IFetchImagesStartAction, IFetchImagesSuccessAction, IFetchImagesFailAction,\n    FetchImagesTypes,\n\n    REMOVE_IMAGES_START, REMOVE_IMAGES_SUCCESS, REMOVE_IMAGES_FAIL,\n    IRemoveImagesStartAction, IRemoveImagesSuccessAction, IRemoveImagesFailAction,\n    RemoveImagesTypes,\n\n    PRUNE_IMAGES_START, PRUNE_IMAGES_SUCCESS, PRUNE_IMAGES_FAIL,\n    IPruneImagesStartAction, IPruneImagesSuccessAction, IPruneImagesFailAction,\n    PruneImagesTypes,\n\n    PULL_IMAGE_START, PULL_IMAGE_SUCCESS, PULL_IMAGE_FAIL,\n    IPullImageStartAction, IPullImageSuccessAction, IPullImageFailAction,\n    PullImageTypes,\n} from '../actions/actionTypes';\n\n\nconst initialState: IImagesState = {\n    images: [],\n    error: '',\n    loading: false,\n};\n\n// Fetch\nconst fetchImagesStart = (state: IImagesState, action: IFetchImagesStartAction): IImagesState => {\n    return { ...state, error: '', loading: true }\n};\n\nconst fetchImagesSuccess = (state: IImagesState, action: IFetchImagesSuccessAction): IImagesState => {\n    return { ...state, images: action.images, error: '', loading: false }\n};\n\nconst fetchImagesFail = (state: IImagesState, action: IFetchImagesFailAction): IImagesState => {\n    return { ...state, error: action.error, loading: false }\n};\n\n// Remove\nconst removeImagesStart = (state: IImagesState, action: IRemoveImagesStartAction): IImagesState => {\n    return { ...state, error: '', loading: true }\n};\n\nconst removeImagesSuccess = (state: IImagesState, action: IRemoveImagesSuccessAction): IImagesState => {\n    return { ...state, images: action.images, error: '', loading: false }\n};\n\nconst removeImagesFail = (state: IImagesState, action: IRemoveImagesFailAction): IImagesState => {\n    return { ...state, error: action.error, loading: false }\n};\n\n// Pull\nconst pullImageStart = (state: IImagesState, action: IPullImageStartAction): IImagesState => {\n    return { ...state, error: '', loading: true }\n};\n\nconst pullImageSuccess = (state: IImagesState, action: IPullImageSuccessAction): IImagesState => {\n    return { ...state, images: action.images, error: '', loading: false }\n};\n\nconst pullImageFail = (state: IImagesState, action: IPullImageFailAction): IImagesState => {\n    return { ...state, error: action.error, loading: false }\n};\n\n// Prune\nconst pruneImagesStart = (state: IImagesState, action: IPruneImagesStartAction): IImagesState => {\n    return { ...state, error: '', loading: true }\n};\n\nconst pruneImagesSuccess = (state: IImagesState, action: IPruneImagesSuccessAction): IImagesState => {\n    return { ...state, images: action.images, error: '', loading: false }\n};\n\nconst pruneImagesFail = (state: IImagesState, action: IPruneImagesFailAction): IImagesState => {\n    return { ...state, error: action.error, loading: false }\n};\n\nconst reducer = (state = initialState, action: FetchImagesTypes | RemoveImagesTypes | PruneImagesTypes | PullImageTypes): IImagesState => {\n    switch (action.type) {\n        case FETCH_IMAGES_START: return fetchImagesStart(state, action);\n        case FETCH_IMAGES_SUCCESS: return fetchImagesSuccess(state, action);\n        case FETCH_IMAGES_FAIL: return fetchImagesFail(state, action);\n\n        case REMOVE_IMAGES_START: return removeImagesStart(state, action);\n        case REMOVE_IMAGES_SUCCESS: return removeImagesSuccess(state, action);\n        case REMOVE_IMAGES_FAIL: return removeImagesFail(state, action);\n\n        case PULL_IMAGE_START: return pullImageStart(state, action);\n        case PULL_IMAGE_SUCCESS: return pullImageSuccess(state, action);\n        case PULL_IMAGE_FAIL: return pullImageFail(state, action);\n\n        case PRUNE_IMAGES_START: return pruneImagesStart(state, action);\n        case PRUNE_IMAGES_SUCCESS: return pruneImagesSuccess(state, action);\n        case PRUNE_IMAGES_FAIL: return pruneImagesFail(state, action);\n\n        default: return state;\n    }\n};\n\nexport default reducer;\n","import {\n    IContainersState,\n\n    FETCH_CONTAINERS_START, FETCH_CONTAINERS_SUCCESS, FETCH_CONTAINERS_FAIL,\n    IFetchContainersStartAction, IFetchContainersSuccessAction, IFetchContainersFailAction,\n    FetchContainersTypes,\n\n    REMOVE_CONTAINERS_START, REMOVE_CONTAINERS_SUCCESS, REMOVE_CONTAINERS_FAIL,\n    IRemoveContainersStartAction, IRemoveContainersSuccessAction, IRemoveContainersFailAction,\n    RemoveContainersTypes,\n\n    STOP_CONTAINERS_START, STOP_CONTAINERS_SUCCESS, STOP_CONTAINERS_FAIL,\n    IStopContainersStartAction, IStopContainersSuccessAction, IStopContainersFailAction,\n    StopContainersTypes,\n\n    KILL_CONTAINERS_START, KILL_CONTAINERS_SUCCESS, KILL_CONTAINERS_FAIL,\n    IKillContainersStartAction, IKillContainersSuccessAction, IKillContainersFailAction,\n    KillContainersTypes,\n\n    UPDATE_CONTAINER_LOG, IUpdateContainerLogsAction,\n\n    CONTAINER_RUN_START, CONTAINER_RUN_SUCCESS, CONTAINER_RUN_FAIL,\n    IContainerRunStartAction, IContainerRunSuccessAction, IContainerRunFailAction,\n    ContainerRunTypes,\n} from '../actions/actionTypes';\n\n\nconst initialState: IContainersState = {\n    containers: [],\n    error: '',\n    loading: false,\n    containerLogs: [],\n};\n\n// Fetch Containers\nconst fetchContainersStart = (state: IContainersState, action: IFetchContainersStartAction): IContainersState => {\n    return { ...state, error: '', loading: true }\n};\n\nconst fetchContainersSuccess = (state: IContainersState, action: IFetchContainersSuccessAction): IContainersState => {\n    return { ...state, containers: action.containers, error: '', loading: false }\n};\n\nconst fetchContainersFail = (state: IContainersState, action: IFetchContainersFailAction): IContainersState => {\n    return { ...state, error: action.error, loading: false }\n};\n\n// Remove Containers\nconst removeContainersStart = (state: IContainersState, action: IRemoveContainersStartAction): IContainersState => {\n    return { ...state, error: '', loading: true }\n};\n\nconst removeContainersSuccess = (state: IContainersState, action: IRemoveContainersSuccessAction): IContainersState => {\n    return { ...state, containers: action.containers, error: '', loading: false }\n};\n\nconst removeContainersFail = (state: IContainersState, action: IRemoveContainersFailAction): IContainersState => {\n    return { ...state, error: action.error, loading: false }\n};\n\n// Stop Containers\nconst stopContainersStart = (state: IContainersState, action: IStopContainersStartAction): IContainersState => {\n    return { ...state, error: '', loading: true }\n};\n\nconst stopContainersSuccess = (state: IContainersState, action: IStopContainersSuccessAction): IContainersState => {\n    return { ...state, containers: action.containers, error: '', loading: false }\n};\n\nconst stopContainersFail = (state: IContainersState, action: IStopContainersFailAction): IContainersState => {\n    return { ...state, error: action.error, loading: false }\n};\n\n// Kill Containers\nconst killContainersStart = (state: IContainersState, action: IKillContainersStartAction): IContainersState => {\n    return { ...state, error: '', loading: true }\n};\n\nconst killContainersSuccess = (state: IContainersState, action: IKillContainersSuccessAction): IContainersState => {\n    return { ...state, containers: action.containers, error: '', loading: false }\n};\n\nconst killContainersFail = (state: IContainersState, action: IKillContainersFailAction): IContainersState => {\n    return { ...state, error: action.error, loading: false }\n};\n\n// Update Logs\nconst updateContainerLogs = (state: IContainersState, action: IUpdateContainerLogsAction): IContainersState => {\n    return { ...state, containerLogs: action.containerLogs, loading: false }\n};\n\n// Container Run\nconst containerRunStart = (state: IContainersState, action: IContainerRunStartAction): IContainersState => {\n    return { ...state, error: '', loading: true }\n};\n\nconst containerRunSuccess = (state: IContainersState, action: IContainerRunSuccessAction): IContainersState => {\n    return { ...state, containers: action.containers, error: '', loading: false }\n};\n\nconst containerRunFail = (state: IContainersState, action: IContainerRunFailAction): IContainersState => {\n    return { ...state, error: action.error, loading: false }\n};\n\nconst reducer = (state = initialState, action: FetchContainersTypes | RemoveContainersTypes | IUpdateContainerLogsAction |\n    ContainerRunTypes | StopContainersTypes | KillContainersTypes): IContainersState => {\n    switch (action.type) {\n        case FETCH_CONTAINERS_START: return fetchContainersStart(state, action);\n        case FETCH_CONTAINERS_SUCCESS: return fetchContainersSuccess(state, action);\n        case FETCH_CONTAINERS_FAIL: return fetchContainersFail(state, action);\n\n        case REMOVE_CONTAINERS_START: return removeContainersStart(state, action);\n        case REMOVE_CONTAINERS_SUCCESS: return removeContainersSuccess(state, action);\n        case REMOVE_CONTAINERS_FAIL: return removeContainersFail(state, action);\n\n        case STOP_CONTAINERS_START: return stopContainersStart(state, action);\n        case STOP_CONTAINERS_SUCCESS: return stopContainersSuccess(state, action);\n        case STOP_CONTAINERS_FAIL: return stopContainersFail(state, action);\n\n        case KILL_CONTAINERS_START: return killContainersStart(state, action);\n        case KILL_CONTAINERS_SUCCESS: return killContainersSuccess(state, action);\n        case KILL_CONTAINERS_FAIL: return killContainersFail(state, action);\n\n        case UPDATE_CONTAINER_LOG: return updateContainerLogs(state, action);\n\n        case CONTAINER_RUN_START: return containerRunStart(state, action);\n        case CONTAINER_RUN_SUCCESS: return containerRunSuccess(state, action);\n        case CONTAINER_RUN_FAIL: return containerRunFail(state, action);\n\n        default: return state;\n    }\n};\n\nexport default reducer;\n","import {\n    IVolumesState,\n\n    FETCH_VOLUMES_START, FETCH_VOLUMES_SUCCESS, FETCH_VOLUMES_FAIL,\n    IFetchVolumesStartAction, IFetchVolumesSuccessAction, IFetchVolumesFailAction,\n    FetchVolumesTypes,\n\n    CREATE_VOLUME_START, CREATE_VOLUME_SUCCESS, CREATE_VOLUME_FAIL,\n    ICreateVolumeStartAction, ICreateVolumeSuccessAction, ICreateVolumeFailAction,\n    CreateVolumeTypes,\n\n    REMOVE_VOLUMES_START, REMOVE_VOLUMES_SUCCESS, REMOVE_VOLUMES_FAIL,\n    IRemoveVolumesStartAction, IRemoveVolumesSuccessAction, IRemoveVolumesFailAction,\n    RemoveVolumesTypes,\n} from '../actions/actionTypes';\n\n\nconst initialState: IVolumesState = {\n    volumes: [],\n    error: '',\n    loading: false,\n};\n\n// Fetch\nconst fetchVolumesStart = (state: IVolumesState, action: IFetchVolumesStartAction): IVolumesState => {\n    return { ...state, error: '', loading: true }\n};\n\nconst fetchVolumesSuccess = (state: IVolumesState, action: IFetchVolumesSuccessAction): IVolumesState => {\n    return { ...state, volumes: action.volumes, error: '', loading: false }\n};\n\nconst fetchVolumesFail = (state: IVolumesState, action: IFetchVolumesFailAction): IVolumesState => {\n    return { ...state, error: action.error, loading: false }\n};\n\n// Create\nconst createVolumeStart = (state: IVolumesState, action: ICreateVolumeStartAction): IVolumesState => {\n    return { ...state, error: '', loading: true }\n};\n\nconst createVolumeSuccess = (state: IVolumesState, action: ICreateVolumeSuccessAction): IVolumesState => {\n    return { ...state, volumes: action.volumes, error: '', loading: false }\n};\n\nconst createVolumeFail = (state: IVolumesState, action: ICreateVolumeFailAction): IVolumesState => {\n    return { ...state, error: action.error, loading: false }\n};\n\n// Remove\nconst removeVolumesStart = (state: IVolumesState, action: IRemoveVolumesStartAction): IVolumesState => {\n    return { ...state, error: '', loading: true }\n};\n\nconst removeVolumesSuccess = (state: IVolumesState, action: IRemoveVolumesSuccessAction): IVolumesState => {\n    return { ...state, volumes: action.volumes, error: '', loading: false }\n};\n\nconst removeVolumesFail = (state: IVolumesState, action: IRemoveVolumesFailAction): IVolumesState => {\n    return { ...state, error: action.error, loading: false }\n};\n\nconst reducer = (state = initialState, action: FetchVolumesTypes | CreateVolumeTypes | RemoveVolumesTypes): IVolumesState => {\n    switch (action.type) {\n        case FETCH_VOLUMES_START: return fetchVolumesStart(state, action);\n        case FETCH_VOLUMES_SUCCESS: return fetchVolumesSuccess(state, action);\n        case FETCH_VOLUMES_FAIL: return fetchVolumesFail(state, action);\n\n        case CREATE_VOLUME_START: return createVolumeStart(state, action);\n        case CREATE_VOLUME_SUCCESS: return createVolumeSuccess(state, action);\n        case CREATE_VOLUME_FAIL: return createVolumeFail(state, action);\n\n        case REMOVE_VOLUMES_START: return removeVolumesStart(state, action);\n        case REMOVE_VOLUMES_SUCCESS: return removeVolumesSuccess(state, action);\n        case REMOVE_VOLUMES_FAIL: return removeVolumesFail(state, action);\n\n        default: return state;\n    }\n};\n\nexport default reducer;\n","import {\n    IConnectionsState,\n\n    FETCH_KEY_START, FETCH_KEY_SUCCESS, FETCH_KEY_FAIL,\n    IFetchKeyStartAction, IFetchKeySuccessAction, IFetchKeyFailAction,\n    FetchKeyTypes,\n\n    ADD_CONNECTION_START, ADD_CONNECTION_SUCCESS, ADD_CONNECTION_FAIL,\n    IAddConnectionStartAction, IAddConnectionSuccessAction, IAddConnectionFailAction,\n    AddConnectionTypes,\n\n    REMOVE_CONNECTION_START, REMOVE_CONNECTION_SUCCESS, REMOVE_CONNECTION_FAIL,\n    IRemoveConnectionStartAction, IRemoveConnectionSuccessAction, IRemoveConnectionFailAction,\n    RemoveConnectionTypes,\n\n    ACTIVATE_CONNECTION_START, ACTIVATE_CONNECTION_SUCCESS, ACTIVATE_CONNECTION_FAIL,\n    IActivateConnectionStartAction, IActivateConnectionSuccessAction, IActivateConnectionFailAction,\n    ActivateConnectionTypes,\n} from '../actions/actionTypes';\n\nconst initialState: IConnectionsState = {\n    connections: [{ username: 'Local', ip: '', podmanSocketPath: '' }],\n    activeConnection: { username: 'Local', ip: '', podmanSocketPath: '' },\n    sshKey: '',\n    error: '',\n    loading: false,\n};\n\n// Fetch\nconst fetchKeyStart = (state: IConnectionsState, action: IFetchKeyStartAction): IConnectionsState => {\n    return { ...state, error: '', loading: true }\n};\n\nconst fetchKeySuccess = (state: IConnectionsState, action: IFetchKeySuccessAction): IConnectionsState => {\n    return { ...state, sshKey: action.sshKey, error: '', loading: false }\n};\n\nconst fetchKeyFail = (state: IConnectionsState, action: IFetchKeyFailAction): IConnectionsState => {\n    return { ...state, error: action.error, loading: false }\n};\n\n// Add\nconst addConnectionStart = (state: IConnectionsState, action: IAddConnectionStartAction): IConnectionsState => {\n    return { ...state, error: '', loading: true }\n};\n\nconst addConnectionSuccess = (state: IConnectionsState, action: IAddConnectionSuccessAction): IConnectionsState => {\n    return {\n        ...state, connections: [...state.connections, action.connection], error: '', loading: false,\n    }\n};\n\nconst addConnectionFail = (state: IConnectionsState, action: IAddConnectionFailAction): IConnectionsState => {\n    return { ...state, error: action.error, loading: false }\n};\n\n// Remove\nconst removeConnectionStart = (state: IConnectionsState, action: IRemoveConnectionStartAction): IConnectionsState => {\n    return { ...state, error: '', loading: true }\n};\n\nconst removeConnectionSuccess = (state: IConnectionsState, action: IRemoveConnectionSuccessAction): IConnectionsState => {\n    return {\n        ...state,\n        connections: state.connections.filter(connection => connection.username !== action.connection.username), error: '', loading: false,\n        activeConnection: (state.activeConnection.username === action.connection.username && state.activeConnection.ip === action.connection.ip) ?\n            { username: '', ip: '', podmanSocketPath: '' }\n            :\n            state.activeConnection\n    }\n};\n\nconst removeConnectionFail = (state: IConnectionsState, action: IRemoveConnectionFailAction): IConnectionsState => {\n    return { ...state, error: action.error, loading: false }\n};\n\n// Activate\nconst activateConnectionStart = (state: IConnectionsState, action: IActivateConnectionStartAction): IConnectionsState => {\n    return { ...state, error: '', loading: true }\n};\n\nconst activateConnectionSuccess = (state: IConnectionsState, action: IActivateConnectionSuccessAction): IConnectionsState => {\n    return { ...state, activeConnection: action.connection }\n};\n\nconst activateConnectionFail = (state: IConnectionsState, action: IActivateConnectionFailAction): IConnectionsState => {\n    return { ...state, error: action.error, loading: false }\n};\n\n// REDUCER\n\nconst reducer = (state = initialState, action: FetchKeyTypes | AddConnectionTypes | RemoveConnectionTypes | ActivateConnectionTypes): IConnectionsState => {\n    switch (action.type) {\n        case FETCH_KEY_START: return fetchKeyStart(state, action);\n        case FETCH_KEY_SUCCESS: return fetchKeySuccess(state, action);\n        case FETCH_KEY_FAIL: return fetchKeyFail(state, action);\n\n        case ADD_CONNECTION_START: return addConnectionStart(state, action);\n        case ADD_CONNECTION_SUCCESS: return addConnectionSuccess(state, action);\n        case ADD_CONNECTION_FAIL: return addConnectionFail(state, action);\n\n        case REMOVE_CONNECTION_START: return removeConnectionStart(state, action);\n        case REMOVE_CONNECTION_SUCCESS: return removeConnectionSuccess(state, action);\n        case REMOVE_CONNECTION_FAIL: return removeConnectionFail(state, action);\n\n        case ACTIVATE_CONNECTION_START: return activateConnectionStart(state, action);\n        case ACTIVATE_CONNECTION_SUCCESS: return activateConnectionSuccess(state, action);\n        case ACTIVATE_CONNECTION_FAIL: return activateConnectionFail(state, action);\n\n        default: return state;\n    }\n};\n\nexport default reducer;\n","export const imagesDataTest = [\n    {\n        \"key\": 0,\n        \"created\": \"6 weeks ago\",\n        \"id\": \"6678c7c2e56c\",\n        \"repository\": \"docker.io/library/nginx\",\n        \"size\": \"131 MB\",\n        \"tag\": \"1.17.10-alpine-perl\"\n    },\n    {\n        \"key\": 1,\n        \"created\": \"3 months ago\",\n        \"id\": \"e7d92cdc71fe\",\n        \"repository\": \"docker.io/library/alpine\",\n        \"size\": \"5.86 MB\",\n        \"tag\": \"latest\"\n    }\n];\n\nexport const containersDataTest = [\n    {\n        key: 0,\n        containerId: \"5ae4a214e530\",\n        image: \"registry.fedoraproject.org/f29/httpd:latest\",\n        command: \"/usr/bin/run-http...\",\n        created: \"4 minutes ago\",\n        ports: \"0.0.0.0:8080->8080/tcp\",\n        names: \"cool_kalam\"\n    },\n    {\n        key: 1,\n        containerId: \"1235ae4a214e530123\",\n        image: \"second.fedoraproject.org/second\",\n        command: \"test/test/usr/bin/run-http...\",\n        created: \"21 minutes ago\",\n        ports: \"1.1.1.1:8080->8080/tcp\",\n        names: \"test_name\"\n    },\n];\n\nexport const volumesDataTest = [\n    {\n        Anonymous: false,\n        CreatedAt: \"2020-12-14T11:56:14.6300363+01:00\",\n        Driver: \"local\",\n        GID: 0,\n        Labels: {},\n        Mountpoint: \"/home/thesis/.local/share/containers/storage/volumes/my-vol-1/_data\",\n        Name: \"my-vol-1\",\n        Options: {},\n        Scope: \"local\",\n        UID: 0\n    },\n    {\n        Anonymous: false,\n        CreatedAt: \"2020-12-14T11:56:20.1633446+01:00\",\n        Driver: \"local\",\n        GID: 0,\n        Labels: {},\n        Mountpoint: \"/home/thesis/.local/share/containers/storage/volumes/my-vol-2/_data\",\n        Name: \"my-vol-2\",\n        Options: {},\n        Scope: \"local\",\n        UID: 0\n    },\n];\n\nexport const test = {\n    username: \"usernameTest2\",\n    ip: \"123.456.789\",\n    podmanSocketPath: \"/run/user/1001/podman/podman.sock\",\n}\nexport const test2 = {\n    username: \"usernameTest222222\",\n    ip: \"987.654.321\",\n    podmanSocketPath: \"/run/user/2222/podman/podman.sock\",\n}\n\nexport const testKey = \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDWVxhhQ8l4D8mWLt61ajuTPUlKCCLyS5bO4iQRMOmYaEd3LoLDQEUxepUqbdrEgQBj1NR+mdAsSq8BmCrmB8Kgi3+Spbd1lci5ZljKYiwhC7BYytQeQAty+yEP+FB05aYy4SgIE9kEDygDhCHTNNLx1oLmCVNVOerGuAB3ovEyeaSFEJHK44/foLVTr9uOYyUoBKJKsDjiIqP4bH9CiVKe0HBsaibzcKnPlNkfYf5xnhUBcGQ7TWm7PQ2d1rw/tsnggk3W+8SF1IH190xi98uus2oo4+5aJZbe0RejJh8UTeXUS+pnaPsZrUo0RX09Mj9PNaPHzrzVuqFsTrr1l0SzQy1404wSYtXtPe00gg0TeMeVu98fXZya7rP479UNJZ+VBPM0nftnBt/0ozAXhGj2drn4ZYjzFwLkHlAPPE5gt5ruJEwxzJ80ZofTLjgfKWcubaynTvB+gmlgropgErvuZmvbmXLZY6YoCKUwh2O4m0J8/fUooQalbi5XisKQHQ0= msafpc@martinpc-virtual-machine\";\n","import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { ThunkDispatch } from 'redux-thunk';\nimport { AnyAction } from 'redux';\nimport * as actions from '../../store/actions/index';\nimport { AppState } from '../../store';\n\nimport copy from \"clipboard-copy\";\n\nimport css from './MenuStyles.module.css';\nimport LoadingIndicator from '../../components/UI/LoadingIndicator/LoadingIndicator';\n\nimport { Connection } from '../../models/Models';\n\nimport Button from '@material-ui/core/Button';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Grid from '@material-ui/core/Grid';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport CastConnectedIcon from '@material-ui/icons/CastConnected';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { Alert, AlertTitle } from '@material-ui/lab';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\n\n\ninterface IMenuConnectionsProps {\n    connections: Connection[],\n    activeConnection: Connection,\n    sshKey: string,\n    fetchKey: any,\n    addConnection: any,\n    removeConnection: any,\n    activateConnection: any,\n    loading: boolean,\n    errorConnections: string,\n}\n\nconst MenuConnections = (props: IMenuConnectionsProps) => {\n    const { sshKey, fetchKey, connections, activeConnection, activateConnection, addConnection, removeConnection, loading, errorConnections } = props\n    const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n\n    const [showError, setShowError] = useState<boolean>(false);\n    const [showBackendError, setShowBackendError] = useState<boolean>(false);\n    const [errorInfo, setErrorInfo] = useState<string>(\"\");\n\n    const [openConnectionModal, setOpenConnectionModal] = useState(false);\n    const [newConnection, setNewConnection] = useState<Connection>({ username: '', ip: '', podmanSocketPath: '' });\n\n    useEffect(() => {\n        fetchKey();\n    }, [fetchKey]);\n\n    useEffect(() => {\n        setShowBackendError(errorConnections.length > 0);\n    }, [errorConnections]);\n\n    const handleConnectionOpen = () => {\n        setOpenConnectionModal(true);\n    };\n\n    const handleConnectionClose = () => {\n        setOpenConnectionModal(false);\n    };\n\n    const onChangeNewUsername = (e) => {\n        setNewConnection({ ...newConnection, username: e.target.value });\n    };\n\n    const onChangeNewIp = (e) => {\n        setNewConnection({ ...newConnection, ip: e.target.value });\n    };\n\n    const onChangeNewPath = (e) => {\n        setNewConnection({ ...newConnection, podmanSocketPath: e.target.value });\n    };\n\n    const handleAddConnection = () => {\n        setOpenConnectionModal(false);\n        if (!newConnection.username || !newConnection.ip || !newConnection.podmanSocketPath ||\n            connections.some(connection => connection.username === newConnection.username)) {\n            handleClose();\n            setErrorInfo(\"Invalid details, please try again.\");\n            setShowError(true);\n            return;\n        }\n        addConnection(newConnection);\n        setNewConnection({ username: '', ip: '', podmanSocketPath: '' });\n    };\n\n    const handleRemoveConnection = (removedConnection: Connection) => {\n        removeConnection(removedConnection);\n    };\n\n    const handleActivateConnection: any = (activatedConnection: Connection) => {\n        activateConnection(activatedConnection);\n    };\n\n    const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleClose = () => {\n        setAnchorEl(null);\n    };\n\n    let connectionItems = null;\n\n    if (connections && connections.length > 0) {\n        connectionItems = <Grid container direction=\"column\">\n            {\n                (connections.map((connection: Connection, i) => {\n                    return <React.Fragment key={connection.ip}>\n                        {< MenuItem\n                            onClick={activeConnection.username !== connection.username ?\n                                () => handleActivateConnection(connection)\n                                :\n                                () => { }}\n                            selected={activeConnection.username === connection.username}>\n                            {connection.username}{connection.username !== \"Local\" && \"@\"}{connection.ip}\n                            {connection.username !== \"Local\" && <DeleteIcon onClick={() => handleRemoveConnection(connection)} color=\"secondary\" className={css.RemoveConnection} />}\n                        </MenuItem>}\n                    </React.Fragment>\n                }))\n            }\n        </Grid >\n    }\n\n    return (\n        <div>\n            <Button variant=\"text\" color=\"primary\" aria-controls=\"simple-menu\" aria-haspopup=\"true\" className={css.ButtonConnections}\n                startIcon={<CastConnectedIcon />}\n                onClick={handleClick}>\n                Connections\n            </Button>\n\n            {\n                showError &&\n                <Alert severity=\"error\" onClose={() => { setShowError(!showError) }}>\n                    <AlertTitle><strong>Error</strong></AlertTitle>\n                    {(errorInfo.length > 0) ?\n                        errorInfo\n                        :\n                        ''\n                    }\n                </Alert>\n            }\n\n            {\n                showBackendError &&\n                <Alert severity=\"error\" onClose={() => { setShowBackendError(!showBackendError) }}>\n                    <AlertTitle><strong>Backend Error</strong></AlertTitle>\n                    {errorConnections.length > 0 &&\n                        <p className={css.Error}>{errorConnections}</p>\n                    }\n                </Alert>\n            }\n\n            <Menu\n                id=\"simple-menu\"\n                anchorEl={anchorEl}\n                keepMounted\n                open={Boolean(anchorEl)}\n                onClose={handleClose}\n            >\n                <MenuItem onClick={handleConnectionOpen}><AddCircleIcon color=\"primary\" className={css.ConnectionAdd} />Add Connection</MenuItem>\n                <Dialog open={openConnectionModal} onClose={handleConnectionClose} aria-labelledby=\"form-dialog-title\">\n                    <DialogTitle id=\"form-dialog-title\">New Connection</DialogTitle>\n                    <DialogContent>\n                        <Grid>\n                            Make sure you have a Podman Socket Service running on your machine.\n                            You can verify that the socket is listening with Podman command:<br></br> <b>podman --remote info</b>\n                        </Grid>\n                        <Grid><br></br>\n                            Please add this ssh key to the authorized_keys file in your .ssh folder:\n                        </Grid>\n                        {sshKey ?\n                            <Button\n                                className={css.Key}\n                                variant=\"contained\"\n                                color=\"primary\"\n                                onClick={() => copy(sshKey)}\n                            >\n                                Copy Key\n                    </Button>\n                            :\n                            <LoadingIndicator />\n                        }\n\n                        <Grid>\n                            <br></br>Enter the following details:\n                        </Grid>\n                        <TextField\n                            autoFocus\n                            margin=\"dense\"\n                            id=\"name\"\n                            label=\"Username\"\n                            type=\"text\"\n                            fullWidth\n                            onChange={onChangeNewUsername}\n                        />\n                        <TextField\n                            autoFocus\n                            margin=\"dense\"\n                            id=\"name\"\n                            label=\"IP Address\"\n                            type=\"text\"\n                            fullWidth\n                            onChange={onChangeNewIp}\n                        />\n                        <TextField\n                            autoFocus\n                            margin=\"dense\"\n                            id=\"name\"\n                            label=\"Path to Podman Socket (example: /run/user/1001/podman/podman.sock)\"\n                            type=\"text\"\n                            fullWidth\n                            onChange={onChangeNewPath}\n                        />\n                    </DialogContent>\n                    <DialogActions>\n                        <Button onClick={handleAddConnection} color=\"primary\">\n                            Finish\n                            </Button>\n                    </DialogActions>\n                </Dialog>\n                {connectionItems}\n            </Menu>\n        </div >\n    )\n}\n\nconst mapStateToProps = (state: AppState) => {\n    return {\n        connections: state.connections.connections,\n        activeConnection: state.connections.activeConnection,\n        sshKey: state.connections.sshKey,\n        loading: state.volumes.loading,\n        errorConnections: state.connections.error,\n    };\n};\n\nconst mapDispatchToProps = (dispatch: ThunkDispatch<any, any, AnyAction>) => {\n    return {\n        fetchKey: () =>\n            dispatch(actions.fetchKey()),\n        addConnection: (connection: Connection) =>\n            dispatch(actions.addConnection(connection)),\n        removeConnection: (connection: Connection) =>\n            dispatch(actions.removeConnection(connection)),\n        activateConnection: (connection: Connection) =>\n            dispatch(actions.activateConnection(connection)),\n    };\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(MenuConnections);\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nimport css from './NavigationItems.module.css';\nimport MenuConnections from '../../../components/MaterialCustomized/MenuConnections';\n\n\nconst NavigationItems = props => (\n    <ul className={css.List}>\n        {props.isDesktop && (\n            <li className={css.Name}>\n                <NavLink\n                    to=\"/\"\n                    className={css.Link}\n                    activeClassName={css.active}\n                >\n                    Podman UI\n                </NavLink>\n            </li>\n        )}\n        <li className={css.Item}>\n            <NavLink\n                to=\"/\"\n                exact\n                className={css.Link}\n                activeClassName={css.active}\n            >\n                Home\n            </NavLink>\n        </li>\n        <li className={css.Item}>\n            <NavLink\n                to=\"/images\"\n                className={css.Link}\n                activeClassName={css.active}\n            >\n                Images\n            </NavLink>\n        </li>\n        <li className={css.Item}>\n            <NavLink\n                to=\"/containers\"\n                className={css.Link}\n                activeClassName={css.active}\n            >\n                Containers\n            </NavLink>\n        </li>\n        <li className={css.Item}>\n            <NavLink\n                to=\"/volumes\"\n                className={css.Link}\n                activeClassName={css.active}\n            >\n                Volumes\n            </NavLink>\n        </li>\n        <MenuConnections />\n    </ul>\n);\n\nexport default NavigationItems;\n","import React from 'react';\n\nimport css from './DrawerToggle.module.css';\n\nconst drawerToggle = (props) => (\n    <div className={css.DrawerToggle} onClick={props.clicked}>\n        <div></div>\n        <div></div>\n        <div></div>\n    </div>\n);\n\nexport default drawerToggle;","import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nimport css from './Toolbar.module.css';\nimport NavigationItems from '../NavigationItems/NavigationItems';\nimport DrawerToggle from '../SideDrawer/DrawerToggle/DrawerToggle';\n\nconst toolbar = props => (\n    <header className={css.Toolbar}>\n        {!props.isDesktop && (\n            <React.Fragment>\n                <DrawerToggle clicked={props.drawerToggleClicked} />\n                <div className={css.Name}>\n                    <NavLink to=\"/\" className={css.Link}>\n                        Podman UI\n                    </NavLink>\n                </div>\n            </React.Fragment>\n        )}\n        {props.isDesktop && (\n            <nav>\n                <NavigationItems isDesktop />\n            </nav>\n        )}\n    </header>\n);\n\nexport default toolbar;\n","import React from 'react';\n\nimport css from './Backdrop.module.css';\n\nconst backdrop = props => (\n    props.show ? <div className={css.Backdrop} onClick={props.clicked}></div> : null\n);\n\nexport default backdrop;\n","import React from 'react';\n\nimport css from './SideDrawer.module.css';\n\nimport NavigationItems from '../NavigationItems/NavigationItems';\nimport Backdrop from '../../UI/Backdrop/Backdrop';\n\n\nconst sideDrawer = props => {\n    let attachedClasses = [css.SideDrawer, css.Close];\n    if (props.open) {\n        attachedClasses = [css.SideDrawer, css.Open];\n    }\n    return (\n        <React.Fragment>\n            <Backdrop show={props.open} clicked={props.closed} />\n            <div className={attachedClasses.join(' ')} onClick={props.closed}>\n                <nav>\n                    <NavigationItems isDesktop={false} />\n                </nav>\n            </div>\n        </React.Fragment>\n    );\n};\n\nexport default sideDrawer;\n","import React, { useState } from 'react';\nimport css from './Layout.module.css';\n\nimport Toolbar from '../Navigation/Toolbar/Toolbar';\nimport SideDrawer from '../Navigation/SideDrawer/SideDrawer';\n\n\ntype LayoutProps = {\n    isDesktop: boolean,\n    children: React.ReactNode,\n};\n\nconst Layout = (props: LayoutProps) => {\n    const [showSideDrawer, setShowSideDrawer] = useState<boolean>(false);\n\n    const sideDrawerClosedHandler = () => {\n        setShowSideDrawer(false);\n    };\n\n    const sideDrawerToggleHandler = () => {\n        setShowSideDrawer(!showSideDrawer);\n    };\n\n    return (\n        <React.Fragment>\n            <Toolbar\n                isDesktop={props.isDesktop}\n                drawerToggleClicked={sideDrawerToggleHandler}\n            />\n\n            {!props.isDesktop && (\n                <SideDrawer\n                    open={showSideDrawer}\n                    closed={sideDrawerClosedHandler}\n                />\n            )}\n\n            <main className={css.Layout}>{props.children}</main>\n        </React.Fragment>\n    );\n}\n\nexport default Layout;\n","import React from 'react';\nimport css from './Intro.module.css';\n\n\nconst Intro = () => {\n    return (\n        <div className={css.Intro}>\n            <div className={css.Content}>\n                <h1>Welcome to Podman Web UI!</h1>\n                <h3>The default Podman connection is \"Local\" meaning it uses a Podman that runs on the application's server.</h3>\n                <h3>Please add a Remote Podman connection by clicking the \"CONNECTIONS\" button in the navigation to use any Remote Podman.</h3>\n            </div>\n        </div>\n    );\n};\n\nexport default Intro;\n","import React, { useState, useEffect, Suspense } from 'react';\nimport { Route, Switch, withRouter, Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport throttle from 'lodash.throttle';\n\nimport './App.css';\nimport { Connection } from './models/Models';\nimport { AppState } from './store';\nimport { imagesDataTest, containersDataTest, volumesDataTest } from './testData/testData';\n\nimport Layout from './components/Layout/Layout';\nimport Intro from './pages/Intro/Intro';\n\n\ndeclare global {\n  interface Window {\n    token: String;\n  }\n}\n\n\nconst Images = React.lazy(() => {\n  return import('./pages/Images/Images');\n});\n\nconst Containers = React.lazy(() => {\n  return import('./pages/Containers/Containers');\n});\n\nconst ContainerLogs = React.lazy(() => {\n  return import('./pages/ContainerLogs/ContainerLogs');\n});\n\nconst Volumes = React.lazy(() => {\n  return import('./pages/Volumes/Volumes');\n});\n\ninterface IAppProps {\n  isAuthenticated: boolean\n}\n\nconst App = (props: IAppProps) => {\n  const [isDesktop, setIsDesktop] = useState<boolean>(window.innerWidth >= 1000);\n\n  const handleWindowResize = () => {\n    setIsDesktop(window.innerWidth >= 1000);\n  };\n\n  useEffect(() => {\n    // Did Mount\n    window.addEventListener(\n      'resize',\n      throttle(() => {\n        handleWindowResize();\n      }, 200)\n    );\n  }, []);\n\n  useEffect(() => {\n    // Will Unmount\n    return () => {\n      window.removeEventListener(\n        'resize',\n        throttle(() => {\n          handleWindowResize();\n        }, 200)\n      );\n    }\n  }, []);\n\n  const routes = (\n    <Switch>\n      <Route path=\"/\" exact component={Intro} />\n      <Route path=\"/images/\" exact render={() => <Images imagesDataTest={imagesDataTest} />} />\n      <Route path=\"/containers/\" exact render={() => <Containers containersDataTest={containersDataTest} />} />\n      <Route path=\"/container_logs/:id\" render={() => <ContainerLogs />} />\n      <Route path=\"/volumes/\" render={() => <Volumes volumesDataTest={volumesDataTest} />} />\n      <Redirect to=\"/\" />\n    </Switch>\n  );\n\n  return (\n    <div>\n      <Layout isDesktop={isDesktop}>\n        <Suspense fallback={<p>Loading...</p>}>{routes}</Suspense>\n      </Layout>\n    </div>\n  );\n}\n\nconst mapStateToProps = (state: AppState) => {\n  return {\n    isAuthenticated: true,\n  };\n};\n\nexport default withRouter(\n  connect(\n    mapStateToProps,\n  )(App)\n);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { persistStore } from 'redux-persist';\nimport { PersistGate } from 'redux-persist/integration/react';\n\nimport { ConnectedRouter } from 'connected-react-router';\n\nimport { configureStore, history } from './store';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport WebSocketProvider from './WebSocket';\nimport { ViewportProvider } from './Viewport';\n\n\nconst store = configureStore();\nconst persistor = persistStore(store)\n\nconst app = (\n    <Provider store={store}>\n        <PersistGate loading={null} persistor={persistor}>\n            <WebSocketProvider>\n                <ViewportProvider>\n                    <ConnectedRouter history={history}>\n                        <App />\n                    </ConnectedRouter>\n                </ViewportProvider>\n            </WebSocketProvider>\n        </PersistGate>\n    </Provider>\n);\n\nReactDOM.render(\n    <React.StrictMode>\n        {app}\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import axios from 'axios';\nimport { ThunkDispatch } from 'redux-thunk';\nimport { AnyAction } from 'redux';\nimport { Image } from '../../models/Models';\nimport {\n    FETCH_IMAGES_START, FETCH_IMAGES_SUCCESS, FETCH_IMAGES_FAIL,\n    REMOVE_IMAGES_START, REMOVE_IMAGES_SUCCESS, REMOVE_IMAGES_FAIL,\n    PRUNE_IMAGES_START, PRUNE_IMAGES_SUCCESS, PRUNE_IMAGES_FAIL,\n    PULL_IMAGE_START, PULL_IMAGE_SUCCESS, PULL_IMAGE_FAIL,\n} from './actionTypes';\n\nimport { API_BASE } from '../../config';\n\n\n// IMAGES\n\n// Fetch\nexport const fetchImagesStart = () => {\n    return {\n        type: FETCH_IMAGES_START\n    };\n};\n\nexport const fetchImagesSuccess = (images: Image) => {\n    return {\n        type: FETCH_IMAGES_SUCCESS,\n        images: images\n    };\n};\n\nexport const fetchImagesFail = (error: string) => {\n    return {\n        type: FETCH_IMAGES_FAIL,\n        error: error\n    };\n};\n\nexport const fetchImages = () => {\n    return async (dispatch: ThunkDispatch<any, any, AnyAction>, getState) => {\n        const activeUsername = getState().connections.activeConnection.username;\n        dispatch(fetchImagesStart());\n\n        const url = `${API_BASE}/images`;\n\n        const headers = {\n            'Content-Type': 'application/json',\n            'Active-Username': activeUsername\n        }\n\n        try {\n            const response = await axios.get(url, { headers: headers });\n            dispatch(fetchImagesSuccess(response.data.images));\n        } catch (err) {\n            err.response ?\n                dispatch(fetchImagesFail(err.response.data))\n                :\n                dispatch(fetchImagesFail(\"Server does not respond while trying to fetch images.\"))\n        }\n    };\n};\n\n// Remove\nexport const removeImagesStart = () => {\n    return {\n        type: REMOVE_IMAGES_START\n    };\n};\n\nexport const removeImagesSuccess = (images: Image) => {\n    return {\n        type: REMOVE_IMAGES_SUCCESS,\n        images: images\n    };\n};\n\nexport const removeImagesFail = (error: string) => {\n    return {\n        type: REMOVE_IMAGES_FAIL,\n        error: error\n    };\n};\n\nexport const removeImages = (imageIds: Array<String>) => {\n    return async (dispatch: ThunkDispatch<any, any, AnyAction>, getState) => {\n        const activeUsername = getState().connections.activeConnection.username;\n        dispatch(removeImagesStart());\n\n        const url = `${API_BASE}/images`;\n\n        const headers = {\n            'Content-Type': 'application/json',\n            'Active-Username': activeUsername\n        }\n\n        try {\n            const response = await axios.delete(url, { headers: headers, data: { IDs: imageIds } });\n            dispatch(removeImagesSuccess(response.data.images));\n        } catch (err) {\n            err.response ?\n                dispatch(removeImagesFail(err.response.data))\n                :\n                dispatch(removeImagesFail(\"Server does not respond while trying to remove images.\"))\n        }\n    };\n};\n\n// Prune\nexport const pruneImagesStart = () => {\n    return {\n        type: PRUNE_IMAGES_START\n    };\n};\n\nexport const pruneImagesSuccess = (images: Image) => {\n    return {\n        type: PRUNE_IMAGES_SUCCESS,\n        images: images\n    };\n};\n\nexport const pruneImagesFail = (error: string) => {\n    return {\n        type: PRUNE_IMAGES_FAIL,\n        error: error\n    };\n};\n\nexport const pruneImages = () => {\n    return async (dispatch: ThunkDispatch<any, any, AnyAction>, getState) => {\n        const activeUsername = getState().connections.activeConnection.username;\n        dispatch(pruneImagesStart());\n\n        const url = `${API_BASE}/images/prune`;\n\n        const headers = {\n            'Content-Type': 'application/json',\n            'Active-Username': activeUsername\n        }\n\n        try {\n            const response = await axios.delete(url, { headers: headers, });\n            dispatch(pruneImagesSuccess(response.data.images));\n        } catch (err) {\n            err.reponse ?\n                dispatch(pruneImagesFail(err.response.data))\n                :\n                dispatch(pruneImagesFail(\"Server does not respond while trying to prune images.\"))\n        }\n    };\n};\n\n// Pull Image\nexport const pullImageStart = () => {\n    return {\n        type: PULL_IMAGE_START\n    };\n};\n\nexport const pullImageSuccess = (images: Image) => {\n    return {\n        type: PULL_IMAGE_SUCCESS,\n        images: images\n    };\n};\n\nexport const pullImageFail = (error: string) => {\n    return {\n        type: PULL_IMAGE_FAIL,\n        error: error\n    };\n};\n\nexport const pullImage = (name: string) => {\n    return async (dispatch: ThunkDispatch<any, any, AnyAction>, getState) => {\n        const activeUsername = getState().connections.activeConnection.username;\n        dispatch(pullImageStart());\n\n        const url = `${API_BASE}/images/pull`;\n\n        const headers = {\n            'Content-Type': 'application/json',\n            'Access-Control-Allow-Origin': '*',\n            'Active-Username': activeUsername\n        }\n\n        const data = {\n            name: name\n        }\n\n        try {\n            const response = await axios.post(url, data, { headers: headers, });\n            dispatch(pullImageSuccess(response.data.images));\n        } catch (err) {\n            err.reponse ?\n                dispatch(pullImageFail(err.response.data))\n                :\n                dispatch(pullImageFail(\"Server does not respond while trying to pull image.\"))\n        }\n    };\n};\n","import axios from 'axios';\nimport { ThunkDispatch } from 'redux-thunk';\nimport { AnyAction } from 'redux';\nimport { Container } from '../../models/Models';\nimport {\n    FETCH_CONTAINERS_START, FETCH_CONTAINERS_SUCCESS, FETCH_CONTAINERS_FAIL,\n    REMOVE_CONTAINERS_START, REMOVE_CONTAINERS_SUCCESS, REMOVE_CONTAINERS_FAIL,\n    STOP_CONTAINERS_START, STOP_CONTAINERS_SUCCESS, STOP_CONTAINERS_FAIL,\n    KILL_CONTAINERS_START, KILL_CONTAINERS_SUCCESS, KILL_CONTAINERS_FAIL,\n    UPDATE_CONTAINER_LOG,\n    CONTAINER_RUN_START, CONTAINER_RUN_SUCCESS, CONTAINER_RUN_FAIL,\n} from './actionTypes';\n\nimport { push } from 'connected-react-router';\n\nimport { API_BASE } from '../../config';\n\n\n// CONTAINERS\n\n// Fetch\nexport const fetchContainersStart = () => {\n    return {\n        type: FETCH_CONTAINERS_START\n    };\n};\n\nexport const fetchContainersSuccess = (containers: Container) => {\n    return {\n        type: FETCH_CONTAINERS_SUCCESS,\n        containers: containers\n    };\n};\n\nexport const fetchContainersFail = (error: string) => {\n    return {\n        type: FETCH_CONTAINERS_FAIL,\n        error: error\n    };\n};\n\nexport const fetchContainers = () => {\n    return async (dispatch: ThunkDispatch<any, any, AnyAction>, getState) => {\n        const activeUsername = getState().connections.activeConnection.username;\n        dispatch(fetchContainersStart());\n\n        const url = `${API_BASE}/containers`;\n\n        const headers = {\n            'Content-Type': 'application/json',\n            'Active-Username': activeUsername\n        }\n\n        try {\n            const response = await axios.get(url, { headers: headers });\n            dispatch(fetchContainersSuccess(response.data.containers));\n        } catch (err) {\n            err.response ?\n                dispatch(fetchContainersFail(err.response.data))\n                :\n                dispatch(fetchContainersFail(\"Server does not respond while trying to fetch containers.\"))\n        }\n    };\n};\n\n// Remove\nexport const removeContainersStart = () => {\n    return {\n        type: REMOVE_CONTAINERS_START\n    };\n};\n\nexport const removeContainersSuccess = (containers: Container) => {\n    return {\n        type: REMOVE_CONTAINERS_SUCCESS,\n        containers: containers\n    };\n};\n\nexport const removeContainersFail = (error: string) => {\n    return {\n        type: REMOVE_CONTAINERS_FAIL,\n        error: error\n    };\n};\n\nexport const removeContainers = (containerIds: Array<String>) => {\n    return async (dispatch: ThunkDispatch<any, any, AnyAction>, getState) => {\n        const activeUsername = getState().connections.activeConnection.username;\n        dispatch(removeContainersStart());\n\n        const url = `${API_BASE}/containers`;\n\n        const headers = {\n            'Content-Type': 'application/json',\n            'Access-Control-Allow-Origin': '*',\n            'Active-Username': activeUsername\n        }\n\n        try {\n            const response = await axios.delete(url, { headers: headers, data: { IDs: containerIds } });\n            dispatch(removeContainersSuccess(response.data.containers));\n        } catch (err) {\n            err.response ?\n                dispatch(removeContainersFail(err.response.data))\n                :\n                dispatch(removeContainersFail(\"Server does not respond while trying to remove containers.\"))\n        }\n    };\n};\n\n// Stop\nexport const stopContainersStart = () => {\n    return {\n        type: STOP_CONTAINERS_START\n    };\n};\n\nexport const stopContainersSuccess = (containers: Container) => {\n    return {\n        type: STOP_CONTAINERS_SUCCESS,\n        containers: containers\n    };\n};\n\nexport const stopContainersFail = (error: string) => {\n    return {\n        type: STOP_CONTAINERS_FAIL,\n        error: error\n    };\n};\n\nexport const stopContainers = (containerIds: Array<String>) => {\n    return async (dispatch: ThunkDispatch<any, any, AnyAction>, getState) => {\n        const activeUsername = getState().connections.activeConnection.username;\n        dispatch(stopContainersStart());\n\n        const url = `${API_BASE}/containers/stop`;\n        const headers = {\n            'Content-Type': 'application/json',\n            'Access-Control-Allow-Origin': '*',\n            'Active-Username': activeUsername\n        }\n        const data = {\n            IDs: containerIds\n        }\n\n        try {\n            const response = await axios.post(url, data, { headers: headers, });\n            dispatch(stopContainersSuccess(response.data.containers));\n        } catch (err) {\n            err.response ?\n                dispatch(stopContainersFail(err.response.data))\n                :\n                dispatch(stopContainersFail(\"Server does not respond while trying to stop containers.\"))\n        }\n    };\n};\n\n// Kill\nexport const killContainersStart = () => {\n    return {\n        type: KILL_CONTAINERS_START\n    };\n};\n\nexport const killContainersSuccess = (containers: Container) => {\n    return {\n        type: KILL_CONTAINERS_SUCCESS,\n        containers: containers\n    };\n};\n\nexport const killContainersFail = (error: string) => {\n    return {\n        type: KILL_CONTAINERS_FAIL,\n        error: error\n    };\n};\n\nexport const killContainers = (containerIds: Array<String>) => {\n    return async (dispatch: ThunkDispatch<any, any, AnyAction>, getState) => {\n        const activeUsername = getState().connections.activeConnection.username;\n        dispatch(killContainersStart());\n\n        const url = `${API_BASE}/containers/kill`;\n        const headers = {\n            'Content-Type': 'application/json',\n            'Access-Control-Allow-Origin': '*',\n            'Active-Username': activeUsername\n        }\n        const data = {\n            IDs: containerIds\n        }\n\n        try {\n            const response = await axios.post(url, data, { headers: headers, });\n            dispatch(killContainersSuccess(response.data.containers));\n        } catch (err) {\n            err.response ?\n                dispatch(killContainersFail(err.response.data))\n                :\n                dispatch(killContainersFail(\"Server does not respond while trying to kill containers.\"))\n        }\n    };\n};\n\n// Update Container Log\nexport const updateContainerLogs = (containerLogs) => {\n    return {\n        type: UPDATE_CONTAINER_LOG,\n        containerLogs: containerLogs\n    }\n}\n\n// Container Run\nexport const containerRunStart = () => {\n    return {\n        type: CONTAINER_RUN_START\n    };\n};\n\nexport const containerRunSuccess = (containers: Container) => {\n    return {\n        type: CONTAINER_RUN_SUCCESS,\n        containers: containers\n    };\n};\n\nexport const containerRunFail = (error: string) => {\n    return {\n        type: CONTAINER_RUN_FAIL,\n        error: error\n    };\n};\n\nexport const containerRun = (command: String) => {\n    return async (dispatch: ThunkDispatch<any, any, AnyAction>, getState) => {\n        const activeUsername = getState().connections.activeConnection.username;\n        dispatch(containerRunStart());\n\n        const url = `${API_BASE}/container-run`;\n        const headers = {\n            'Content-Type': 'application/json',\n            'Access-Control-Allow-Origin': '*',\n            'Active-Username': activeUsername\n        }\n        const data = {\n            command: command\n        }\n\n        try {\n            const response = await axios.post(url, data, { headers: headers, });\n            // -dt -p 8080:8080 --rm docker.io/library/alpine /bin/sh\n            const parts = command.split(\" \");\n\n            parts.forEach(part => {\n                response.data.containers.forEach(container => {\n                    const image = container.image.split(\":\")[0];\n\n                    if (part === container.containerId || part === container.image || part === image) {\n                        dispatch(push(`/container_logs/${container.containerId}`));\n                    }\n                });\n            });\n            dispatch(containerRunSuccess(response.data.containers));\n        } catch (err) {\n            err.response ?\n                dispatch(containerRunFail(err.response.data))\n                :\n                dispatch(containerRunFail(\"Server does not respond while trying to run container command.\"))\n        }\n    };\n};\n","import axios from 'axios';\nimport { ThunkDispatch } from 'redux-thunk';\nimport { AnyAction } from 'redux';\nimport { Volume } from '../../models/Models';\nimport {\n    FETCH_VOLUMES_START, FETCH_VOLUMES_SUCCESS, FETCH_VOLUMES_FAIL,\n    CREATE_VOLUME_START, CREATE_VOLUME_SUCCESS, CREATE_VOLUME_FAIL,\n    REMOVE_VOLUMES_START, REMOVE_VOLUMES_SUCCESS, REMOVE_VOLUMES_FAIL,\n} from './actionTypes';\n\nimport { API_BASE } from '../../config';\n\n\n// VOLUMES\n\n// Fetch\nexport const fetchVolumesStart = () => {\n    return {\n        type: FETCH_VOLUMES_START\n    };\n};\n\nexport const fetchVolumesSuccess = (volumes: Volume) => {\n    return {\n        type: FETCH_VOLUMES_SUCCESS,\n        volumes: volumes\n    };\n};\n\nexport const fetchVolumesFail = (error: string) => {\n    return {\n        type: FETCH_VOLUMES_FAIL,\n        error: error\n    };\n};\n\nexport const fetchVolumes = () => {\n    return async (dispatch: ThunkDispatch<any, any, AnyAction>, getState) => {\n        const activeUsername = getState().connections.activeConnection.username;\n        dispatch(fetchVolumesStart());\n\n        const url = `${API_BASE}/volumes`;\n\n        const headers = {\n            'Content-Type': 'application/json',\n            'Active-Username': activeUsername\n        }\n\n        try {\n            const response = await axios.get(url, { headers: headers });\n            dispatch(fetchVolumesSuccess(response.data.volumes));\n        } catch (err) {\n            err.response ?\n                dispatch(fetchVolumesFail(err.response.data))\n                :\n                dispatch(fetchVolumesFail(\"Server does not respond while trying to fetch volumes.\"))\n        }\n    };\n};\n\n// Create\nexport const createVolumeStart = () => {\n    return {\n        type: CREATE_VOLUME_START\n    };\n};\n\nexport const createVolumeSuccess = (volumes: Volume) => {\n    return {\n        type: CREATE_VOLUME_SUCCESS,\n        volumes: volumes\n    };\n};\n\nexport const createVolumeFail = (error: string) => {\n    return {\n        type: CREATE_VOLUME_FAIL,\n        error: error\n    };\n};\n\nexport const createVolume = (name: string) => {\n    return async (dispatch: ThunkDispatch<any, any, AnyAction>, getState) => {\n        const activeUsername = getState().connections.activeConnection.username;\n        dispatch(createVolumeStart());\n\n        const url = `${API_BASE}/volumes/create`;\n\n        const headers = {\n            'Content-Type': 'application/json',\n            'Access-Control-Allow-Origin': '*',\n            'Active-Username': activeUsername\n        }\n\n        const data = {\n            name: name\n        }\n\n        try {\n            const response = await axios.post(url, data, { headers: headers, });\n            dispatch(createVolumeSuccess(response.data.volumes));\n        } catch (err) {\n            err.response ?\n                dispatch(createVolumeFail(err.response.data))\n                :\n                dispatch(createVolumeFail(\"Server does not respond while trying to create volumes.\"))\n        }\n    };\n};\n\n// Remove\nexport const removeVolumesStart = () => {\n    return {\n        type: REMOVE_VOLUMES_START\n    };\n};\n\nexport const removeVolumesSuccess = (volumes: Volume) => {\n    return {\n        type: REMOVE_VOLUMES_SUCCESS,\n        volumes: volumes\n    };\n};\n\nexport const removeVolumesFail = (error: string) => {\n    return {\n        type: REMOVE_VOLUMES_FAIL,\n        error: error\n    };\n};\n\nexport const removeVolumes = (names: string[]) => {\n    return async (dispatch: ThunkDispatch<any, any, AnyAction>, getState) => {\n        const activeUsername = getState().connections.activeConnection.username;\n        dispatch(removeVolumesStart());\n\n        const url = `${API_BASE}/volumes`;\n\n        const headers = {\n            'Content-Type': 'application/json',\n            'Access-Control-Allow-Origin': '*',\n            'Active-Username': activeUsername\n        }\n\n        const data = {\n            names: names\n        }\n\n        try {\n            const response = await axios.delete(url, { headers: headers, data, });\n            dispatch(removeVolumesSuccess(response.data.volumes));\n        } catch (err) {\n            err.response ?\n                dispatch(removeVolumesFail(err.response.data))\n                :\n                dispatch(removeVolumesFail(\"Server does not respond while trying to remove volumes.\"))\n        }\n    };\n};\n","import axios from 'axios';\nimport { ThunkDispatch } from 'redux-thunk';\nimport { AnyAction } from 'redux';\nimport { Connection } from '../../models/Models';\nimport {\n    FETCH_KEY_START, FETCH_KEY_SUCCESS, FETCH_KEY_FAIL,\n    ADD_CONNECTION_START, ADD_CONNECTION_SUCCESS, ADD_CONNECTION_FAIL,\n    REMOVE_CONNECTION_START, REMOVE_CONNECTION_SUCCESS, REMOVE_CONNECTION_FAIL,\n    ACTIVATE_CONNECTION_START, ACTIVATE_CONNECTION_SUCCESS, ACTIVATE_CONNECTION_FAIL\n} from './actionTypes';\n\nimport { API_BASE } from '../../config';\n\n\n// CONNECTIONS\n\n// Fetch Key\nexport const fetchKeyStart = () => {\n    return {\n        type: FETCH_KEY_START\n    };\n};\n\nexport const fetchKeySuccess = (sshKey: string) => {\n    return {\n        type: FETCH_KEY_SUCCESS,\n        sshKey: sshKey\n    };\n};\n\nexport const fetchKeyFail = (error: string) => {\n    return {\n        type: FETCH_KEY_FAIL,\n        error: error\n    };\n};\n\nexport const fetchKey = () => {\n    return async (dispatch: ThunkDispatch<any, any, AnyAction>) => {\n        dispatch(fetchKeyStart());\n\n        const url = `${API_BASE}/connections/key`;\n\n        const headers = {\n            'Content-Type': 'application/json',\n        }\n\n        try {\n            const response = await axios.get(url, { headers: headers });\n            dispatch(fetchKeySuccess(response.data.sshKey));\n        } catch (err) {\n            err.response ?\n                dispatch(fetchKeyFail(err.response.data))\n                :\n                dispatch(fetchKeyFail(\"Server does not respond while trying to fetch an ssh key.\"))\n        }\n    };\n};\n\n// Add Connection\nexport const addConnectionStart = () => {\n    return {\n        type: ADD_CONNECTION_START\n    };\n};\n\nexport const addConnectionSuccess = (connection: Connection) => {\n    return {\n        type: ADD_CONNECTION_SUCCESS,\n        connection: connection\n    };\n};\n\nexport const addConnectionFail = (error: string) => {\n    return {\n        type: ADD_CONNECTION_FAIL,\n        error: error\n    };\n};\n\nexport const addConnection = (connection: Connection) => {\n    return async (dispatch: ThunkDispatch<any, any, AnyAction>) => {\n        dispatch(addConnectionStart());\n\n        const url = `${API_BASE}/connections`;\n\n        const headers = {\n            'Content-Type': 'application/json',\n            'Access-Control-Allow-Origin': '*'\n        }\n\n        const data = {\n            connection: connection\n        }\n\n        try {\n            await axios.post(url, data, { headers: headers, });\n            dispatch(addConnectionSuccess(connection));\n        } catch (err) {\n            err.response ?\n                dispatch(addConnectionFail(err.response.data))\n                :\n                dispatch(addConnectionFail(\"Server does not respond while trying to add a connection.\"))\n        }\n    };\n};\n\n// Remove Connection\nexport const removeConnectionStart = () => {\n    return {\n        type: REMOVE_CONNECTION_START\n    };\n};\n\nexport const removeConnectionSuccess = (connection: Connection) => {\n    return {\n        type: REMOVE_CONNECTION_SUCCESS,\n        connection: connection\n    };\n};\n\nexport const removeConnectionFail = (error: string) => {\n    return {\n        type: REMOVE_CONNECTION_FAIL,\n        error: error\n    };\n};\n\nexport const removeConnection = (connection: Connection) => {\n    return async (dispatch: ThunkDispatch<any, any, AnyAction>) => {\n        dispatch(removeConnectionStart());\n\n        const url = `${API_BASE}/connections`;\n\n        const headers = {\n            'Content-Type': 'application/json',\n            'Access-Control-Allow-Origin': '*'\n        }\n\n        const data = {\n            connection: connection\n        }\n\n        try {\n            await axios.delete(url, { headers: headers, data, });\n            dispatch(removeConnectionSuccess(connection));\n        } catch (err) {\n            err.response ?\n                dispatch(removeConnectionFail(err.response.data))\n                :\n                dispatch(removeConnectionFail(\"Server does not respond while trying to remove a connection.\"))\n        }\n    };\n};\n\n// Activate Connection\nexport const activateConnectionStart = () => {\n    return {\n        type: ACTIVATE_CONNECTION_START\n    };\n};\n\nexport const activateConnectionSuccess = (connection: Connection) => {\n    return {\n        type: ACTIVATE_CONNECTION_SUCCESS,\n        connection: connection\n    };\n};\n\nexport const activateConnectionFail = (error: string) => {\n    return {\n        type: ACTIVATE_CONNECTION_FAIL,\n        error: error\n    };\n};\n\nexport const activateConnection = (connection: Connection) => {\n    return async (dispatch: ThunkDispatch<any, any, AnyAction>, getState) => {\n        const activeUsername = getState().connections.activeConnection.username;\n        dispatch(activateConnectionStart());\n\n        const url = `${API_BASE}/connections/activate`;\n\n        const headers = {\n            'Content-Type': 'application/json',\n            'Access-Control-Allow-Origin': '*',\n            'Active-Username': activeUsername\n        }\n\n        const data = {\n            connection: connection\n        }\n\n        if (activeUsername === \"Local\") {\n            dispatch(activateConnectionSuccess(connection));\n        } else {\n            try {\n                await axios.post(url, data, { headers: headers, });\n                dispatch(activateConnectionSuccess(connection));\n            } catch (err) {\n                err.response ?\n                    dispatch(activateConnectionFail(err.response.data))\n                    :\n                    dispatch(activateConnectionFail(\"Server does not respond while trying to activate a connection.\"))\n            }\n        }\n    };\n};\n","export {\n    fetchImages,\n    removeImages,\n    pruneImages,\n    pullImage,\n} from './images';\n\nexport {\n    fetchContainers,\n    removeContainers,\n    updateContainerLogs,\n    containerRun,\n    stopContainers,\n    killContainers,\n} from './containers';\n\nexport {\n    fetchVolumes,\n    createVolume,\n    removeVolumes,\n} from './volumes';\n\nexport {\n    fetchKey,\n    addConnection,\n    removeConnection,\n    activateConnection\n} from './connections';\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Error\":\"MenuStyles_Error__vwpvc\",\"ButtonConnections\":\"MenuStyles_ButtonConnections__2fLH8\",\"RemoveConnection\":\"MenuStyles_RemoveConnection__3RCa1\",\"Key\":\"MenuStyles_Key__3OJWe\",\"ConnectionAdd\":\"MenuStyles_ConnectionAdd__3Q2iy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"SideDrawer\":\"SideDrawer_SideDrawer__WEg9u\",\"Open\":\"SideDrawer_Open__1cMOy\",\"Close\":\"SideDrawer_Close__3B7e2\",\"Logo\":\"SideDrawer_Logo__KZuo1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Toolbar\":\"Toolbar_Toolbar__17j3-\",\"Logo\":\"Toolbar_Logo__23uzI\",\"Name\":\"Toolbar_Name__14gP4\",\"Link\":\"Toolbar_Link__unftK\",\"DesktopOnly\":\"Toolbar_DesktopOnly__1gqWY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Intro\":\"Intro_Intro__XJodn\",\"Content\":\"Intro_Content__1rcbh\",\"Link\":\"Intro_Link__3rL3j\"};","import React from 'react';\r\n\r\nimport css from './LoadingIndicator.module.css';\r\n\r\nconst LoadingIndicator = () => (\r\n    <div className={css.Loading_Indicator}>\r\n        <div />\r\n        <div />\r\n        <div />\r\n        <div />\r\n    </div>\r\n);\r\n\r\nexport default LoadingIndicator;\r\n","import React, { createContext, useContext, useEffect, useState } from 'react';\nimport throttle from 'lodash.throttle';\n\n\nconst ViewportContext: any = createContext({});\n\nexport const ViewportProvider = ({ children }) => {\n    // breakpoints 600px, 900px, 1200px will be reflect in CSS as well\n    const isPhone = () => window.innerWidth < 600;\n    const isTabletPortrait = () => window.innerWidth >= 600 && window.innerWidth < 900;\n    const isTabletLandscape = () => window.innerWidth >= 900 && window.innerWidth && window.innerWidth < 1200;\n    const isDesktop = () => window.innerWidth >= 1200;\n\n    const [width, setWidth] = useState(window.innerWidth);\n    const [height, setHeight] = useState(window.innerHeight);\n    const [phone, setPhone] = useState(isPhone());\n    const [tabletPortrait, setTabletPortrait] = useState(isTabletPortrait());\n    const [tabletLandscape, setTabletLandscape] = useState(isTabletLandscape());\n    const [desktop, setDesktop] = useState(isDesktop());\n    const handleWindowResize = () => {\n        setWidth(window.innerWidth);\n        setHeight(window.innerHeight);\n        setPhone(isPhone());\n        setTabletPortrait(isTabletPortrait());\n        setTabletLandscape(isTabletLandscape());\n        setDesktop(isDesktop());\n    };\n\n    useEffect(() => {\n        window.addEventListener(\n            \"resize\",\n            throttle(() => {\n                handleWindowResize();\n            }, 200)\n        );\n        return () => window.removeEventListener(\"resize\", handleWindowResize);\n    }, []);\n\n    return (\n        <ViewportContext.Provider value={{ width, height, phone, tabletPortrait, tabletLandscape, desktop }}>\n            {children}\n        </ViewportContext.Provider>\n    );\n};\n\nexport const useViewport = () => {\n    const { width, height, phone, tabletPortrait, tabletLandscape, desktop } = useContext(ViewportContext);\n    return { width, height, phone, tabletPortrait, tabletLandscape, desktop };\n};\n"],"sourceRoot":""}