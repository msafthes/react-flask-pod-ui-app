{"version":3,"sources":["helpers/helpers.tsx","pages/Volumes/Volumes.module.css","components/MaterialCustomized/MenuVolumes.tsx","pages/Volumes/Volumes.tsx"],"names":["isAllTrue","obj","_i","_Object$entries","Object","entries","length","_ref3","_ref2","_home_msafpc_react_flask_pod_ui_app_react_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__","handleSelectAll","selectedItems","allTrue","updated","_home_msafpc_react_flask_pod_ui_app_react_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","_i2","_Object$entries2","_ref6","_ref5","key","toggleSelectAll","isSelectedAny","_i3","_Object$entries3","_ref9","_ref8","extractIds","items","imageIds","_i5","_Object$entries5","_ref15","_ref14","push","extractSelected","_i6","_Object$entries6","_ref18","_ref17","module","exports","Volumes","Wrapper","Info","Content","Buttons","Heading","Name","Driver","Mountpoint","Button","Headline","DetailTitle","Error","MenuVolumes","props","volumeName","volumeOperation","_useState","useState","_useState2","slicedToArray","anchorEl","setAnchorEl","name","handleClose","react_default","a","createElement","variant","color","aria-controls","aria-haspopup","onClick","event","currentTarget","Menu","id","keepMounted","open","Boolean","onClose","MenuItem","connect","state","volumes","loading","errorVolumes","error","dispatch","fetchVolumes","actions","createVolume","removeVolumes","selectedVolumes","_useViewport","useViewport","tabletLandscape","width","phone","tabletPortrait","desktop","defaultSelectedVolumes","objectSpread","setSelectedVolumes","_useState3","_useState4","openCreateVolumeModal","setOpenCreateVolumeModal","_useState5","_useState6","createVolumeName","setCreateVolumeName","_useState7","_useState8","showBackendError","setShowBackendError","useEffect","newSelected","handleCheckboxChange","changeEvent","target","old","handleVolumeOperation","mode","volumesNames","toLowerCase","console","log","_i4","_Object$entries4","_ref12","_ref11","isSelected","volumesTitleClasses","css","content","className","LoadingIndicator","Grid","container","direction","map","volume","i","Fragment","Accordion","AccordionSummary","expandIcon","ExpandMore_default","aria-label","FormControlLabel","stopPropagation","onFocus","control","Checkbox","onChange","checked","label","item","Tooltip","title","MaterialCustomized_MenuVolumes","AccordionDetails","disabled","startIcon","Delete_default","Dialog","aria-labelledby","DialogTitle","DialogContent","DialogContentText","TextField","autoFocus","margin","type","fullWidth","e","value","DialogActions","Alert","severity","AlertTitle","join"],"mappings":"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","file":"js/7.adfffdc2.chunk.js","sourcesContent":["// Sets all properties of an object to FALSE\nexport const isAllTrue = (obj: Object) => {\n    for (const [key, value] of Object.entries(obj)) {\n        if (value === false) {\n            return false;\n        }\n    }\n    return true;\n};\n\nexport const toggleSelectAll = (obj: Object, allTrue: Boolean) => {\n    for (const [key, value] of Object.entries(obj)) {\n        if (allTrue) {\n            obj[key] = false\n        } else {\n            obj[key] = true\n        }\n    }\n};\n\nexport const handleSelectAll = (selectedItems: Object) => {\n    const allTrue = isAllTrue(selectedItems);\n    const updated = { ...selectedItems };\n    toggleSelectAll(updated, allTrue);\n\n    return updated\n};\n\nexport const isSelectedAny = (selectedItems: Object) => {\n    for (const [key, value] of Object.entries(selectedItems)) {\n        if (value === true) {\n            return true\n        }\n    }\n    return false;\n};\n\nexport const isSelectedOne = (selectedItems: Object) => {\n    let count = 0;\n\n    for (const [key, value] of Object.entries(selectedItems)) {\n        if (value === true) {\n            count++;\n        }\n    }\n\n    return count === 1;\n};\n\nexport const extractIds = (items: Object) => {\n    const imageIds = [];\n    for (const [key, value] of Object.entries(items)) {\n        if (value === true) {\n            imageIds.push(key);\n        }\n    }\n    return imageIds;\n};\n\nexport const extractSelected = (items) => {\n    const selectedItems = [];\n    for (const [key, value] of Object.entries(items)) {\n        if (value === true) {\n            selectedItems.push(key);\n        }\n    }\n    return selectedItems;\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Volumes\":\"Volumes_Volumes__2zoCO\",\"Wrapper\":\"Volumes_Wrapper__1W2wz\",\"Info\":\"Volumes_Info__1XmsG\",\"Content\":\"Volumes_Content__L6ZJu\",\"Buttons\":\"Volumes_Buttons__2ubd0\",\"Heading\":\"Volumes_Heading__2jAI_\",\"Name\":\"Volumes_Name__3FOE9\",\"Driver\":\"Volumes_Driver__2jmIu\",\"Mountpoint\":\"Volumes_Mountpoint__3RvSS\",\"Button\":\"Volumes_Button__375DS\",\"Headline\":\"Volumes_Headline__2C25z\",\"DetailTitle\":\"Volumes_DetailTitle__L3vbD\",\"Error\":\"Volumes_Error__1QmHo\"};","import React, { useState } from 'react';\n\nimport Button from '@material-ui/core/Button';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\n\n\nconst MenuVolumes = props => {\n    const { volumeName, volumeOperation } = props\n    const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n    const name = {};\n    name[volumeName] = true;\n\n    const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleClose = () => {\n        setAnchorEl(null);\n    };\n\n    return (\n        <div>\n            <Button variant=\"outlined\" color=\"secondary\" aria-controls=\"simple-menu\" aria-haspopup=\"true\" onClick={handleClick}>\n                Actions\n            </Button>\n            <Menu\n                id=\"simple-menu\"\n                anchorEl={anchorEl}\n                keepMounted\n                open={Boolean(anchorEl)}\n                onClose={handleClose}\n            >\n                <MenuItem onClick={() => volumeOperation(name, \"remove\")}>Remove</MenuItem>\n                <MenuItem onClick={handleClose}>Close</MenuItem>\n            </Menu>\n        </div>\n    )\n}\n\nexport default MenuVolumes;\n","import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { ThunkDispatch } from 'redux-thunk';\nimport { AnyAction } from 'redux';\nimport * as actions from '../../store/actions/index';\nimport { AppState } from '../../store';\n\nimport css from './Volumes.module.css';\nimport LoadingIndicator from '../../components/UI/LoadingIndicator/LoadingIndicator';\nimport MenuVolumes from '../../components/MaterialCustomized/MenuVolumes';\n\nimport { Volume } from '../../models/Models';\nimport { isAllTrue, handleSelectAll, extractIds, isSelectedAny } from '../../helpers/helpers';\nimport { useViewport } from '../../Viewport';\n\n// Material UI\nimport Grid from '@material-ui/core/Grid';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Button from '@material-ui/core/Button';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, TextField, Typography } from '@material-ui/core';\nimport Accordion from '@material-ui/core/Accordion';\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport { Alert, AlertTitle } from '@material-ui/lab';\n\n\ninterface IVolumesProps {\n    volumes: Volume[],\n    loading: boolean,\n    errorVolumes: string,\n    fetchVolumes: Function,\n    createVolume: Function,\n    removeVolumes: Function,\n\n    volumesDataTest: Volume[]\n}\n\nconst Volumes = (props: IVolumesProps) => {\n    const { fetchVolumes, createVolume, removeVolumes, volumes, errorVolumes, loading } = props;\n    const { width, phone, tabletPortrait, tabletLandscape, desktop } = useViewport();\n\n    const defaultSelectedVolumes = {};\n\n    for (const [key, value] of Object.entries(volumes)) {\n        defaultSelectedVolumes[value.Name] = false\n    }\n\n    const [selectedVolumes, setSelectedVolumes] = useState<any>({ ...defaultSelectedVolumes });\n    const [openCreateVolumeModal, setOpenCreateVolumeModal] = useState(false);\n    const [createVolumeName, setCreateVolumeName] = useState(\"\");\n    const [showBackendError, setShowBackendError] = useState<boolean>(false);\n\n    const allTrue = isAllTrue(selectedVolumes);\n\n    useEffect(() => {\n        fetchVolumes();\n    }, [fetchVolumes]);\n\n    useEffect(() => {\n        setShowBackendError(errorVolumes.length > 0);\n    }, [errorVolumes]);\n\n    useEffect(() => {\n        const newSelected = {};\n        for (const [key, value] of Object.entries(volumes)) {\n            newSelected[value.Name] = false\n        }\n        setSelectedVolumes({ ...newSelected });\n    }, [volumes]);\n\n    const handleCheckboxChange = changeEvent => {\n        const { id } = changeEvent.target;\n        const old = { ...selectedVolumes };\n\n        for (const [key, value] of Object.entries(old)) {\n            if (id === key) {\n                old[key] = !old[key];\n            }\n        }\n\n        setSelectedVolumes(old);\n    };\n\n    const handleCreateVolumeOpen = () => {\n        setOpenCreateVolumeModal(true);\n    };\n\n    const handleCreateVolumeClose = () => {\n        setOpenCreateVolumeModal(false);\n    };\n\n    const onChangeCreateVolume = (e) => {\n        setCreateVolumeName(e.target.value);\n    };\n\n    const handleVolumeCreate = () => {\n        setOpenCreateVolumeModal(false);\n        if (createVolumeName.length == 0) {\n            return;\n        }\n        createVolume(createVolumeName);\n        setCreateVolumeName('');\n    };\n\n    const handleVolumeOperation = (selectedVolumes, mode: string) => {\n        const volumesNames = extractIds(selectedVolumes);\n\n        switch (mode.toLowerCase()) {\n            case \"remove\":\n                removeVolumes(volumesNames);\n                break;\n            default: console.log(\"Unknown operation!\");\n        }\n\n        const updated = { ...selectedVolumes };\n\n        for (const [key, value] of Object.entries(updated)) {\n            if (value === true) {\n                updated[key] = false\n            }\n        }\n        setSelectedVolumes(updated);\n    };\n\n    const selectAll = () => {\n        const updated = handleSelectAll(selectedVolumes);\n        setSelectedVolumes(updated);\n    };\n\n    const isSelected = isSelectedAny(selectedVolumes);\n\n    const volumesTitleClasses = [css.Content, css.Heading];\n\n    let content = <div className={css.Wrapper}><LoadingIndicator /></div>\n\n    if (volumes) {\n        content = <Grid container direction=\"column\">\n            {(volumes && volumes.length) ?\n                (volumes.map((volume, i) => {\n                    return <React.Fragment key={volume.Name}>\n\n                        <Accordion>\n                            <AccordionSummary\n                                expandIcon={<ExpandMoreIcon />}\n                                aria-label=\"Expand\"\n                                aria-controls=\"additional-actions1-content\"\n                                id=\"additional-actions1-header\"\n                            >\n                                <FormControlLabel\n                                    aria-label=\"Acknowledge\"\n                                    onClick={(event) => event.stopPropagation()}\n                                    onFocus={(event) => event.stopPropagation()}\n                                    control={<Checkbox\n                                        color=\"primary\"\n                                        onChange={handleCheckboxChange}\n                                        id={volume.Name}\n                                        checked={selectedVolumes[volume.Name] || false}\n                                    />}\n                                    label=\"\"\n                                />\n                                <Grid item container className={css.Content}>\n                                    <Tooltip title={volume.Name}>\n                                        <Grid className={css.Name}>{volume.Name}</Grid>\n                                    </Tooltip>\n                                    {(desktop || tabletLandscape) &&\n                                        <Tooltip title={volume.Driver}>\n                                            <Grid className={css.Driver}>{volume.Driver}</Grid>\n                                        </Tooltip>\n                                    }\n                                    {desktop &&\n                                        <Tooltip title={volume.Mountpoint}>\n                                            <Grid className={css.Mountpoint}>{volume.Mountpoint}</Grid>\n                                        </Tooltip>\n                                    }\n\n                                    <FormControlLabel\n                                        aria-label=\"Acknowledge\"\n                                        onClick={(event) => event.stopPropagation()}\n                                        onFocus={(event) => event.stopPropagation()}\n                                        control={<MenuVolumes\n                                            volumeName={volume.Name}\n                                            volumeOperation={handleVolumeOperation}\n                                        />}\n                                        label=\"\"\n                                    />\n                                </Grid>\n                            </AccordionSummary>\n\n                            <AccordionDetails>\n                                <Grid container direction=\"column\">\n                                    <Grid container direction=\"row\">\n                                        <Grid item className={css.DetailTitle}>Mountpoint:</Grid>\n                                        <Grid item className={css.Mountpoint}>{volume.Mountpoint}</Grid>\n                                    </Grid>\n                                    <Grid container direction=\"row\">\n                                        <Grid item className={css.DetailTitle}>Driver:</Grid>\n                                        <Grid item className={css.Driver}>{volume.Driver}</Grid>\n                                    </Grid>\n                                </Grid>\n                            </AccordionDetails>\n                        </Accordion>\n                    </React.Fragment>\n                }))\n                :\n                ''\n            }\n        </Grid>\n    }\n\n    return (\n        <div className={css.Volumes}>\n            <div className={css.Wrapper}>\n                <h1 className={css.Headline}>Podman Volumes</h1>\n                <p>Showing information about Volumes based on the `podman volume inspect` command</p>\n                <Grid container className={css.Buttons}>\n                    <Grid item className={css.Button}>\n                        <Button\n                            disabled={!isSelected}\n                            color=\"secondary\"\n                            variant=\"outlined\"\n                            startIcon={<DeleteIcon />}\n                            onClick={() => handleVolumeOperation(selectedVolumes, \"remove\")}>\n                            Remove Selected\n                        </Button>\n                    </Grid>\n\n                    <Grid item className={css.Button}>\n                        <Button variant=\"outlined\" color=\"primary\" onClick={handleCreateVolumeOpen}>\n                            Create\n                        </Button>\n                        <Dialog open={openCreateVolumeModal} onClose={handleCreateVolumeClose} aria-labelledby=\"form-dialog-title\">\n                            <DialogTitle id=\"form-dialog-title\">Create</DialogTitle>\n                            <DialogContent>\n                                <DialogContentText>\n                                    Enter the name of volume you want to create\"\n                            </DialogContentText>\n                                <TextField\n                                    autoFocus\n                                    margin=\"dense\"\n                                    id=\"name\"\n                                    label=\"Volume Create\"\n                                    type=\"text\"\n                                    fullWidth\n                                    onChange={onChangeCreateVolume}\n                                />\n                            </DialogContent>\n                            <DialogActions>\n                                <Button onClick={handleVolumeCreate} color=\"primary\">\n                                    Create\n                            </Button>\n                            </DialogActions>\n                        </Dialog>\n                    </Grid>\n\n                    {loading && <LoadingIndicator />}\n\n                </Grid>\n\n                {showBackendError &&\n                    <Alert severity=\"error\" onClose={() => { setShowBackendError(!showBackendError) }}>\n                        <AlertTitle><strong>Backend Error</strong></AlertTitle>\n                        {errorVolumes.length > 0 &&\n                            <p className={css.Error}>{errorVolumes}</p>\n                        }\n                    </Alert>\n                }\n\n                <div className={css.Info}>\n                    <div className={volumesTitleClasses.join(' ')}>\n                        <Checkbox color=\"primary\" onChange={selectAll} checked={allTrue || false} />\n                        <div className={css.Name}>Name</div>\n                        {(desktop || tabletLandscape) &&\n                            <div className={css.Driver}>Driver</div>\n                        }\n                        {desktop &&\n                            <div className={css.Mountpoint}>Mountpoint</div>\n                        }\n                    </div>\n                    {content}\n                </div>\n            </div>\n        </div>\n    );\n};\n\nconst mapStateToProps = (state: AppState) => {\n    return {\n        volumes: state.volumes.volumes,\n        loading: state.volumes.loading,\n        errorVolumes: state.volumes.error,\n    };\n};\n\nconst mapDispatchToProps = (dispatch: ThunkDispatch<any, any, AnyAction>) => {\n    return {\n        fetchVolumes: () =>\n            dispatch(actions.fetchVolumes()),\n        createVolume: (name) =>\n            dispatch(actions.createVolume(name)),\n        removeVolumes: (selectedVolumes: string[]) =>\n            dispatch(actions.removeVolumes(selectedVolumes)),\n    };\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Volumes);\n"],"sourceRoot":""}