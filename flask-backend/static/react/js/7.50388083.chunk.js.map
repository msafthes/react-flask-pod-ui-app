{"version":3,"sources":["components/UI/LoadingIndicator/LoadingIndicator.tsx","components/UI/LoadingIndicator/LoadingIndicator.module.css","helpers/helpers.tsx","pages/Volumes/Volumes.module.css","components/MaterialCustomized/MenuVolumes.tsx","pages/Volumes/Volumes.tsx"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_LoadingIndicator_module_css__WEBPACK_IMPORTED_MODULE_1__","_LoadingIndicator_module_css__WEBPACK_IMPORTED_MODULE_1___default","LoadingIndicator","a","createElement","className","css","Loading_Indicator","module","exports","isAllTrue","obj","_i","_Object$entries","Object","entries","length","_ref3","_ref2","_home_thesis_thesis_master_react_flask_pod_ui_app_react_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__","handleSelectAll","selectedItems","allTrue","updated","_home_thesis_thesis_master_react_flask_pod_ui_app_react_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","_i2","_Object$entries2","_ref6","_ref5","key","toggleSelectAll","isSelectedAny","_i3","_Object$entries3","_ref9","_ref8","extractIds","items","imageIds","_i5","_Object$entries5","_ref15","_ref14","push","extractSelected","_i6","_Object$entries6","_ref18","_ref17","Volumes","Wrapper","Info","Content","Buttons","Heading","Name","Driver","Mountpoint","Button","Headline","DetailTitle","Error","MenuVolumes","props","volumeName","volumeOperation","_useState","useState","_useState2","slicedToArray","anchorEl","setAnchorEl","name","handleClose","react_default","variant","color","aria-controls","aria-haspopup","onClick","event","currentTarget","Menu","id","keepMounted","open","Boolean","onClose","MenuItem","connect","state","volumes","loading","errorVolumes","error","dispatch","fetchVolumes","actions","createVolume","removeVolumes","selectedVolumes","_useViewport","useViewport","tabletLandscape","width","phone","tabletPortrait","desktop","defaultSelectedVolumes","objectSpread","setSelectedVolumes","_useState3","_useState4","openCreateVolumeModal","setOpenCreateVolumeModal","_useState5","_useState6","createVolumeName","setCreateVolumeName","_useState7","_useState8","showBackendError","setShowBackendError","useEffect","newSelected","handleCheckboxChange","changeEvent","target","old","handleVolumeOperation","mode","volumesNames","toLowerCase","console","log","_i4","_Object$entries4","_ref12","_ref11","isSelected","volumesTitleClasses","content","Grid","container","direction","map","volume","i","Fragment","Accordion","AccordionSummary","expandIcon","ExpandMore_default","aria-label","FormControlLabel","stopPropagation","onFocus","control","Checkbox","onChange","checked","label","item","Tooltip","title","MaterialCustomized_MenuVolumes","AccordionDetails","disabled","startIcon","Delete_default","Dialog","aria-labelledby","DialogTitle","DialogContent","DialogContentText","TextField","autoFocus","margin","type","fullWidth","e","value","DialogActions","Alert","severity","AlertTitle","join"],"mappings":"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","file":"js/7.50388083.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport css from './LoadingIndicator.module.css';\r\n\r\nconst LoadingIndicator = () => (\r\n    <div className={css.Loading_Indicator}>\r\n        <div />\r\n        <div />\r\n        <div />\r\n        <div />\r\n    </div>\r\n);\r\n\r\nexport default LoadingIndicator;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Loading_Indicator\":\"LoadingIndicator_Loading_Indicator__1Yf4m\"};","// Sets all properties of an object to FALSE\nexport const isAllTrue = (obj: Object) => {\n    for (const [key, value] of Object.entries(obj)) {\n        if (value === false) {\n            return false;\n        }\n    }\n    return true;\n};\n\nexport const toggleSelectAll = (obj: Object, allTrue: Boolean) => {\n    for (const [key, value] of Object.entries(obj)) {\n        if (allTrue) {\n            obj[key] = false\n        } else {\n            obj[key] = true\n        }\n    }\n};\n\nexport const handleSelectAll = (selectedItems: Object) => {\n    const allTrue = isAllTrue(selectedItems);\n    const updated = { ...selectedItems };\n    toggleSelectAll(updated, allTrue);\n\n    return updated\n};\n\nexport const isSelectedAny = (selectedItems: Object) => {\n    for (const [key, value] of Object.entries(selectedItems)) {\n        if (value === true) {\n            return true\n        }\n    }\n    return false;\n};\n\nexport const isSelectedOne = (selectedItems: Object) => {\n    let count = 0;\n\n    for (const [key, value] of Object.entries(selectedItems)) {\n        if (value === true) {\n            count++;\n        }\n    }\n\n    return count === 1;\n};\n\nexport const extractIds = (items: Object) => {\n    const imageIds = [];\n    for (const [key, value] of Object.entries(items)) {\n        if (value === true) {\n            imageIds.push(key);\n        }\n    }\n    return imageIds;\n};\n\nexport const extractSelected = (items) => {\n    const selectedItems = [];\n    for (const [key, value] of Object.entries(items)) {\n        if (value === true) {\n            selectedItems.push(key);\n        }\n    }\n    return selectedItems;\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Volumes\":\"Volumes_Volumes__1v2Xy\",\"Wrapper\":\"Volumes_Wrapper__7WX6t\",\"Info\":\"Volumes_Info__3Eyx2\",\"Content\":\"Volumes_Content__3GPIm\",\"Buttons\":\"Volumes_Buttons__3Ntv9\",\"Heading\":\"Volumes_Heading__3kF7E\",\"Name\":\"Volumes_Name__2TVgV\",\"Driver\":\"Volumes_Driver__10eb5\",\"Mountpoint\":\"Volumes_Mountpoint__1jyHA\",\"Button\":\"Volumes_Button__3EGje\",\"Headline\":\"Volumes_Headline__Dl1mI\",\"DetailTitle\":\"Volumes_DetailTitle__3mLNW\",\"Error\":\"Volumes_Error__3OcTo\"};","import React, { useState } from 'react';\n\nimport Button from '@material-ui/core/Button';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\n\n\nconst MenuVolumes = props => {\n    const { volumeName, volumeOperation } = props\n    const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n    const name = {};\n    name[volumeName] = true;\n\n    const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleClose = () => {\n        setAnchorEl(null);\n    };\n\n    return (\n        <div>\n            <Button variant=\"outlined\" color=\"secondary\" aria-controls=\"simple-menu\" aria-haspopup=\"true\" onClick={handleClick}>\n                Actions\n            </Button>\n            <Menu\n                id=\"simple-menu\"\n                anchorEl={anchorEl}\n                keepMounted\n                open={Boolean(anchorEl)}\n                onClose={handleClose}\n            >\n                <MenuItem onClick={() => volumeOperation(name, \"remove\")}>Remove</MenuItem>\n                <MenuItem onClick={handleClose}>Close</MenuItem>\n            </Menu>\n        </div>\n    )\n}\n\nexport default MenuVolumes;\n","import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { ThunkDispatch } from 'redux-thunk';\nimport { AnyAction } from 'redux';\nimport * as actions from '../../store/actions/index';\nimport { AppState } from '../../store';\n\nimport css from './Volumes.module.css';\nimport LoadingIndicator from '../../components/UI/LoadingIndicator/LoadingIndicator';\nimport MenuVolumes from '../../components/MaterialCustomized/MenuVolumes';\n\nimport { Volume } from '../../models/Models';\nimport { isAllTrue, handleSelectAll, extractIds, isSelectedAny } from '../../helpers/helpers';\nimport { useViewport } from '../../Viewport';\n\n// Material UI\nimport Grid from '@material-ui/core/Grid';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Button from '@material-ui/core/Button';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, TextField, Typography } from '@material-ui/core';\nimport Accordion from '@material-ui/core/Accordion';\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport { Alert, AlertTitle } from '@material-ui/lab';\n\n\ninterface IVolumesProps {\n    volumes: Volume[],\n    loading: boolean,\n    errorVolumes: string,\n    fetchVolumes: Function,\n    createVolume: Function,\n    removeVolumes: Function,\n\n    volumesDataTest: Volume[]\n}\n\nconst Volumes = (props: IVolumesProps) => {\n    const { fetchVolumes, createVolume, removeVolumes, volumes, errorVolumes, loading } = props;\n    const { width, phone, tabletPortrait, tabletLandscape, desktop } = useViewport();\n\n    const defaultSelectedVolumes = {};\n\n    for (const [key, value] of Object.entries(volumes)) {\n        defaultSelectedVolumes[value.Name] = false\n    }\n\n    const [selectedVolumes, setSelectedVolumes] = useState<any>({ ...defaultSelectedVolumes });\n    const [openCreateVolumeModal, setOpenCreateVolumeModal] = useState(false);\n    const [createVolumeName, setCreateVolumeName] = useState(\"\");\n    const [showBackendError, setShowBackendError] = useState<boolean>(false);\n\n    const allTrue = isAllTrue(selectedVolumes);\n\n    useEffect(() => {\n        fetchVolumes();\n    }, [fetchVolumes]);\n\n    useEffect(() => {\n        setShowBackendError(errorVolumes.length > 0);\n    }, [errorVolumes]);\n\n    useEffect(() => {\n        const newSelected = {};\n        for (const [key, value] of Object.entries(volumes)) {\n            newSelected[value.Name] = false\n        }\n        setSelectedVolumes({ ...newSelected });\n    }, [volumes]);\n\n    const handleCheckboxChange = changeEvent => {\n        const { id } = changeEvent.target;\n        const old = { ...selectedVolumes };\n\n        for (const [key, value] of Object.entries(old)) {\n            if (id === key) {\n                old[key] = !old[key];\n            }\n        }\n\n        setSelectedVolumes(old);\n    };\n\n    const handleCreateVolumeOpen = () => {\n        setOpenCreateVolumeModal(true);\n    };\n\n    const handleCreateVolumeClose = () => {\n        setOpenCreateVolumeModal(false);\n    };\n\n    const onChangeCreateVolume = (e) => {\n        setCreateVolumeName(e.target.value);\n    };\n\n    const handleVolumeCreate = () => {\n        setOpenCreateVolumeModal(false);\n        if (createVolumeName.length == 0) {\n            return;\n        }\n        createVolume(createVolumeName);\n        setCreateVolumeName('');\n    };\n\n    const handleVolumeOperation = (selectedVolumes, mode: string) => {\n        const volumesNames = extractIds(selectedVolumes);\n\n        switch (mode.toLowerCase()) {\n            case \"remove\":\n                removeVolumes(volumesNames);\n                break;\n            default: console.log(\"Unknown operation!\");\n        }\n\n        const updated = { ...selectedVolumes };\n\n        for (const [key, value] of Object.entries(updated)) {\n            if (value === true) {\n                updated[key] = false\n            }\n        }\n        setSelectedVolumes(updated);\n    };\n\n    const selectAll = () => {\n        const updated = handleSelectAll(selectedVolumes);\n        setSelectedVolumes(updated);\n    };\n\n    const isSelected = isSelectedAny(selectedVolumes);\n\n    const volumesTitleClasses = [css.Content, css.Heading];\n\n    let content = <div className={css.Wrapper}><LoadingIndicator /></div>\n\n    if (volumes) {\n        content = <Grid container direction=\"column\">\n            {(volumes && volumes.length) ?\n                (volumes.map((volume, i) => {\n                    return <React.Fragment key={volume.Name}>\n\n                        <Accordion>\n                            <AccordionSummary\n                                expandIcon={<ExpandMoreIcon />}\n                                aria-label=\"Expand\"\n                                aria-controls=\"additional-actions1-content\"\n                                id=\"additional-actions1-header\"\n                            >\n                                <FormControlLabel\n                                    aria-label=\"Acknowledge\"\n                                    onClick={(event) => event.stopPropagation()}\n                                    onFocus={(event) => event.stopPropagation()}\n                                    control={<Checkbox\n                                        color=\"primary\"\n                                        onChange={handleCheckboxChange}\n                                        id={volume.Name}\n                                        checked={selectedVolumes[volume.Name] || false}\n                                    />}\n                                    label=\"\"\n                                />\n                                <Grid item container className={css.Content}>\n                                    <Tooltip title={volume.Name}>\n                                        <Grid className={css.Name}>{volume.Name}</Grid>\n                                    </Tooltip>\n                                    {(desktop || tabletLandscape) &&\n                                        <Tooltip title={volume.Driver}>\n                                            <Grid className={css.Driver}>{volume.Driver}</Grid>\n                                        </Tooltip>\n                                    }\n                                    {desktop &&\n                                        <Tooltip title={volume.Mountpoint}>\n                                            <Grid className={css.Mountpoint}>{volume.Mountpoint}</Grid>\n                                        </Tooltip>\n                                    }\n\n                                    <FormControlLabel\n                                        aria-label=\"Acknowledge\"\n                                        onClick={(event) => event.stopPropagation()}\n                                        onFocus={(event) => event.stopPropagation()}\n                                        control={<MenuVolumes\n                                            volumeName={volume.Name}\n                                            volumeOperation={handleVolumeOperation}\n                                        />}\n                                        label=\"\"\n                                    />\n                                </Grid>\n                            </AccordionSummary>\n\n                            <AccordionDetails>\n                                <Grid container direction=\"column\">\n                                    <Grid container direction=\"row\">\n                                        <Grid item className={css.DetailTitle}>Mountpoint:</Grid>\n                                        <Grid item className={css.Mountpoint}>{volume.Mountpoint}</Grid>\n                                    </Grid>\n                                    <Grid container direction=\"row\">\n                                        <Grid item className={css.DetailTitle}>Driver:</Grid>\n                                        <Grid item className={css.Driver}>{volume.Driver}</Grid>\n                                    </Grid>\n                                </Grid>\n                            </AccordionDetails>\n                        </Accordion>\n                    </React.Fragment>\n                }))\n                :\n                ''\n            }\n        </Grid>\n    }\n\n    return (\n        <div className={css.Volumes}>\n            <div className={css.Wrapper}>\n                <h1 className={css.Headline}>Podman Volumes</h1>\n                <p>Showing information about Volumes based on the `podman volume inspect` command</p>\n                <Grid container className={css.Buttons}>\n                    <Grid item className={css.Button}>\n                        <Button\n                            disabled={!isSelected}\n                            color=\"secondary\"\n                            variant=\"outlined\"\n                            startIcon={<DeleteIcon />}\n                            onClick={() => handleVolumeOperation(selectedVolumes, \"remove\")}>\n                            Remove Selected\n                        </Button>\n                    </Grid>\n\n                    <Grid item className={css.Button}>\n                        <Button variant=\"outlined\" color=\"primary\" onClick={handleCreateVolumeOpen}>\n                            Create\n                        </Button>\n                        <Dialog open={openCreateVolumeModal} onClose={handleCreateVolumeClose} aria-labelledby=\"form-dialog-title\">\n                            <DialogTitle id=\"form-dialog-title\">Create</DialogTitle>\n                            <DialogContent>\n                                <DialogContentText>\n                                    Enter the name of volume you want to create\"\n                            </DialogContentText>\n                                <TextField\n                                    autoFocus\n                                    margin=\"dense\"\n                                    id=\"name\"\n                                    label=\"Volume Create\"\n                                    type=\"text\"\n                                    fullWidth\n                                    onChange={onChangeCreateVolume}\n                                />\n                            </DialogContent>\n                            <DialogActions>\n                                <Button onClick={handleVolumeCreate} color=\"primary\">\n                                    Create\n                            </Button>\n                            </DialogActions>\n                        </Dialog>\n                    </Grid>\n\n                    {loading && <LoadingIndicator />}\n\n                </Grid>\n\n                {showBackendError &&\n                    <Alert severity=\"error\" onClose={() => { setShowBackendError(!showBackendError) }}>\n                        <AlertTitle><strong>Backend Error</strong></AlertTitle>\n                        {errorVolumes.length > 0 &&\n                            <p className={css.Error}>{errorVolumes}</p>\n                        }\n                    </Alert>\n                }\n\n                <div className={css.Info}>\n                    <div className={volumesTitleClasses.join(' ')}>\n                        <Checkbox color=\"primary\" onChange={selectAll} checked={allTrue || false} />\n                        <div className={css.Name}>Name</div>\n                        {(desktop || tabletLandscape) &&\n                            <div className={css.Driver}>Driver</div>\n                        }\n                        {desktop &&\n                            <div className={css.Mountpoint}>Mountpoint</div>\n                        }\n                    </div>\n                    {content}\n                </div>\n            </div>\n        </div>\n    );\n};\n\nconst mapStateToProps = (state: AppState) => {\n    return {\n        volumes: state.volumes.volumes,\n        loading: state.volumes.loading,\n        errorVolumes: state.volumes.error,\n    };\n};\n\nconst mapDispatchToProps = (dispatch: ThunkDispatch<any, any, AnyAction>) => {\n    return {\n        fetchVolumes: () =>\n            dispatch(actions.fetchVolumes()),\n        createVolume: (name) =>\n            dispatch(actions.createVolume(name)),\n        removeVolumes: (selectedVolumes: string[]) =>\n            dispatch(actions.removeVolumes(selectedVolumes)),\n    };\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Volumes);\n"],"sourceRoot":""}