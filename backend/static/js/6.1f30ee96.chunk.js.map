{"version":3,"sources":["helpers/helpers.tsx","pages/Images/Images.module.css","../node_modules/@material-ui/core/esm/styles/makeStyles.js","components/MaterialCustomized/MenuImages.tsx","pages/Images/Images.tsx"],"names":["isAllTrue","obj","_i","_Object$entries","Object","entries","length","_ref3","_ref2","_home_thesis_thesis_master_react_flask_pod_ui_app_frontend_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__","handleSelectAll","selectedItems","allTrue","updated","_home_thesis_thesis_master_react_flask_pod_ui_app_frontend_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","_i2","_Object$entries2","_ref6","_ref5","key","toggleSelectAll","isSelectedAny","_i3","_Object$entries3","_ref9","_ref8","extractIds","items","imageIds","_i5","_Object$entries5","_ref15","_ref14","push","extractSelected","_i6","_Object$entries6","_ref18","_ref17","module","exports","Images","Wrapper","Info","Content","Buttons","Heading","Repository","Tag","Id","Created","Size","Button","Headline","DetailTitle","Error","_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","_material_ui_styles__WEBPACK_IMPORTED_MODULE_1__","_defaultTheme__WEBPACK_IMPORTED_MODULE_2__","__webpack_exports__","stylesOrCreator","options","arguments","undefined","defaultTheme","MenuImages","props","imageId","imageOperation","_useState","useState","_useState2","slicedToArray","anchorEl","setAnchorEl","id","handleClose","react_default","a","createElement","variant","color","aria-controls","aria-haspopup","onClick","event","currentTarget","Menu","keepMounted","open","Boolean","onClose","MenuItem","connect","state","images","loading","containers","errorImages","error","errorContainers","dispatch","fetchImages","actions","removeImages","selectedImages","pruneImages","pullImage","name","fetchContainers","_useViewport","useViewport","phone","width","tabletLandscape","tabletPortrait","desktop","defaultSelectedImages","objectSpread","setSelectedImages","_useState3","_useState4","showError","setShowError","_useState5","_useState6","showBackendError","setShowBackendError","_useState7","_useState8","errorInfo","setErrorInfo","_useState9","_useState10","openPullModal","setOpenPullModal","_useState11","_useState12","pullImageName","setPullImageName","useEffect","newSelected","handleCheckboxChange","changeEvent","target","old","handleRemoveImages","usedImages","usedImagesNames","forEach","image","imageRepoTag","tag","concat","repository","container","toConsumableArray","Set","join","handleImageOperation","mode","toLowerCase","console","log","_i4","_Object$entries4","_ref12","_ref11","isSelected","imagesTitleClasses","css","content","makeStyles","buttonGroup","alignSelf","useStyles","className","LoadingIndicator","Grid","direction","map","i","Fragment","Accordion","AccordionSummary","expandIcon","ExpandMore_default","aria-label","FormControlLabel","stopPropagation","onFocus","control","Checkbox","onChange","checked","label","item","Tooltip","title","created","size","MaterialCustomized_MenuImages","AccordionDetails","disabled","startIcon","Delete_default","Dialog","aria-labelledby","DialogTitle","DialogContent","DialogContentText","TextField","autoFocus","margin","type","fullWidth","e","value","DialogActions","Alert","severity","AlertTitle","split","Typography","component","align"],"mappings":"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","file":"js/6.1f30ee96.chunk.js","sourcesContent":["// Sets all properties of an object to FALSE\nexport const isAllTrue = (obj: Object) => {\n    for (const [key, value] of Object.entries(obj)) {\n        if (value === false) {\n            return false;\n        }\n    }\n    return true;\n};\n\nexport const toggleSelectAll = (obj: Object, allTrue: Boolean) => {\n    for (const [key, value] of Object.entries(obj)) {\n        if (allTrue) {\n            obj[key] = false\n        } else {\n            obj[key] = true\n        }\n    }\n};\n\nexport const handleSelectAll = (selectedItems: Object) => {\n    const allTrue = isAllTrue(selectedItems);\n    const updated = { ...selectedItems };\n    toggleSelectAll(updated, allTrue);\n\n    return updated\n};\n\nexport const isSelectedAny = (selectedItems: Object) => {\n    for (const [key, value] of Object.entries(selectedItems)) {\n        if (value === true) {\n            return true\n        }\n    }\n    return false;\n};\n\nexport const isSelectedOne = (selectedItems: Object) => {\n    let count = 0;\n\n    for (const [key, value] of Object.entries(selectedItems)) {\n        if (value === true) {\n            count++;\n        }\n    }\n\n    return count === 1;\n};\n\nexport const extractIds = (items: Object) => {\n    const imageIds = [];\n    for (const [key, value] of Object.entries(items)) {\n        if (value === true) {\n            imageIds.push(key);\n        }\n    }\n    return imageIds;\n};\n\nexport const extractSelected = (items) => {\n    const selectedItems = [];\n    for (const [key, value] of Object.entries(items)) {\n        if (value === true) {\n            selectedItems.push(key);\n        }\n    }\n    return selectedItems;\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Images\":\"Images_Images__3iJJM\",\"Wrapper\":\"Images_Wrapper__2ppQb\",\"Info\":\"Images_Info__3BRXo\",\"Content\":\"Images_Content__VJRQw\",\"Buttons\":\"Images_Buttons__1grQ5\",\"Heading\":\"Images_Heading__3SXPK\",\"Repository\":\"Images_Repository__20WXi\",\"Tag\":\"Images_Tag__2py_I\",\"Id\":\"Images_Id__1JOUt\",\"Created\":\"Images_Created__2mBzF\",\"Size\":\"Images_Size__21Ca3\",\"Button\":\"Images_Button__2pw-n\",\"Headline\":\"Images_Headline__3TC_Z\",\"DetailTitle\":\"Images_DetailTitle__MVEYP\",\"Error\":\"Images_Error__37yNz\"};","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { makeStyles as makeStylesWithoutDefault } from '@material-ui/styles';\nimport defaultTheme from './defaultTheme';\n\nfunction makeStyles(stylesOrCreator) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return makeStylesWithoutDefault(stylesOrCreator, _extends({\n    defaultTheme: defaultTheme\n  }, options));\n}\n\nexport default makeStyles;","import React, { useState } from 'react';\n\nimport Button from '@material-ui/core/Button';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\n\n\nconst MenuImages = props => {\n    const { imageId, imageOperation } = props\n    const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n    const id = {};\n\n    if (imageId) {\n        id[imageId] = true;\n    }\n\n    const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleClose = () => {\n        setAnchorEl(null);\n    };\n\n    return (\n        <div>\n            <Button variant=\"outlined\" color=\"secondary\" aria-controls=\"simple-menu\" aria-haspopup=\"true\" onClick={handleClick}>\n                Actions\n            </Button>\n            <Menu\n                id=\"simple-menu\"\n                anchorEl={anchorEl}\n                keepMounted\n                open={Boolean(anchorEl)}\n                onClose={handleClose}\n            >\n                <MenuItem onClick={() => imageOperation(id, \"remove\")}>Remove</MenuItem>\n                <MenuItem onClick={handleClose}>Close</MenuItem>\n            </Menu>\n        </div>\n    )\n}\n\nexport default MenuImages;\n","import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { ThunkDispatch } from 'redux-thunk';\nimport { AnyAction } from 'redux';\nimport * as actions from '../../store/actions/index';\nimport { AppState } from '../../store';\n\nimport css from './Images.module.css';\nimport LoadingIndicator from '../../components/UI/LoadingIndicator/LoadingIndicator';\nimport MenuImages from '../../components/MaterialCustomized/MenuImages';\n\nimport { Image, Container } from '../../models/Models';\nimport { isAllTrue, handleSelectAll, isSelectedAny, extractIds } from '../../helpers/helpers';\nimport { useViewport } from '../../Viewport';\n\n// Material UI\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Button from '@material-ui/core/Button';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { Alert, AlertTitle } from '@material-ui/lab';\nimport { Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, TextField, Typography } from '@material-ui/core';\nimport Accordion from '@material-ui/core/Accordion';\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Tooltip from '@material-ui/core/Tooltip';\n\n\ninterface IImagesProps {\n    images: Image[],\n    loading: boolean,\n    errorContainers: string,\n    errorImages: string,\n    fetchImages: Function,\n    removeImages: Function,\n    pruneImages: Function,\n    pullImage: Function,\n\n    imagesDataTest: Image[],\n    containers: Container[],\n    fetchContainers: Function,\n}\n\nconst Images = (props: IImagesProps) => {\n    const { fetchImages, removeImages, pruneImages, pullImage, images, containers, fetchContainers, errorContainers, errorImages, loading } = props;\n    const { width, phone, tabletPortrait, tabletLandscape, desktop } = useViewport();\n\n    const defaultSelectedImages = {};\n\n    for (const [key, value] of Object.entries(images)) {\n        defaultSelectedImages[value.id] = false\n    }\n\n    const [selectedImages, setSelectedImages] = useState<any>({ ...defaultSelectedImages });\n    const [showError, setShowError] = useState<boolean>(false);\n    const [showBackendError, setShowBackendError] = useState<boolean>(false);\n    const [errorInfo, setErrorInfo] = useState<string>(\"\");\n    const [openPullModal, setOpenPullModal] = useState(false);\n    const [pullImageName, setPullImageName] = useState(\"\");\n\n    const allTrue = isAllTrue(selectedImages);\n\n    useEffect(() => {\n        fetchImages();\n        fetchContainers();\n    }, [fetchImages, fetchContainers]);\n\n    useEffect(() => {\n        setShowBackendError(errorContainers.length > 0 || errorImages.length > 0);\n    }, [errorContainers, errorImages]);\n\n    useEffect(() => {\n        const newSelected = {};\n        for (const [key, value] of Object.entries(images)) {\n            newSelected[value.id] = false\n        }\n        setSelectedImages({ ...newSelected });\n    }, [images]);\n\n    const handleCheckboxChange = changeEvent => {\n        const { id } = changeEvent.target;\n        const old = { ...selectedImages };\n\n        for (const [key, value] of Object.entries(old)) {\n            if (id === key) {\n                old[key] = !old[key];\n            }\n        }\n\n        setSelectedImages(old);\n    };\n\n    const handlePullOpen = () => {\n        setOpenPullModal(true);\n    };\n\n    const handlePullClose = () => {\n        setOpenPullModal(false);\n    };\n\n    const onChangePull = (e) => {\n        setPullImageName(e.target.value);\n    };\n\n    const handleImagePull = () => {\n        setOpenPullModal(false);\n        if (pullImageName.length == 0) {\n            return;\n        }\n        pullImage(pullImageName);\n        setPullImageName('');\n    };\n\n    const handleRemoveImages = (images, imageIds) => {\n        const usedImages = [];\n        let usedImagesNames = [];\n\n        images.forEach((image) => {\n            if (selectedImages[image.id] === true) {\n                const imageRepoTag = (image.tag === '') ? `${image.repository}` : `${image.repository}:${image.tag}`;\n                containers.forEach((container) => {\n                    if (container.image === imageRepoTag) {\n                        usedImages.push(image);\n                        usedImagesNames.push(imageRepoTag);\n                    }\n                });\n            }\n        });\n\n        if (usedImages.length > 0) {\n            setShowError(true);\n            usedImagesNames = [...new Set(usedImagesNames)];\n            setErrorInfo(usedImagesNames.join(\" \"));\n        } else {\n            removeImages(imageIds);\n        }\n    };\n\n    const handleImageOperation = (selectedImages, mode: string) => {\n        const imageIds = extractIds(selectedImages);\n\n        switch (mode.toLowerCase()) {\n            case \"remove\":\n                handleRemoveImages(images, imageIds);\n                break;\n            default: console.log(\"Unknown operation!\");\n        }\n\n        const updated = { ...selectedImages };\n\n        for (const [key, value] of Object.entries(updated)) {\n            if (value === true) {\n                updated[key] = false\n            }\n        }\n        setSelectedImages(updated);\n    };\n\n    const selectAll = () => {\n        const updated = handleSelectAll(selectedImages);\n        setSelectedImages(updated);\n    };\n\n    const isSelected = isSelectedAny(selectedImages);\n\n    const imagesTitleClasses = [css.Content, css.Heading];\n    const useStyles = makeStyles({\n        buttonGroup: {\n            alignSelf: \"flex-start\",\n        }\n    });\n    const classes = useStyles();\n\n    let content = <div className={css.Wrapper}><LoadingIndicator /></div>\n\n    if (images) {\n        content = <Grid container direction=\"column\">\n            {(images && images.length) ?\n                (images.map((image, i) => {\n                    return <React.Fragment key={image.id}>\n\n                        <Accordion>\n\n                            <AccordionSummary\n                                expandIcon={<ExpandMoreIcon />}\n                                aria-label=\"Expand\"\n                                aria-controls=\"additional-actions1-content\"\n                                id=\"additional-actions1-header\"\n                            >\n                                <FormControlLabel\n                                    aria-label=\"Acknowledge\"\n                                    onClick={(event) => event.stopPropagation()}\n                                    onFocus={(event) => event.stopPropagation()}\n                                    control={<Checkbox\n                                        color=\"primary\"\n                                        onChange={handleCheckboxChange}\n                                        id={image.id}\n                                        checked={selectedImages[image.id] || false} />}\n                                    label=\"\"\n                                />\n                                <Grid item container className={css.Content}>\n                                    <Tooltip title={image.repository}>\n                                        <Grid className={css.Repository}>{image.repository}</Grid>\n                                    </Tooltip>\n                                    {(desktop || tabletLandscape) &&\n                                        <Tooltip title={image.tag}>\n                                            <Grid className={css.Tag}>{image.tag}</Grid>\n                                        </Tooltip>\n                                    }\n                                    {!phone &&\n                                        <Tooltip title={image.id}>\n                                            <Grid className={css.Id}>{image.id}</Grid>\n                                        </Tooltip>\n                                    }\n                                    {(desktop || tabletLandscape) &&\n                                        <Tooltip title={image.created}>\n                                            <Grid className={css.Created}>{image.created}</Grid>\n                                        </Tooltip>\n                                    }\n                                    {desktop &&\n                                        <Tooltip title={image.size}>\n                                            <Grid className={css.Size}>{image.size}</Grid>\n                                        </Tooltip>\n                                    }\n\n                                    <FormControlLabel\n                                        aria-label=\"Acknowledge\"\n                                        onClick={(event) => event.stopPropagation()}\n                                        onFocus={(event) => event.stopPropagation()}\n                                        control={<MenuImages\n                                            imageId={image.id}\n                                            imageOperation={handleImageOperation}\n                                        />}\n                                        label=\"\"\n                                    />\n                                </Grid>\n                            </AccordionSummary>\n\n                            <AccordionDetails>\n                                <Grid container direction=\"column\">\n                                    <Grid container direction=\"row\">\n                                        <Grid item className={css.DetailTitle}>Size:</Grid>\n                                        <Grid item className={css.Size}>{image.size}</Grid>\n                                    </Grid>\n                                    <Grid container direction=\"row\">\n                                        <Grid item className={css.DetailTitle}>Created:</Grid>\n                                        <Grid item className={css.Created}>{image.created}</Grid>\n                                    </Grid>\n                                    <Grid container direction=\"row\">\n                                        <Grid item className={css.DetailTitle}>Tag:</Grid>\n                                        <Grid item className={css.Tag}>{image.tag}</Grid>\n                                    </Grid>\n                                    <Grid container direction=\"row\">\n                                        <Grid item className={css.DetailTitle}>ID:</Grid>\n                                        <Grid item className={css.Id}>{image.id}</Grid>\n                                    </Grid>\n                                </Grid>\n                            </AccordionDetails>\n\n                        </Accordion>\n\n                    </React.Fragment>\n                }))\n                :\n                ''\n            }\n        </Grid>\n    }\n\n    return (\n        <div className={css.Images}>\n            <div className={css.Wrapper}>\n                <h1 className={css.Headline}>Podman Images</h1>\n                <p>Showing information about images based on the `podman images` command</p>\n                <Grid container className={css.Buttons}>\n                    <Grid item className={css.Button}>\n                        <Button\n                            disabled={!isSelected}\n                            color=\"secondary\"\n                            variant=\"outlined\"\n                            startIcon={<DeleteIcon />}\n                            onClick={() => handleImageOperation(selectedImages, \"remove\")}>\n                            Remove Selected\n                    </Button>\n                    </Grid>\n                    <Grid item className={css.Button}>\n                        <Button\n                            color=\"secondary\"\n                            variant=\"outlined\"\n                            startIcon={<DeleteIcon />}\n                            onClick={() => pruneImages()}>\n                            Remove unused images\n                        </Button>\n                    </Grid>\n\n                    <Grid item className={css.Button}>\n                        <Button variant=\"outlined\" color=\"primary\" onClick={handlePullOpen}>\n                            Pull\n                        </Button>\n                        <Dialog open={openPullModal} onClose={handlePullClose} aria-labelledby=\"form-dialog-title\">\n                            <DialogTitle id=\"form-dialog-title\">Pull</DialogTitle>\n                            <DialogContent>\n                                <DialogContentText>\n                                    Enter the image you want to pull\n                            </DialogContentText>\n                                <TextField\n                                    autoFocus\n                                    margin=\"dense\"\n                                    id=\"name\"\n                                    label=\"Image Pull\"\n                                    type=\"text\"\n                                    fullWidth\n                                    onChange={onChangePull}\n                                />\n                            </DialogContent>\n                            <DialogActions>\n                                <Button onClick={handleImagePull} color=\"primary\">\n                                    Pull\n                            </Button>\n                            </DialogActions>\n                        </Dialog>\n                    </Grid>\n\n                    {loading && <LoadingIndicator />}\n\n                </Grid>\n\n                {showError &&\n                    <Alert severity=\"error\" onClose={() => { setShowError(!showError) }}>\n                        <AlertTitle><strong>Error</strong></AlertTitle>\n                        The following images are being used and cannot be deleted:\n                        {(errorInfo.length > 0) ?\n                            (errorInfo.split(' ').map((name, i) => {\n                                return <Typography key={name} variant=\"body1\" component=\"div\" align=\"left\">\n                                    <strong>image: {name}</strong><strong></strong>\n                                </Typography>\n                            }))\n                            :\n                            ''\n                        }\n                    </Alert>\n                }\n\n                {showBackendError &&\n                    <Alert severity=\"error\" onClose={() => { setShowBackendError(!showBackendError) }}>\n                        <AlertTitle><strong>Backend Error</strong></AlertTitle>\n                        {errorContainers.length > 0 &&\n                            <p className={css.Error}>{errorContainers}</p>\n                        }\n                        {errorImages.length > 0 &&\n                            <p className={css.Error}>{errorImages}</p>\n                        }\n                    </Alert>\n                }\n\n\n                <div className={css.Info}>\n                    <div className={imagesTitleClasses.join(' ')}>\n                        <Checkbox color=\"primary\" onChange={selectAll} checked={allTrue || false} />\n                        <div className={css.Repository}>Repository</div>\n                        {(desktop || tabletLandscape) &&\n                            <div className={css.Tag}>Tag</div>\n                        }\n                        {!phone &&\n                            <div className={css.Id}>ID</div>\n                        }\n                        {(desktop || tabletLandscape) &&\n                            <div className={css.Created}>Created</div>\n                        }\n                        {desktop &&\n                            <div className={css.Size}>Size</div>\n                        }\n\n                    </div>\n                    {content}\n                </div>\n            </div>\n        </div>\n    );\n};\n\nconst mapStateToProps = (state: AppState) => {\n    return {\n        images: state.images.images,\n        loading: state.images.loading,\n        containers: state.containers.containers,\n        errorImages: state.images.error,\n        errorContainers: state.containers.error,\n    };\n};\n\nconst mapDispatchToProps = (dispatch: ThunkDispatch<any, any, AnyAction>) => {\n    return {\n        fetchImages: () =>\n            dispatch(actions.fetchImages()),\n        removeImages: (selectedImages: String[]) =>\n            dispatch(actions.removeImages(selectedImages)),\n        pruneImages: () =>\n            dispatch(actions.pruneImages()),\n        pullImage: (name) =>\n            dispatch(actions.pullImage(name)),\n        fetchContainers: () =>\n            dispatch(actions.fetchContainers()),\n    };\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Images);\n"],"sourceRoot":""}