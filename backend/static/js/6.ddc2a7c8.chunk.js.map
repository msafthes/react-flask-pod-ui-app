{"version":3,"sources":["helpers/helpers.tsx","pages/Images/Images.module.css","components/MaterialCustomized/MenuImages.tsx","pages/Images/Images.tsx"],"names":["isAllTrue","obj","_i","_Object$entries","Object","entries","length","_ref3","_ref2","_home_msafpc_react_flask_pod_ui_app_frontend_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__","handleSelectAll","selectedItems","allTrue","updated","_home_msafpc_react_flask_pod_ui_app_frontend_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","_i2","_Object$entries2","_ref6","_ref5","key","toggleSelectAll","isSelectedAny","_i3","_Object$entries3","_ref9","_ref8","extractIds","items","imageIds","_i5","_Object$entries5","_ref15","_ref14","push","extractSelected","_i6","_Object$entries6","_ref18","_ref17","module","exports","Images","Wrapper","Info","Content","Buttons","Heading","Repository","Tag","Id","Created","Size","Button","Headline","DetailTitle","Error","MenuImages","props","imageId","imageOperation","_useState","useState","_useState2","slicedToArray","anchorEl","setAnchorEl","id","handleClose","react_default","a","createElement","variant","color","aria-controls","aria-haspopup","onClick","event","currentTarget","Menu","keepMounted","open","Boolean","onClose","MenuItem","connect","state","images","loading","containers","errorImages","error","errorContainers","dispatch","fetchImages","actions","removeImages","selectedImages","pruneImages","pullImage","name","fetchContainers","_useViewport","useViewport","phone","tabletLandscape","desktop","defaultSelectedImages","objectSpread","setSelectedImages","_useState3","_useState4","showError","setShowError","_useState5","_useState6","showBackendError","setShowBackendError","_useState7","_useState8","errorInfo","setErrorInfo","_useState9","_useState10","openPullModal","setOpenPullModal","_useState11","_useState12","pullImageName","setPullImageName","useEffect","newSelected","handleCheckboxChange","changeEvent","target","old","handleRemoveImages","usedImages","usedImagesNames","forEach","image","imageRepoTag","tag","concat","repository","container","toConsumableArray","Set","join","handleImageOperation","mode","toLowerCase","console","log","_i4","_Object$entries4","_ref12","_ref11","isSelected","imagesTitleClasses","css","content","className","LoadingIndicator","Grid","direction","map","i","Fragment","Accordion","AccordionSummary","expandIcon","ExpandMore_default","aria-label","FormControlLabel","stopPropagation","onFocus","control","Checkbox","onChange","checked","label","item","Tooltip","title","created","size","MaterialCustomized_MenuImages","AccordionDetails","disabled","startIcon","Delete_default","Dialog","aria-labelledby","DialogTitle","DialogContent","DialogContentText","TextField","autoFocus","margin","type","fullWidth","e","value","DialogActions","Alert","severity","AlertTitle","split","Typography","component","align"],"mappings":"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","file":"js/6.ddc2a7c8.chunk.js","sourcesContent":["// Sets all properties of an object to FALSE\nexport const isAllTrue = (obj: Object) => {\n    for (const [key, value] of Object.entries(obj)) {\n        if (value === false) {\n            return false;\n        }\n    }\n    return true;\n};\n\n// The following two functions handle the main select checkbox, if there is < all elements selected, it selects all of them\n// if all elements are selected, it deselects all of them\nexport const toggleSelectAll = (obj: Object, allTrue: Boolean) => {\n    for (const [key, value] of Object.entries(obj)) {\n        if (allTrue) {\n            obj[key] = false\n        } else {\n            obj[key] = true\n        }\n    }\n};\n\nexport const handleSelectAll = (selectedItems: Object) => {\n    const allTrue = isAllTrue(selectedItems);\n    const updated = { ...selectedItems };\n    toggleSelectAll(updated, allTrue);\n\n    return updated\n};\n\n// Checks if any element is selected\nexport const isSelectedAny = (selectedItems: Object) => {\n    for (const [key, value] of Object.entries(selectedItems)) {\n        if (value === true) {\n            return true\n        }\n    }\n    return false;\n};\n\n// Checks if 1 element is selected\nexport const isSelectedOne = (selectedItems: Object) => {\n    let count = 0;\n\n    for (const [key, value] of Object.entries(selectedItems)) {\n        if (value === true) {\n            count++;\n        }\n    }\n\n    return count === 1;\n};\n\n// Extracts IDs from elements and returns them as an array\nexport const extractIds = (items: Object) => {\n    const imageIds = [];\n    for (const [key, value] of Object.entries(items)) {\n        if (value === true) {\n            imageIds.push(key);\n        }\n    }\n    return imageIds;\n};\n\n// Extracts selected elements and returns them as an array\nexport const extractSelected = (items) => {\n    const selectedItems = [];\n    for (const [key, value] of Object.entries(items)) {\n        if (value === true) {\n            selectedItems.push(key);\n        }\n    }\n    return selectedItems;\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Images\":\"Images_Images__3zDvr\",\"Wrapper\":\"Images_Wrapper__2BpG3\",\"Info\":\"Images_Info__FUp36\",\"Content\":\"Images_Content__ScB8s\",\"Buttons\":\"Images_Buttons__3yo8E\",\"Heading\":\"Images_Heading__2aRa4\",\"Repository\":\"Images_Repository__lduol\",\"Tag\":\"Images_Tag__XyP_U\",\"Id\":\"Images_Id__bJ_lJ\",\"Created\":\"Images_Created__32q_6\",\"Size\":\"Images_Size__1PDK-\",\"Button\":\"Images_Button__3-1NS\",\"Headline\":\"Images_Headline__1ibx2\",\"DetailTitle\":\"Images_DetailTitle__1B6Tf\",\"Error\":\"Images_Error__3cwEP\"};","import React, { useState } from 'react';\n\nimport Button from '@material-ui/core/Button';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\n\n\nconst MenuImages = props => {\n    const { imageId, imageOperation } = props\n    const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n    const id = {};\n\n    if (imageId) {\n        id[imageId] = true;\n    }\n\n    const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleClose = () => {\n        setAnchorEl(null);\n    };\n\n    return (\n        <div>\n            <Button variant=\"outlined\" color=\"secondary\" aria-controls=\"simple-menu\" aria-haspopup=\"true\" onClick={handleClick}>\n                Actions\n            </Button>\n            <Menu\n                id=\"simple-menu\"\n                anchorEl={anchorEl}\n                keepMounted\n                open={Boolean(anchorEl)}\n                onClose={handleClose}\n            >\n                <MenuItem onClick={() => imageOperation(id, \"remove\")}>Remove</MenuItem>\n                <MenuItem onClick={handleClose}>Close</MenuItem>\n            </Menu>\n        </div>\n    )\n}\n\nexport default MenuImages;\n","import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { ThunkDispatch } from 'redux-thunk';\nimport { AnyAction } from 'redux';\nimport * as actions from '../../store/actions/index';\nimport { AppState } from '../../store';\n\nimport css from './Images.module.css';\nimport LoadingIndicator from '../../components/UI/LoadingIndicator/LoadingIndicator';\nimport MenuImages from '../../components/MaterialCustomized/MenuImages';\n\nimport { Image, Container } from '../../models/Models';\nimport { isAllTrue, handleSelectAll, isSelectedAny, extractIds } from '../../helpers/helpers';\nimport { useViewport } from '../../Viewport';\n\n// Material UI\nimport Grid from '@material-ui/core/Grid';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Button from '@material-ui/core/Button';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { Alert, AlertTitle } from '@material-ui/lab';\nimport { Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, TextField, Typography } from '@material-ui/core';\nimport Accordion from '@material-ui/core/Accordion';\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Tooltip from '@material-ui/core/Tooltip';\n\n\ninterface IImagesProps {\n    images: Image[],\n    loading: boolean,\n    errorContainers: string,\n    errorImages: string,\n    fetchImages: Function,\n    removeImages: Function,\n    pruneImages: Function,\n    pullImage: Function,\n\n    imagesDataTest: Image[],\n    containers: Container[],\n    fetchContainers: Function,\n}\n\nconst Images = (props: IImagesProps) => {\n    const { fetchImages, removeImages, pruneImages, pullImage, images, containers, fetchContainers, errorContainers, errorImages, loading } = props;\n    const { phone, tabletLandscape, desktop } = useViewport();\n\n    // used for selected images initialization\n    const defaultSelectedImages = {};\n\n    // by default no images are selected\n    for (const [key, value] of Object.entries(images)) {\n        defaultSelectedImages[value.id] = false\n    }\n\n    // local state\n    const [selectedImages, setSelectedImages] = useState<any>({ ...defaultSelectedImages });\n    const [showError, setShowError] = useState<boolean>(false);\n    const [showBackendError, setShowBackendError] = useState<boolean>(false);\n    const [errorInfo, setErrorInfo] = useState<string>(\"\");\n    const [openPullModal, setOpenPullModal] = useState(false);\n    const [pullImageName, setPullImageName] = useState(\"\");\n\n    // tracks if all images are selected in which case the main select checkbox becomes checked\n    const allTrue = isAllTrue(selectedImages);\n\n    // fetch information about images and containers\n    useEffect(() => {\n        fetchImages();\n        fetchContainers();\n    }, [fetchImages, fetchContainers]);\n\n    // checks if there is an error from backend\n    useEffect(() => {\n        setShowBackendError(errorContainers.length > 0 || errorImages.length > 0);\n    }, [errorContainers, errorImages]);\n\n    // whenever images data updates, add them to the selected images state, false by default\n    useEffect(() => {\n        const newSelected = {};\n        for (const [key, value] of Object.entries(images)) {\n            newSelected[value.id] = false\n        }\n        setSelectedImages({ ...newSelected });\n    }, [images]);\n\n    // handles select image checkbox event\n    const handleCheckboxChange = changeEvent => {\n        const { id } = changeEvent.target;\n        const old = { ...selectedImages };\n\n        for (const [key, value] of Object.entries(old)) {\n            if (id === key) {\n                old[key] = !old[key];\n            }\n        }\n\n        setSelectedImages(old);\n    };\n\n    // the following 4 functions handle the \"pull\" functionality for an image, opening and closing the modal,\n    // changing its name value as user types and triggers the appropriate Redux action to actually pull the image.\n    const handlePullOpen = () => {\n        setOpenPullModal(true);\n    };\n\n    const handlePullClose = () => {\n        setOpenPullModal(false);\n    };\n\n    const onChangePull = (e) => {\n        setPullImageName(e.target.value);\n    };\n\n    const handleImagePull = () => {\n        setOpenPullModal(false);\n        if (pullImageName.length == 0) {\n            return;\n        }\n        pullImage(pullImageName);\n        setPullImageName('');\n    };\n\n    // handles deletion of all selected images, if there is a container that depends on this image, an error message\n    // is displayed, letting the user know which of the images cannot be deleted.\n    const handleRemoveImages = (images, imageIds) => {\n        const usedImages = [];\n        let usedImagesNames = [];\n\n        images.forEach((image) => {\n            if (selectedImages[image.id] === true) {\n                const imageRepoTag = (image.tag === '') ? `${image.repository}` : `${image.repository}:${image.tag}`;\n                containers.forEach((container) => {\n                    if (container.image === imageRepoTag) {\n                        usedImages.push(image);\n                        usedImagesNames.push(imageRepoTag);\n                    }\n                });\n            }\n        });\n\n        if (usedImages.length > 0) {\n            setShowError(true);\n            usedImagesNames = [...new Set(usedImagesNames)];\n            setErrorInfo(usedImagesNames.join(\" \"));\n        } else {\n            removeImages(imageIds);\n        }\n    };\n\n    // handles various image operations triggered from the ACTIONS button for a specific image (not using the select feature)\n    const handleImageOperation = (selectedImages, mode: string) => {\n        const imageIds = extractIds(selectedImages);\n\n        switch (mode.toLowerCase()) {\n            case \"remove\":\n                handleRemoveImages(images, imageIds);\n                break;\n            default: console.log(\"Unknown operation!\");\n        }\n\n        const updated = { ...selectedImages };\n\n        for (const [key, value] of Object.entries(updated)) {\n            if (value === true) {\n                updated[key] = false\n            }\n        }\n        setSelectedImages(updated);\n    };\n\n    // marks all images as selected\n    const selectAll = () => {\n        const updated = handleSelectAll(selectedImages);\n        setSelectedImages(updated);\n    };\n\n    // if there is a selected image, the operations that require selection become available\n    const isSelected = isSelectedAny(selectedImages);\n\n    const imagesTitleClasses = [css.Content, css.Heading];\n\n    // stores the main content - information about images\n    let content = <div className={css.Wrapper}><LoadingIndicator /></div>\n\n    if (images) {\n        content = <Grid container direction=\"column\">\n            {(images && images.length) ?\n                (images.map((image, i) => {\n                    return <React.Fragment key={image.id}>\n\n                        <Accordion>\n\n                            <AccordionSummary\n                                expandIcon={<ExpandMoreIcon />}\n                                aria-label=\"Expand\"\n                                aria-controls=\"additional-actions1-content\"\n                                id=\"additional-actions1-header\"\n                            >\n                                <FormControlLabel\n                                    aria-label=\"Acknowledge\"\n                                    onClick={(event) => event.stopPropagation()}\n                                    onFocus={(event) => event.stopPropagation()}\n                                    control={<Checkbox\n                                        color=\"primary\"\n                                        onChange={handleCheckboxChange}\n                                        id={image.id}\n                                        checked={selectedImages[image.id] || false} />}\n                                    label=\"\"\n                                />\n                                <Grid item container className={css.Content}>\n                                    <Tooltip title={image.repository}>\n                                        <Grid className={css.Repository}>{image.repository}</Grid>\n                                    </Tooltip>\n                                    {(desktop || tabletLandscape) &&\n                                        <Tooltip title={image.tag}>\n                                            <Grid className={css.Tag}>{image.tag}</Grid>\n                                        </Tooltip>\n                                    }\n                                    {!phone &&\n                                        <Tooltip title={image.id}>\n                                            <Grid className={css.Id}>{image.id}</Grid>\n                                        </Tooltip>\n                                    }\n                                    {(desktop || tabletLandscape) &&\n                                        <Tooltip title={image.created}>\n                                            <Grid className={css.Created}>{image.created}</Grid>\n                                        </Tooltip>\n                                    }\n                                    {desktop &&\n                                        <Tooltip title={image.size}>\n                                            <Grid className={css.Size}>{image.size}</Grid>\n                                        </Tooltip>\n                                    }\n\n                                    <FormControlLabel\n                                        aria-label=\"Acknowledge\"\n                                        onClick={(event) => event.stopPropagation()}\n                                        onFocus={(event) => event.stopPropagation()}\n                                        control={<MenuImages\n                                            imageId={image.id}\n                                            imageOperation={handleImageOperation}\n                                        />}\n                                        label=\"\"\n                                    />\n                                </Grid>\n                            </AccordionSummary>\n\n                            <AccordionDetails>\n                                <Grid container direction=\"column\">\n                                    <Grid container direction=\"row\">\n                                        <Grid item className={css.DetailTitle}>Size:</Grid>\n                                        <Grid item className={css.Size}>{image.size}</Grid>\n                                    </Grid>\n                                    <Grid container direction=\"row\">\n                                        <Grid item className={css.DetailTitle}>Created:</Grid>\n                                        <Grid item className={css.Created}>{image.created}</Grid>\n                                    </Grid>\n                                    <Grid container direction=\"row\">\n                                        <Grid item className={css.DetailTitle}>Tag:</Grid>\n                                        <Grid item className={css.Tag}>{image.tag}</Grid>\n                                    </Grid>\n                                    <Grid container direction=\"row\">\n                                        <Grid item className={css.DetailTitle}>ID:</Grid>\n                                        <Grid item className={css.Id}>{image.id}</Grid>\n                                    </Grid>\n                                </Grid>\n                            </AccordionDetails>\n\n                        </Accordion>\n\n                    </React.Fragment>\n                }))\n                :\n                ''\n            }\n        </Grid>\n    }\n\n    return (\n        <div className={css.Images}>\n            <div className={css.Wrapper}>\n                <h1 className={css.Headline}>Podman Images</h1>\n                <p>Showing information about images based on the `podman images` command</p>\n                <Grid container className={css.Buttons}>\n                    <Grid item className={css.Button}>\n                        <Button\n                            disabled={!isSelected}\n                            color=\"secondary\"\n                            variant=\"outlined\"\n                            startIcon={<DeleteIcon />}\n                            onClick={() => handleImageOperation(selectedImages, \"remove\")}>\n                            Remove Selected\n                    </Button>\n                    </Grid>\n                    <Grid item className={css.Button}>\n                        <Button\n                            color=\"secondary\"\n                            variant=\"outlined\"\n                            startIcon={<DeleteIcon />}\n                            onClick={() => pruneImages()}>\n                            Remove unused images\n                        </Button>\n                    </Grid>\n\n                    <Grid item className={css.Button}>\n                        <Button variant=\"outlined\" color=\"primary\" onClick={handlePullOpen}>\n                            Pull\n                        </Button>\n                        <Dialog open={openPullModal} onClose={handlePullClose} aria-labelledby=\"form-dialog-title\">\n                            <DialogTitle id=\"form-dialog-title\">Pull</DialogTitle>\n                            <DialogContent>\n                                <DialogContentText>\n                                    Enter the image you want to pull\n                            </DialogContentText>\n                                <TextField\n                                    autoFocus\n                                    margin=\"dense\"\n                                    id=\"name\"\n                                    label=\"Image Pull\"\n                                    type=\"text\"\n                                    fullWidth\n                                    onChange={onChangePull}\n                                />\n                            </DialogContent>\n                            <DialogActions>\n                                <Button onClick={handleImagePull} color=\"primary\">\n                                    Pull\n                            </Button>\n                            </DialogActions>\n                        </Dialog>\n                    </Grid>\n\n                    {loading && <LoadingIndicator />}\n\n                </Grid>\n\n                {showError &&\n                    <Alert severity=\"error\" onClose={() => { setShowError(!showError) }}>\n                        <AlertTitle><strong>Error</strong></AlertTitle>\n                        The following images are being used and cannot be deleted:\n                        {(errorInfo.length > 0) ?\n                            (errorInfo.split(' ').map((name, i) => {\n                                return <Typography key={name} variant=\"body1\" component=\"div\" align=\"left\">\n                                    <strong>image: {name}</strong><strong></strong>\n                                </Typography>\n                            }))\n                            :\n                            ''\n                        }\n                    </Alert>\n                }\n\n                {showBackendError &&\n                    <Alert severity=\"error\" onClose={() => { setShowBackendError(!showBackendError) }}>\n                        <AlertTitle><strong>Backend Error</strong></AlertTitle>\n                        {errorContainers.length > 0 &&\n                            <p className={css.Error}>{errorContainers}</p>\n                        }\n                        {errorImages.length > 0 &&\n                            <p className={css.Error}>{errorImages}</p>\n                        }\n                    </Alert>\n                }\n\n\n                <div className={css.Info}>\n                    <div className={imagesTitleClasses.join(' ')}>\n                        <Checkbox color=\"primary\" onChange={selectAll} checked={allTrue || false} />\n                        <div className={css.Repository}>Repository</div>\n                        {(desktop || tabletLandscape) &&\n                            <div className={css.Tag}>Tag</div>\n                        }\n                        {!phone &&\n                            <div className={css.Id}>ID</div>\n                        }\n                        {(desktop || tabletLandscape) &&\n                            <div className={css.Created}>Created</div>\n                        }\n                        {desktop &&\n                            <div className={css.Size}>Size</div>\n                        }\n\n                    </div>\n                    {content}\n                </div>\n            </div>\n        </div>\n    );\n};\n\n// Redux Store variables\nconst mapStateToProps = (state: AppState) => {\n    return {\n        images: state.images.images,\n        loading: state.images.loading,\n        containers: state.containers.containers,\n        errorImages: state.images.error,\n        errorContainers: state.containers.error,\n    };\n};\n\n// Redux Store actions\nconst mapDispatchToProps = (dispatch: ThunkDispatch<any, any, AnyAction>) => {\n    return {\n        fetchImages: () =>\n            dispatch(actions.fetchImages()),\n        removeImages: (selectedImages: String[]) =>\n            dispatch(actions.removeImages(selectedImages)),\n        pruneImages: () =>\n            dispatch(actions.pruneImages()),\n        pullImage: (name) =>\n            dispatch(actions.pullImage(name)),\n        fetchContainers: () =>\n            dispatch(actions.fetchContainers()),\n    };\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Images);\n"],"sourceRoot":""}